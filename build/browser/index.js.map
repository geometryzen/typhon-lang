{"version":3,"file":"index.js","sources":["../../../src/cst/Tokens.ts","../../../src/cst/tables.ts","../../../src/common/asserts.ts","../../../src/common/base.ts","../../../src/common/TokenError.ts","../../../src/cst/Tokenizer.ts","../../../src/cst/tokenNames.ts","../../../src/cst/grammarName.ts","../../node_modules/tslib/tslib.es6.js","../../../src/common/syntaxError.ts","../../../src/common/Position.ts","../../../src/common/Range.ts","../../../src/common/tree.ts","../../../src/cst/splitSourceTextIntoLines.ts","../../../src/cst/parser.ts","../../../src/ast/types.ts","../../../src/ast/numericLiteral.ts","../../../src/ast/builder.ts","../../../src/sym/SymbolConstants.ts","../../../src/common/dictUpdate.ts","../../../src/sym/mangleName.ts","../../../src/sym/Symbol.ts","../../../src/sym/SymbolTableScope.ts","../../../src/sym/SymbolTable.ts","../../../src/sym/symtable.ts"],"sourcesContent":["/**\n * Symbolic constants for various Python Language tokens.\n */\nexport enum Tokens {\n    T_ENDMARKER = 0,\n    T_NAME = 1,\n    T_NUMBER = 2,\n    T_STRING = 3,\n    T_NEWLINE = 4,\n    T_INDENT = 5,\n    T_DEDENT = 6,\n    T_LPAR = 7,\n    T_RPAR = 8,\n    T_LSQB = 9,\n    T_RSQB = 10,\n    T_COLON = 11,\n    T_COMMA = 12,\n    T_SEMI = 13,\n    T_PLUS = 14,\n    T_MINUS = 15,\n    T_STAR = 16,\n    T_SLASH = 17,\n    T_VBAR = 18,\n    T_AMPER = 19,\n    T_LESS = 20,\n    T_GREATER = 21,\n    T_EQUAL = 22,\n    T_DOT = 23,\n    T_PERCENT = 24,\n    T_BACKQUOTE = 25,\n    T_LBRACE = 26,\n    T_RBRACE = 27,\n    T_EQEQUAL = 28,\n    T_NOTEQUAL = 29,\n    T_LESSEQUAL = 30,\n    T_GREATEREQUAL = 31,\n    T_TILDE = 32,\n    T_CIRCUMFLEX = 33,\n    T_LEFTSHIFT = 34,\n    T_RIGHTSHIFT = 35,\n    T_DOUBLESTAR = 36,\n    T_PLUSEQUAL = 37,\n    T_MINEQUAL = 38,\n    T_STAREQUAL = 39,\n    T_SLASHEQUAL = 40,\n    T_PERCENTEQUAL = 41,\n    T_AMPEREQUAL = 42,\n    T_VBAREQUAL = 43,\n    T_CIRCUMFLEXEQUAL = 44,\n    T_LEFTSHIFTEQUAL = 45,\n    T_RIGHTSHIFTEQUAL = 46,\n    T_DOUBLESTAREQUAL = 47,\n    T_DOUBLESLASH = 48,\n    T_DOUBLESLASHEQUAL = 49,\n    T_AT = 50,\n    T_ATEQUAL = 51,\n    T_OP = 52,\n    T_COMMENT = 53,\n    T_NL = 54,\n    T_RARROW = 55,\n    T_AWAIT = 56,\n    T_ASYNC = 57,\n    T_ERRORTOKEN = 58,\n    T_N_TOKENS = 59,\n    T_NT_OFFSET = 256\n}\n","// DO NOT MODIFY. File automatically generated by pgen/parser/main.py\nimport { Tokens } from './Tokens';\n\n/**\n * Mapping from operator textual symbols to token symbolic constants.\n */\nexport const OpMap: { [op: string]: Tokens } = {\n    \"(\": Tokens.T_LPAR,\n    \")\": Tokens.T_RPAR,\n    \"[\": Tokens.T_LSQB,\n    \"]\": Tokens.T_RSQB,\n    \":\": Tokens.T_COLON,\n    \",\": Tokens.T_COMMA,\n    \";\": Tokens.T_SEMI,\n    \"+\": Tokens.T_PLUS,\n    \"-\": Tokens.T_MINUS,\n    \"*\": Tokens.T_STAR,\n    \"/\": Tokens.T_SLASH,\n    \"|\": Tokens.T_VBAR,\n    \"&\": Tokens.T_AMPER,\n    \"<\": Tokens.T_LESS,\n    \">\": Tokens.T_GREATER,\n    \"=\": Tokens.T_EQUAL,\n    \".\": Tokens.T_DOT,\n    \"%\": Tokens.T_PERCENT,\n    \"`\": Tokens.T_BACKQUOTE,\n    \"{\": Tokens.T_LBRACE,\n    \"}\": Tokens.T_RBRACE,\n    \"@\": Tokens.T_AT,\n    \"==\": Tokens.T_EQEQUAL,\n    \"!=\": Tokens.T_NOTEQUAL,\n    \"<>\": Tokens.T_NOTEQUAL,\n    \"<=\": Tokens.T_LESSEQUAL,\n    \">=\": Tokens.T_GREATEREQUAL,\n    \"~\": Tokens.T_TILDE,\n    \"^\": Tokens.T_CIRCUMFLEX,\n    \"<<\": Tokens.T_LEFTSHIFT,\n    \">>\": Tokens.T_RIGHTSHIFT,\n    \"**\": Tokens.T_DOUBLESTAR,\n    \"+=\": Tokens.T_PLUSEQUAL,\n    \"-=\": Tokens.T_MINEQUAL,\n    \"*=\": Tokens.T_STAREQUAL,\n    \"/=\": Tokens.T_SLASHEQUAL,\n    \"%=\": Tokens.T_PERCENTEQUAL,\n    \"&=\": Tokens.T_AMPEREQUAL,\n    \"|=\": Tokens.T_VBAREQUAL,\n    \"^=\": Tokens.T_CIRCUMFLEXEQUAL,\n    \"<<=\": Tokens.T_LEFTSHIFTEQUAL,\n    \">>=\": Tokens.T_RIGHTSHIFTEQUAL,\n    \"**=\": Tokens.T_DOUBLESTAREQUAL,\n    \"//\": Tokens.T_DOUBLESLASH,\n    \"//=\": Tokens.T_DOUBLESLASHEQUAL,\n    \"->\": Tokens.T_RARROW\n};\n/**\n * An Arc is a pair, represented in an array, consisting a label and a to-state.\n */\nexport const ARC_SYMBOL_LABEL = 0;\nexport const ARC_TO_STATE = 1;\nexport type Arc = [number, number];\n/**\n *\n */\nexport const IDX_DFABT_DFA = 0;\nexport const IDX_DFABT_BEGIN_TOKENS = 1;\nexport type State = Arc[];\nexport type Dfa = State[];\nexport type BeginTokens = { [value: number]: number };\nexport type DfaAndBeginTokens = [Dfa, BeginTokens];\nexport const IDX_LABEL_TOKEN_OR_SYMBOL = 0;\nexport const IDX_LABEL_NAME = 1;\nexport type Label = [number, string | null];\n/**\n * Describes the shape of the ParseTables objects.\n */\nexport interface Grammar {\n    /**\n     * The number of the grammar's start symbol.\n     */\n    start: number;\n    /**\n     * A dict mapping symbol numbers to (DFA, first)\n     * pairs, where DFA is an item from the states list\n     * above, and first is a set of tokens that can\n     * begin this grammar rule (represented by a dict\n     * whose values are always 1).\n     */\n    dfas: { [symbolId: number]: DfaAndBeginTokens };\n    /**\n     * The first index is the symbol for a transition (a number).\n     * The second index is the haman-readable decode of the symbol, if it exists, otherwise `null`.\n     * Not all symbols have human-readable names.\n     * All symbols that have human-readable names are keywords, with one exception.\n     * The symbol 0 (zero) is an exceptional symbol and has the human-readavble name 'EMPTY'.\n     *\n     * a list of (x, y) pairs where x is either a token\n     * number or a symbol number, and y is either None\n     * or a string; the strings are keywords.  The label\n     * number is the index in this list; label numbers\n     * are used to mark state transitions (arcs) in the\n     * DFAs.\n     */\n    labels: Label[];\n    /**\n     * A mapping from a keyword to the symbol that has been assigned to it.\n     */\n    keywords: { [keyword: string]: number };\n    /**\n     * A mapping from a token to a symbol.\n     * A dict mapping token numbers to arc labels\n     */\n    tokens: { [token: number]: number };\n    /**\n     * Actually maps from the node constructor name.\n     */\n    sym: { [name: string]: number };\n    /**\n     * A lookup table for converting the value in the `sym` mapping back to a string.\n     */\n    number2symbol: { [value: number]: string };\n    /**\n     * A list of DFAs, where each DFA is a list of\n     * states, each state is is a list of arcs, and each\n     * arc is a (i, j) pair where i is a label and j is\n     * a state number.  The DFA number is the index into\n     * this list.  (This name is slightly confusing.)\n     * Final states are represented by a special arc of\n     * the form (0, j) where j is its own state number.\n     */\n    states: Dfa[];\n}\n/**\n *\n */\nexport const ParseTables: Grammar = {\nsym:\n{AndExpr: 257,\n ArithmeticExpr: 258,\n AtomExpr: 259,\n BitwiseAndExpr: 260,\n BitwiseOrExpr: 261,\n BitwiseXorExpr: 262,\n ComparisonExpr: 263,\n ExprList: 264,\n ExprStmt: 265,\n GeometricExpr: 266,\n GlobalStmt: 267,\n IfExpr: 268,\n ImportList: 269,\n ImportSpecifier: 270,\n LambdaExpr: 271,\n ModuleSpecifier: 272,\n NonLocalStmt: 273,\n NotExpr: 274,\n OrExpr: 275,\n PowerExpr: 276,\n ShiftExpr: 277,\n UnaryExpr: 278,\n YieldExpr: 279,\n annasign: 280,\n arglist: 281,\n argument: 282,\n assert_stmt: 283,\n augassign: 284,\n break_stmt: 285,\n classdef: 286,\n comp_op: 287,\n compound_stmt: 288,\n continue_stmt: 289,\n decorated: 290,\n decorator: 291,\n decorators: 292,\n del_stmt: 293,\n dictmaker: 294,\n dotted_as_name: 295,\n dotted_as_names: 296,\n dotted_name: 297,\n encoding_decl: 298,\n eval_input: 299,\n except_clause: 300,\n exec_stmt: 301,\n file_input: 302,\n flow_stmt: 303,\n for_stmt: 304,\n fpdef: 305,\n fplist: 306,\n funcdef: 307,\n gen_for: 308,\n gen_if: 309,\n gen_iter: 310,\n if_stmt: 311,\n import_from: 312,\n import_name: 313,\n import_stmt: 314,\n list_for: 315,\n list_if: 316,\n list_iter: 317,\n listmaker: 318,\n old_LambdaExpr: 319,\n old_test: 320,\n parameters: 321,\n pass_stmt: 322,\n print_stmt: 323,\n raise_stmt: 324,\n return_stmt: 325,\n simple_stmt: 326,\n single_input: 256,\n sliceop: 327,\n small_stmt: 328,\n stmt: 329,\n subscript: 330,\n subscriptlist: 331,\n suite: 332,\n testlist: 333,\n testlist1: 334,\n testlist_gexp: 335,\n testlist_safe: 336,\n trailer: 337,\n try_stmt: 338,\n varargslist: 339,\n while_stmt: 340,\n with_stmt: 341,\n with_var: 342,\n yield_stmt: 343},\nnumber2symbol:\n{256: 'single_input',\n 257: 'AndExpr',\n 258: 'ArithmeticExpr',\n 259: 'AtomExpr',\n 260: 'BitwiseAndExpr',\n 261: 'BitwiseOrExpr',\n 262: 'BitwiseXorExpr',\n 263: 'ComparisonExpr',\n 264: 'ExprList',\n 265: 'ExprStmt',\n 266: 'GeometricExpr',\n 267: 'GlobalStmt',\n 268: 'IfExpr',\n 269: 'ImportList',\n 270: 'ImportSpecifier',\n 271: 'LambdaExpr',\n 272: 'ModuleSpecifier',\n 273: 'NonLocalStmt',\n 274: 'NotExpr',\n 275: 'OrExpr',\n 276: 'PowerExpr',\n 277: 'ShiftExpr',\n 278: 'UnaryExpr',\n 279: 'YieldExpr',\n 280: 'annasign',\n 281: 'arglist',\n 282: 'argument',\n 283: 'assert_stmt',\n 284: 'augassign',\n 285: 'break_stmt',\n 286: 'classdef',\n 287: 'comp_op',\n 288: 'compound_stmt',\n 289: 'continue_stmt',\n 290: 'decorated',\n 291: 'decorator',\n 292: 'decorators',\n 293: 'del_stmt',\n 294: 'dictmaker',\n 295: 'dotted_as_name',\n 296: 'dotted_as_names',\n 297: 'dotted_name',\n 298: 'encoding_decl',\n 299: 'eval_input',\n 300: 'except_clause',\n 301: 'exec_stmt',\n 302: 'file_input',\n 303: 'flow_stmt',\n 304: 'for_stmt',\n 305: 'fpdef',\n 306: 'fplist',\n 307: 'funcdef',\n 308: 'gen_for',\n 309: 'gen_if',\n 310: 'gen_iter',\n 311: 'if_stmt',\n 312: 'import_from',\n 313: 'import_name',\n 314: 'import_stmt',\n 315: 'list_for',\n 316: 'list_if',\n 317: 'list_iter',\n 318: 'listmaker',\n 319: 'old_LambdaExpr',\n 320: 'old_test',\n 321: 'parameters',\n 322: 'pass_stmt',\n 323: 'print_stmt',\n 324: 'raise_stmt',\n 325: 'return_stmt',\n 326: 'simple_stmt',\n 327: 'sliceop',\n 328: 'small_stmt',\n 329: 'stmt',\n 330: 'subscript',\n 331: 'subscriptlist',\n 332: 'suite',\n 333: 'testlist',\n 334: 'testlist1',\n 335: 'testlist_gexp',\n 336: 'testlist_safe',\n 337: 'trailer',\n 338: 'try_stmt',\n 339: 'varargslist',\n 340: 'while_stmt',\n 341: 'with_stmt',\n 342: 'with_var',\n 343: 'yield_stmt'},\ndfas:\n{256: [[[[1, 1], [2, 1], [3, 2]], [[0, 1]], [[1, 1]]],\n       {1: 1,\n        4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1,\n        16: 1,\n        17: 1,\n        18: 1,\n        19: 1,\n        20: 1,\n        21: 1,\n        22: 1,\n        23: 1,\n        24: 1,\n        25: 1,\n        26: 1,\n        27: 1,\n        28: 1,\n        29: 1,\n        30: 1,\n        31: 1,\n        32: 1,\n        33: 1,\n        34: 1,\n        35: 1,\n        36: 1,\n        37: 1}],\n 257: [[[[38, 1]], [[39, 0], [0, 1]]],\n       {4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1}],\n 258: [[[[40, 1]], [[5, 0], [6, 0], [0, 1]]],\n       {5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1}],\n 259: [[[[8, 1], [9, 2], [10, 3], [11, 4], [12, 5], [13, 5], [14, 6]],\n        [[41, 7], [42, 7], [43, 5]],\n        [[44, 8], [45, 5]],\n        [[46, 9], [47, 5]],\n        [[48, 10]],\n        [[0, 5]],\n        [[14, 6], [0, 6]],\n        [[43, 5]],\n        [[45, 5]],\n        [[47, 5]],\n        [[11, 5]]],\n       {8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1}],\n 260: [[[[49, 1]], [[50, 0], [0, 1]]],\n       {5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1}],\n 261: [[[[51, 1]], [[52, 0], [0, 1]]],\n       {5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1}],\n 262: [[[[53, 1]], [[54, 0], [0, 1]]],\n       {5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1}],\n 263: [[[[55, 1]], [[56, 0], [0, 1]]],\n       {5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1}],\n 264: [[[[55, 1]], [[57, 2], [0, 1]], [[55, 1], [0, 2]]],\n       {5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1}],\n 265: [[[[58, 1]],\n        [[59, 2], [60, 3], [61, 4], [0, 1]],\n        [[0, 2]],\n        [[41, 2], [58, 2]],\n        [[41, 5], [58, 5]],\n        [[61, 4], [0, 5]]],\n       {4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1}],\n 266: [[[[62, 1]], [[63, 0], [64, 0], [65, 0], [66, 0], [0, 1]]],\n       {5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1}],\n 267: [[[[26, 1]], [[12, 2]], [[57, 1], [0, 2]]], {26: 1}],\n 268: [[[[67, 1], [68, 2]],\n        [[30, 3], [0, 1]],\n        [[0, 2]],\n        [[67, 4]],\n        [[69, 5]],\n        [[70, 2]]],\n       {4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1}],\n 269: [[[[71, 1]], [[57, 2], [0, 1]], [[71, 1], [0, 2]]], {12: 1}],\n 270: [[[[12, 1]], [[72, 2], [0, 1]], [[12, 3]], [[0, 3]]], {12: 1}],\n 271: [[[[15, 1]], [[73, 2], [74, 3]], [[74, 3]], [[70, 4]], [[0, 4]]],\n       {15: 1}],\n 272: [[[[14, 1]], [[0, 1]]], {14: 1}],\n 273: [[[[27, 1]], [[12, 2]], [[57, 1], [0, 2]]], {27: 1}],\n 274: [[[[4, 1], [75, 2]], [[38, 2]], [[0, 2]]],\n       {4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1}],\n 275: [[[[76, 1]], [[77, 0], [0, 1]]],\n       {4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1}],\n 276: [[[[78, 1]], [[79, 1], [80, 2], [0, 1]], [[49, 3]], [[0, 3]]],\n       {8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1}],\n 277: [[[[81, 1]], [[82, 0], [83, 0], [0, 1]]],\n       {5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1}],\n 278: [[[[5, 1], [6, 1], [7, 1], [84, 2]], [[49, 2]], [[0, 2]]],\n       {5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1}],\n 279: [[[[23, 1]], [[58, 2], [0, 1]], [[0, 2]]], {23: 1}],\n 280: [[[[74, 1]], [[70, 2]], [[61, 3], [0, 2]], [[70, 4]], [[0, 4]]], {74: 1}],\n 281: [[[[85, 1], [63, 2], [80, 3]],\n        [[57, 4], [0, 1]],\n        [[70, 5]],\n        [[70, 6]],\n        [[85, 1], [63, 2], [80, 3], [0, 4]],\n        [[57, 7], [0, 5]],\n        [[0, 6]],\n        [[85, 5], [80, 3]]],\n       {4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1,\n        63: 1,\n        80: 1}],\n 282: [[[[70, 1]], [[86, 2], [61, 3], [0, 1]], [[0, 2]], [[70, 2]]],\n       {4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1}],\n 283: [[[[29, 1]], [[70, 2]], [[57, 3], [0, 2]], [[70, 4]], [[0, 4]]], {29: 1}],\n 284: [[[[87, 1],\n         [88, 1],\n         [89, 1],\n         [90, 1],\n         [91, 1],\n         [92, 1],\n         [93, 1],\n         [94, 1],\n         [95, 1],\n         [96, 1],\n         [97, 1],\n         [98, 1]],\n        [[0, 1]]],\n       {87: 1,\n        88: 1,\n        89: 1,\n        90: 1,\n        91: 1,\n        92: 1,\n        93: 1,\n        94: 1,\n        95: 1,\n        96: 1,\n        97: 1,\n        98: 1}],\n 285: [[[[19, 1]], [[0, 1]]], {19: 1}],\n 286: [[[[36, 1]],\n        [[12, 2]],\n        [[8, 3], [74, 4]],\n        [[58, 5], [43, 6]],\n        [[99, 7]],\n        [[43, 6]],\n        [[74, 4]],\n        [[0, 7]]],\n       {36: 1}],\n 287: [[[[100, 1],\n         [101, 1],\n         [102, 1],\n         [103, 1],\n         [104, 1],\n         [105, 1],\n         [105, 1],\n         [106, 1],\n         [4, 2],\n         [107, 3]],\n        [[0, 1]],\n        [[106, 1]],\n        [[4, 1], [0, 3]]],\n       {4: 1, 100: 1, 101: 1, 102: 1, 103: 1, 104: 1, 105: 1, 106: 1, 107: 1}],\n 288: [[[[108, 1],\n         [109, 1],\n         [110, 1],\n         [111, 1],\n         [112, 1],\n         [113, 1],\n         [114, 1],\n         [115, 1]],\n        [[0, 1]]],\n       {30: 1, 31: 1, 32: 1, 33: 1, 34: 1, 35: 1, 36: 1, 37: 1}],\n 289: [[[[20, 1]], [[0, 1]]], {20: 1}],\n 290: [[[[116, 1]], [[114, 2], [113, 2]], [[0, 2]]], {37: 1}],\n 291: [[[[37, 1]],\n        [[117, 2]],\n        [[8, 3], [1, 4]],\n        [[118, 5], [43, 6]],\n        [[0, 4]],\n        [[43, 6]],\n        [[1, 4]]],\n       {37: 1}],\n 292: [[[[119, 1]], [[119, 1], [0, 1]]], {37: 1}],\n 293: [[[[17, 1]], [[120, 2]], [[0, 2]]], {17: 1}],\n 294: [[[[70, 1]], [[74, 2]], [[70, 3]], [[57, 4], [0, 3]], [[70, 1], [0, 4]]],\n       {4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1}],\n 295: [[[[117, 1]], [[72, 2], [0, 1]], [[12, 3]], [[0, 3]]], {12: 1}],\n 296: [[[[121, 1]], [[57, 0], [0, 1]]], {12: 1}],\n 297: [[[[12, 1]], [[122, 0], [0, 1]]], {12: 1}],\n 298: [[[[12, 1]], [[0, 1]]], {12: 1}],\n 299: [[[[58, 1]], [[1, 1], [123, 2]], [[0, 2]]],\n       {4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1}],\n 300: [[[[124, 1]],\n        [[70, 2], [0, 1]],\n        [[72, 3], [57, 3], [0, 2]],\n        [[70, 4]],\n        [[0, 4]]],\n       {124: 1}],\n 301: [[[[28, 1]],\n        [[55, 2]],\n        [[106, 3], [0, 2]],\n        [[70, 4]],\n        [[57, 5], [0, 4]],\n        [[70, 6]],\n        [[0, 6]]],\n       {28: 1}],\n 302: [[[[1, 0], [125, 0], [123, 1]], [[0, 1]]],\n       {1: 1,\n        4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1,\n        16: 1,\n        17: 1,\n        18: 1,\n        19: 1,\n        20: 1,\n        21: 1,\n        22: 1,\n        23: 1,\n        24: 1,\n        25: 1,\n        26: 1,\n        27: 1,\n        28: 1,\n        29: 1,\n        30: 1,\n        31: 1,\n        32: 1,\n        33: 1,\n        34: 1,\n        35: 1,\n        36: 1,\n        37: 1,\n        123: 1}],\n 303: [[[[126, 1], [127, 1], [128, 1], [129, 1], [130, 1]], [[0, 1]]],\n       {19: 1, 20: 1, 21: 1, 22: 1, 23: 1}],\n 304: [[[[32, 1]],\n        [[120, 2]],\n        [[106, 3]],\n        [[58, 4]],\n        [[74, 5]],\n        [[99, 6]],\n        [[69, 7], [0, 6]],\n        [[74, 8]],\n        [[99, 9]],\n        [[0, 9]]],\n       {32: 1}],\n 305: [[[[12, 1], [8, 2]],\n        [[74, 3], [0, 1]],\n        [[131, 4]],\n        [[70, 5]],\n        [[43, 5]],\n        [[0, 5]]],\n       {8: 1, 12: 1}],\n 306: [[[[132, 1]], [[57, 2], [0, 1]], [[132, 1], [0, 2]]], {8: 1, 12: 1}],\n 307: [[[[35, 1]],\n        [[12, 2]],\n        [[133, 3]],\n        [[134, 4], [74, 5]],\n        [[70, 6]],\n        [[99, 7]],\n        [[74, 5]],\n        [[0, 7]]],\n       {35: 1}],\n 308: [[[[32, 1]],\n        [[120, 2]],\n        [[106, 3]],\n        [[67, 4]],\n        [[135, 5], [0, 4]],\n        [[0, 5]]],\n       {32: 1}],\n 309: [[[[30, 1]], [[136, 2]], [[135, 3], [0, 2]], [[0, 3]]], {30: 1}],\n 310: [[[[86, 1], [137, 1]], [[0, 1]]], {30: 1, 32: 1}],\n 311: [[[[30, 1]],\n        [[70, 2]],\n        [[74, 3]],\n        [[99, 4]],\n        [[138, 1], [69, 5], [0, 4]],\n        [[74, 6]],\n        [[99, 7]],\n        [[0, 7]]],\n       {30: 1}],\n 312: [[[[25, 1]],\n        [[139, 2]],\n        [[24, 3]],\n        [[63, 4], [8, 5], [140, 4]],\n        [[0, 4]],\n        [[140, 6]],\n        [[43, 4]]],\n       {25: 1}],\n 313: [[[[24, 1]], [[141, 2]], [[0, 2]]], {24: 1}],\n 314: [[[[142, 1], [143, 1]], [[0, 1]]], {24: 1, 25: 1}],\n 315: [[[[32, 1]],\n        [[120, 2]],\n        [[106, 3]],\n        [[144, 4]],\n        [[145, 5], [0, 4]],\n        [[0, 5]]],\n       {32: 1}],\n 316: [[[[30, 1]], [[136, 2]], [[145, 3], [0, 2]], [[0, 3]]], {30: 1}],\n 317: [[[[146, 1], [147, 1]], [[0, 1]]], {30: 1, 32: 1}],\n 318: [[[[70, 1]],\n        [[146, 2], [57, 3], [0, 1]],\n        [[0, 2]],\n        [[70, 4], [0, 3]],\n        [[57, 3], [0, 4]]],\n       {4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1}],\n 319: [[[[15, 1]], [[73, 2], [74, 3]], [[74, 3]], [[136, 4]], [[0, 4]]],\n       {15: 1}],\n 320: [[[[67, 1], [148, 1]], [[0, 1]]],\n       {4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1}],\n 321: [[[[8, 1]], [[73, 2], [43, 3]], [[43, 3]], [[0, 3]]], {8: 1}],\n 322: [[[[18, 1]], [[0, 1]]], {18: 1}],\n 323: [[[[16, 1]],\n        [[70, 2], [83, 3], [0, 1]],\n        [[57, 4], [0, 2]],\n        [[70, 5]],\n        [[70, 2], [0, 4]],\n        [[57, 6], [0, 5]],\n        [[70, 7]],\n        [[57, 8], [0, 7]],\n        [[70, 7], [0, 8]]],\n       {16: 1}],\n 324: [[[[22, 1]],\n        [[70, 2], [0, 1]],\n        [[57, 3], [0, 2]],\n        [[70, 4]],\n        [[57, 5], [0, 4]],\n        [[70, 6]],\n        [[0, 6]]],\n       {22: 1}],\n 325: [[[[21, 1]], [[58, 2], [0, 1]], [[0, 2]]], {21: 1}],\n 326: [[[[149, 1]], [[150, 2], [1, 3]], [[149, 1], [1, 3]], [[0, 3]]],\n       {4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1,\n        16: 1,\n        17: 1,\n        18: 1,\n        19: 1,\n        20: 1,\n        21: 1,\n        22: 1,\n        23: 1,\n        24: 1,\n        25: 1,\n        26: 1,\n        27: 1,\n        28: 1,\n        29: 1}],\n 327: [[[[74, 1]], [[70, 2], [0, 1]], [[0, 2]]], {74: 1}],\n 328: [[[[151, 1],\n         [152, 1],\n         [153, 1],\n         [154, 1],\n         [155, 1],\n         [156, 1],\n         [157, 1],\n         [158, 1],\n         [159, 1],\n         [160, 1]],\n        [[0, 1]]],\n       {4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1,\n        16: 1,\n        17: 1,\n        18: 1,\n        19: 1,\n        20: 1,\n        21: 1,\n        22: 1,\n        23: 1,\n        24: 1,\n        25: 1,\n        26: 1,\n        27: 1,\n        28: 1,\n        29: 1}],\n 329: [[[[2, 1], [3, 1]], [[0, 1]]],\n       {4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1,\n        16: 1,\n        17: 1,\n        18: 1,\n        19: 1,\n        20: 1,\n        21: 1,\n        22: 1,\n        23: 1,\n        24: 1,\n        25: 1,\n        26: 1,\n        27: 1,\n        28: 1,\n        29: 1,\n        30: 1,\n        31: 1,\n        32: 1,\n        33: 1,\n        34: 1,\n        35: 1,\n        36: 1,\n        37: 1}],\n 330: [[[[122, 1], [70, 2], [74, 3]],\n        [[122, 4]],\n        [[74, 3], [0, 2]],\n        [[70, 5], [161, 6], [0, 3]],\n        [[122, 6]],\n        [[161, 6], [0, 5]],\n        [[0, 6]]],\n       {4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1,\n        74: 1,\n        122: 1}],\n 331: [[[[162, 1]], [[57, 2], [0, 1]], [[162, 1], [0, 2]]],\n       {4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1,\n        74: 1,\n        122: 1}],\n 332: [[[[2, 1], [1, 2]],\n        [[0, 1]],\n        [[163, 3]],\n        [[125, 4]],\n        [[125, 4], [164, 1]]],\n       {1: 1,\n        4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1,\n        16: 1,\n        17: 1,\n        18: 1,\n        19: 1,\n        20: 1,\n        21: 1,\n        22: 1,\n        23: 1,\n        24: 1,\n        25: 1,\n        26: 1,\n        27: 1,\n        28: 1,\n        29: 1}],\n 333: [[[[70, 1]], [[57, 2], [0, 1]], [[70, 1], [0, 2]]],\n       {4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1}],\n 334: [[[[70, 1]], [[57, 0], [0, 1]]],\n       {4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1}],\n 335: [[[[70, 1]],\n        [[86, 2], [57, 3], [0, 1]],\n        [[0, 2]],\n        [[70, 4], [0, 3]],\n        [[57, 3], [0, 4]]],\n       {4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1}],\n 336: [[[[136, 1]],\n        [[57, 2], [0, 1]],\n        [[136, 3]],\n        [[57, 4], [0, 3]],\n        [[136, 3], [0, 4]]],\n       {4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1}],\n 337: [[[[8, 1], [9, 2], [122, 3]],\n        [[118, 4], [43, 5]],\n        [[165, 6]],\n        [[12, 5]],\n        [[43, 5]],\n        [[0, 5]],\n        [[45, 5]]],\n       {8: 1, 9: 1, 122: 1}],\n 338: [[[[33, 1]],\n        [[74, 2]],\n        [[99, 3]],\n        [[166, 4], [167, 5]],\n        [[74, 6]],\n        [[74, 7]],\n        [[99, 8]],\n        [[99, 9]],\n        [[166, 4], [69, 10], [167, 5], [0, 8]],\n        [[0, 9]],\n        [[74, 11]],\n        [[99, 12]],\n        [[167, 5], [0, 12]]],\n       {33: 1}],\n 339: [[[[132, 1], [63, 2], [80, 3]],\n        [[61, 4], [57, 5], [0, 1]],\n        [[12, 6]],\n        [[12, 7]],\n        [[70, 8]],\n        [[132, 1], [63, 2], [80, 3], [0, 5]],\n        [[57, 9], [0, 6]],\n        [[0, 7]],\n        [[57, 5], [0, 8]],\n        [[80, 3]]],\n       {8: 1, 12: 1, 63: 1, 80: 1}],\n 340: [[[[31, 1]],\n        [[70, 2]],\n        [[74, 3]],\n        [[99, 4]],\n        [[69, 5], [0, 4]],\n        [[74, 6]],\n        [[99, 7]],\n        [[0, 7]]],\n       {31: 1}],\n 341: [[[[34, 1]],\n        [[70, 2]],\n        [[168, 3], [74, 4]],\n        [[74, 4]],\n        [[99, 5]],\n        [[0, 5]]],\n       {34: 1}],\n 342: [[[[72, 1]], [[55, 2]], [[0, 2]]], {72: 1}],\n 343: [[[[41, 1]], [[0, 1]]], {23: 1}]},\nstates:\n[[[[1, 1], [2, 1], [3, 2]], [[0, 1]], [[1, 1]]],\n [[[38, 1]], [[39, 0], [0, 1]]],\n [[[40, 1]], [[5, 0], [6, 0], [0, 1]]],\n [[[8, 1], [9, 2], [10, 3], [11, 4], [12, 5], [13, 5], [14, 6]],\n  [[41, 7], [42, 7], [43, 5]],\n  [[44, 8], [45, 5]],\n  [[46, 9], [47, 5]],\n  [[48, 10]],\n  [[0, 5]],\n  [[14, 6], [0, 6]],\n  [[43, 5]],\n  [[45, 5]],\n  [[47, 5]],\n  [[11, 5]]],\n [[[49, 1]], [[50, 0], [0, 1]]],\n [[[51, 1]], [[52, 0], [0, 1]]],\n [[[53, 1]], [[54, 0], [0, 1]]],\n [[[55, 1]], [[56, 0], [0, 1]]],\n [[[55, 1]], [[57, 2], [0, 1]], [[55, 1], [0, 2]]],\n [[[58, 1]],\n  [[59, 2], [60, 3], [61, 4], [0, 1]],\n  [[0, 2]],\n  [[41, 2], [58, 2]],\n  [[41, 5], [58, 5]],\n  [[61, 4], [0, 5]]],\n [[[62, 1]], [[63, 0], [64, 0], [65, 0], [66, 0], [0, 1]]],\n [[[26, 1]], [[12, 2]], [[57, 1], [0, 2]]],\n [[[67, 1], [68, 2]],\n  [[30, 3], [0, 1]],\n  [[0, 2]],\n  [[67, 4]],\n  [[69, 5]],\n  [[70, 2]]],\n [[[71, 1]], [[57, 2], [0, 1]], [[71, 1], [0, 2]]],\n [[[12, 1]], [[72, 2], [0, 1]], [[12, 3]], [[0, 3]]],\n [[[15, 1]], [[73, 2], [74, 3]], [[74, 3]], [[70, 4]], [[0, 4]]],\n [[[14, 1]], [[0, 1]]],\n [[[27, 1]], [[12, 2]], [[57, 1], [0, 2]]],\n [[[4, 1], [75, 2]], [[38, 2]], [[0, 2]]],\n [[[76, 1]], [[77, 0], [0, 1]]],\n [[[78, 1]], [[79, 1], [80, 2], [0, 1]], [[49, 3]], [[0, 3]]],\n [[[81, 1]], [[82, 0], [83, 0], [0, 1]]],\n [[[5, 1], [6, 1], [7, 1], [84, 2]], [[49, 2]], [[0, 2]]],\n [[[23, 1]], [[58, 2], [0, 1]], [[0, 2]]],\n [[[74, 1]], [[70, 2]], [[61, 3], [0, 2]], [[70, 4]], [[0, 4]]],\n [[[85, 1], [63, 2], [80, 3]],\n  [[57, 4], [0, 1]],\n  [[70, 5]],\n  [[70, 6]],\n  [[85, 1], [63, 2], [80, 3], [0, 4]],\n  [[57, 7], [0, 5]],\n  [[0, 6]],\n  [[85, 5], [80, 3]]],\n [[[70, 1]], [[86, 2], [61, 3], [0, 1]], [[0, 2]], [[70, 2]]],\n [[[29, 1]], [[70, 2]], [[57, 3], [0, 2]], [[70, 4]], [[0, 4]]],\n [[[87, 1],\n   [88, 1],\n   [89, 1],\n   [90, 1],\n   [91, 1],\n   [92, 1],\n   [93, 1],\n   [94, 1],\n   [95, 1],\n   [96, 1],\n   [97, 1],\n   [98, 1]],\n  [[0, 1]]],\n [[[19, 1]], [[0, 1]]],\n [[[36, 1]],\n  [[12, 2]],\n  [[8, 3], [74, 4]],\n  [[58, 5], [43, 6]],\n  [[99, 7]],\n  [[43, 6]],\n  [[74, 4]],\n  [[0, 7]]],\n [[[100, 1],\n   [101, 1],\n   [102, 1],\n   [103, 1],\n   [104, 1],\n   [105, 1],\n   [105, 1],\n   [106, 1],\n   [4, 2],\n   [107, 3]],\n  [[0, 1]],\n  [[106, 1]],\n  [[4, 1], [0, 3]]],\n [[[108, 1],\n   [109, 1],\n   [110, 1],\n   [111, 1],\n   [112, 1],\n   [113, 1],\n   [114, 1],\n   [115, 1]],\n  [[0, 1]]],\n [[[20, 1]], [[0, 1]]],\n [[[116, 1]], [[114, 2], [113, 2]], [[0, 2]]],\n [[[37, 1]],\n  [[117, 2]],\n  [[8, 3], [1, 4]],\n  [[118, 5], [43, 6]],\n  [[0, 4]],\n  [[43, 6]],\n  [[1, 4]]],\n [[[119, 1]], [[119, 1], [0, 1]]],\n [[[17, 1]], [[120, 2]], [[0, 2]]],\n [[[70, 1]], [[74, 2]], [[70, 3]], [[57, 4], [0, 3]], [[70, 1], [0, 4]]],\n [[[117, 1]], [[72, 2], [0, 1]], [[12, 3]], [[0, 3]]],\n [[[121, 1]], [[57, 0], [0, 1]]],\n [[[12, 1]], [[122, 0], [0, 1]]],\n [[[12, 1]], [[0, 1]]],\n [[[58, 1]], [[1, 1], [123, 2]], [[0, 2]]],\n [[[124, 1]],\n  [[70, 2], [0, 1]],\n  [[72, 3], [57, 3], [0, 2]],\n  [[70, 4]],\n  [[0, 4]]],\n [[[28, 1]],\n  [[55, 2]],\n  [[106, 3], [0, 2]],\n  [[70, 4]],\n  [[57, 5], [0, 4]],\n  [[70, 6]],\n  [[0, 6]]],\n [[[1, 0], [125, 0], [123, 1]], [[0, 1]]],\n [[[126, 1], [127, 1], [128, 1], [129, 1], [130, 1]], [[0, 1]]],\n [[[32, 1]],\n  [[120, 2]],\n  [[106, 3]],\n  [[58, 4]],\n  [[74, 5]],\n  [[99, 6]],\n  [[69, 7], [0, 6]],\n  [[74, 8]],\n  [[99, 9]],\n  [[0, 9]]],\n [[[12, 1], [8, 2]],\n  [[74, 3], [0, 1]],\n  [[131, 4]],\n  [[70, 5]],\n  [[43, 5]],\n  [[0, 5]]],\n [[[132, 1]], [[57, 2], [0, 1]], [[132, 1], [0, 2]]],\n [[[35, 1]],\n  [[12, 2]],\n  [[133, 3]],\n  [[134, 4], [74, 5]],\n  [[70, 6]],\n  [[99, 7]],\n  [[74, 5]],\n  [[0, 7]]],\n [[[32, 1]], [[120, 2]], [[106, 3]], [[67, 4]], [[135, 5], [0, 4]], [[0, 5]]],\n [[[30, 1]], [[136, 2]], [[135, 3], [0, 2]], [[0, 3]]],\n [[[86, 1], [137, 1]], [[0, 1]]],\n [[[30, 1]],\n  [[70, 2]],\n  [[74, 3]],\n  [[99, 4]],\n  [[138, 1], [69, 5], [0, 4]],\n  [[74, 6]],\n  [[99, 7]],\n  [[0, 7]]],\n [[[25, 1]],\n  [[139, 2]],\n  [[24, 3]],\n  [[63, 4], [8, 5], [140, 4]],\n  [[0, 4]],\n  [[140, 6]],\n  [[43, 4]]],\n [[[24, 1]], [[141, 2]], [[0, 2]]],\n [[[142, 1], [143, 1]], [[0, 1]]],\n [[[32, 1]], [[120, 2]], [[106, 3]], [[144, 4]], [[145, 5], [0, 4]], [[0, 5]]],\n [[[30, 1]], [[136, 2]], [[145, 3], [0, 2]], [[0, 3]]],\n [[[146, 1], [147, 1]], [[0, 1]]],\n [[[70, 1]],\n  [[146, 2], [57, 3], [0, 1]],\n  [[0, 2]],\n  [[70, 4], [0, 3]],\n  [[57, 3], [0, 4]]],\n [[[15, 1]], [[73, 2], [74, 3]], [[74, 3]], [[136, 4]], [[0, 4]]],\n [[[67, 1], [148, 1]], [[0, 1]]],\n [[[8, 1]], [[73, 2], [43, 3]], [[43, 3]], [[0, 3]]],\n [[[18, 1]], [[0, 1]]],\n [[[16, 1]],\n  [[70, 2], [83, 3], [0, 1]],\n  [[57, 4], [0, 2]],\n  [[70, 5]],\n  [[70, 2], [0, 4]],\n  [[57, 6], [0, 5]],\n  [[70, 7]],\n  [[57, 8], [0, 7]],\n  [[70, 7], [0, 8]]],\n [[[22, 1]],\n  [[70, 2], [0, 1]],\n  [[57, 3], [0, 2]],\n  [[70, 4]],\n  [[57, 5], [0, 4]],\n  [[70, 6]],\n  [[0, 6]]],\n [[[21, 1]], [[58, 2], [0, 1]], [[0, 2]]],\n [[[149, 1]], [[150, 2], [1, 3]], [[149, 1], [1, 3]], [[0, 3]]],\n [[[74, 1]], [[70, 2], [0, 1]], [[0, 2]]],\n [[[151, 1],\n   [152, 1],\n   [153, 1],\n   [154, 1],\n   [155, 1],\n   [156, 1],\n   [157, 1],\n   [158, 1],\n   [159, 1],\n   [160, 1]],\n  [[0, 1]]],\n [[[2, 1], [3, 1]], [[0, 1]]],\n [[[122, 1], [70, 2], [74, 3]],\n  [[122, 4]],\n  [[74, 3], [0, 2]],\n  [[70, 5], [161, 6], [0, 3]],\n  [[122, 6]],\n  [[161, 6], [0, 5]],\n  [[0, 6]]],\n [[[162, 1]], [[57, 2], [0, 1]], [[162, 1], [0, 2]]],\n [[[2, 1], [1, 2]], [[0, 1]], [[163, 3]], [[125, 4]], [[125, 4], [164, 1]]],\n [[[70, 1]], [[57, 2], [0, 1]], [[70, 1], [0, 2]]],\n [[[70, 1]], [[57, 0], [0, 1]]],\n [[[70, 1]],\n  [[86, 2], [57, 3], [0, 1]],\n  [[0, 2]],\n  [[70, 4], [0, 3]],\n  [[57, 3], [0, 4]]],\n [[[136, 1]],\n  [[57, 2], [0, 1]],\n  [[136, 3]],\n  [[57, 4], [0, 3]],\n  [[136, 3], [0, 4]]],\n [[[8, 1], [9, 2], [122, 3]],\n  [[118, 4], [43, 5]],\n  [[165, 6]],\n  [[12, 5]],\n  [[43, 5]],\n  [[0, 5]],\n  [[45, 5]]],\n [[[33, 1]],\n  [[74, 2]],\n  [[99, 3]],\n  [[166, 4], [167, 5]],\n  [[74, 6]],\n  [[74, 7]],\n  [[99, 8]],\n  [[99, 9]],\n  [[166, 4], [69, 10], [167, 5], [0, 8]],\n  [[0, 9]],\n  [[74, 11]],\n  [[99, 12]],\n  [[167, 5], [0, 12]]],\n [[[132, 1], [63, 2], [80, 3]],\n  [[61, 4], [57, 5], [0, 1]],\n  [[12, 6]],\n  [[12, 7]],\n  [[70, 8]],\n  [[132, 1], [63, 2], [80, 3], [0, 5]],\n  [[57, 9], [0, 6]],\n  [[0, 7]],\n  [[57, 5], [0, 8]],\n  [[80, 3]]],\n [[[31, 1]],\n  [[70, 2]],\n  [[74, 3]],\n  [[99, 4]],\n  [[69, 5], [0, 4]],\n  [[74, 6]],\n  [[99, 7]],\n  [[0, 7]]],\n [[[34, 1]], [[70, 2]], [[168, 3], [74, 4]], [[74, 4]], [[99, 5]], [[0, 5]]],\n [[[72, 1]], [[55, 2]], [[0, 2]]],\n [[[41, 1]], [[0, 1]]]],\nlabels:\n[[0, 'EMPTY'],\n [4, null],\n [326, null],\n [288, null],\n [1, 'not'],\n [14, null],\n [15, null],\n [32, null],\n [7, null],\n [9, null],\n [26, null],\n [25, null],\n [1, null],\n [2, null],\n [3, null],\n [1, 'lambda'],\n [1, 'print'],\n [1, 'del'],\n [1, 'pass'],\n [1, 'break'],\n [1, 'continue'],\n [1, 'return'],\n [1, 'raise'],\n [1, 'yield'],\n [1, 'import'],\n [1, 'from'],\n [1, 'global'],\n [1, 'nonlocal'],\n [1, 'exec'],\n [1, 'assert'],\n [1, 'if'],\n [1, 'while'],\n [1, 'for'],\n [1, 'try'],\n [1, 'with'],\n [1, 'def'],\n [1, 'class'],\n [50, null],\n [274, null],\n [1, 'and'],\n [266, null],\n [279, null],\n [335, null],\n [8, null],\n [318, null],\n [10, null],\n [294, null],\n [27, null],\n [334, null],\n [278, null],\n [19, null],\n [262, null],\n [18, null],\n [260, null],\n [33, null],\n [258, null],\n [287, null],\n [12, null],\n [333, null],\n [280, null],\n [284, null],\n [22, null],\n [277, null],\n [16, null],\n [17, null],\n [24, null],\n [48, null],\n [275, null],\n [271, null],\n [1, 'else'],\n [268, null],\n [270, null],\n [1, 'as'],\n [339, null],\n [11, null],\n [263, null],\n [257, null],\n [1, 'or'],\n [259, null],\n [337, null],\n [36, null],\n [261, null],\n [34, null],\n [35, null],\n [276, null],\n [282, null],\n [308, null],\n [37, null],\n [38, null],\n [39, null],\n [40, null],\n [41, null],\n [42, null],\n [43, null],\n [44, null],\n [45, null],\n [46, null],\n [47, null],\n [49, null],\n [332, null],\n [20, null],\n [21, null],\n [28, null],\n [31, null],\n [30, null],\n [29, null],\n [1, 'in'],\n [1, 'is'],\n [311, null],\n [340, null],\n [304, null],\n [338, null],\n [341, null],\n [307, null],\n [286, null],\n [290, null],\n [292, null],\n [297, null],\n [281, null],\n [291, null],\n [264, null],\n [295, null],\n [23, null],\n [0, null],\n [1, 'except'],\n [329, null],\n [285, null],\n [289, null],\n [325, null],\n [324, null],\n [343, null],\n [306, null],\n [305, null],\n [321, null],\n [55, null],\n [310, null],\n [320, null],\n [309, null],\n [1, 'elif'],\n [272, null],\n [269, null],\n [296, null],\n [313, null],\n [312, null],\n [336, null],\n [317, null],\n [315, null],\n [316, null],\n [319, null],\n [328, null],\n [13, null],\n [265, null],\n [323, null],\n [293, null],\n [322, null],\n [303, null],\n [314, null],\n [267, null],\n [273, null],\n [301, null],\n [283, null],\n [327, null],\n [330, null],\n [5, null],\n [6, null],\n [331, null],\n [300, null],\n [1, 'finally'],\n [342, null]],\nkeywords:\n{'and': 39,\n 'as': 72,\n 'assert': 29,\n 'break': 19,\n 'class': 36,\n 'continue': 20,\n 'def': 35,\n 'del': 17,\n 'elif': 138,\n 'else': 69,\n 'except': 124,\n 'exec': 28,\n 'finally': 167,\n 'for': 32,\n 'from': 25,\n 'global': 26,\n 'if': 30,\n 'import': 24,\n 'in': 106,\n 'is': 107,\n 'lambda': 15,\n 'nonlocal': 27,\n 'not': 4,\n 'or': 77,\n 'pass': 18,\n 'print': 16,\n 'raise': 22,\n 'return': 21,\n 'try': 33,\n 'while': 31,\n 'with': 34,\n 'yield': 23},\ntokens:\n{0: 123,\n 1: 12,\n 2: 13,\n 3: 14,\n 4: 1,\n 5: 163,\n 6: 164,\n 7: 8,\n 8: 43,\n 9: 9,\n 10: 45,\n 11: 74,\n 12: 57,\n 13: 150,\n 14: 5,\n 15: 6,\n 16: 63,\n 17: 64,\n 18: 52,\n 19: 50,\n 20: 100,\n 21: 101,\n 22: 61,\n 23: 122,\n 24: 65,\n 25: 11,\n 26: 10,\n 27: 47,\n 28: 102,\n 29: 105,\n 30: 104,\n 31: 103,\n 32: 7,\n 33: 54,\n 34: 82,\n 35: 83,\n 36: 80,\n 37: 87,\n 38: 88,\n 39: 89,\n 40: 90,\n 41: 91,\n 42: 92,\n 43: 93,\n 44: 94,\n 45: 95,\n 46: 96,\n 47: 97,\n 48: 66,\n 49: 98,\n 50: 37,\n 55: 134},\nstart: 256\n};\n\n// Nothing more to see here.\n","/**\n * We're looking for something that is truthy, not just true.\n */\nexport function assert(condition: any, message?: string): void {\n    if (!condition) {\n        throw new Error(message);\n    }\n}\n\nexport function fail(message: string): void {\n    assert(false, message);\n}\n","/**\n * Null function used for default values of callbacks, etc.\n */\nexport function nullFunction() {/* Do nothing */ }\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar = base.abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * Note: This does not take the name of the function to override as an argument\n * because that would make it more difficult to obfuscate our JavaScript code.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\nexport function abstractMethod() {\n    throw Error('unimplemented abstract method');\n}\n\n// ==============================================================================\n// Language Enhancements\n// ==============================================================================\n\n/**\n * This is a \"fixed\" version of the typeof operator.  It differs from the typeof\n * operator in such a way that null returns 'null' and arrays return 'array'.\n * @param {*} value The value to get the type of.\n * @return {string} The name of the type.\n */\nexport function typeOf(value: any) {\n    const s = typeof value;\n    if (s === 'object') {\n        if (value) {\n            // Check these first, so we can avoid calling Object.prototype.toString if\n            // possible.\n            //\n            // IE improperly marshals tyepof across execution contexts, but a\n            // cross-context object will still return false for \"instanceof Object\".\n            if (value instanceof Array) {\n                return 'array';\n            } else if (value instanceof Object) {\n                return s;\n            }\n\n            // HACK: In order to use an Object prototype method on the arbitrary\n            //   value, the compiler requires the value be cast to type Object,\n            //   even though the ECMA spec explicitly allows it.\n            const className: string = Object.prototype.toString.call(\n          /** @type {Object} */(value));\n            // In Firefox 3.6, attempting to access iframe window objects' length\n            // property throws an NS_ERROR_FAILURE, so we need to special-case it\n            // here.\n            if (className === '[object Window]') {\n                return 'object';\n            }\n\n            // We cannot always use constructor == Array or instanceof Array because\n            // different frames have different Array objects. In IE6, if the iframe\n            // where the array was created is destroyed, the array loses its\n            // prototype. Then dereferencing val.splice here throws an exception, so\n            // we can't use base.isFunction. Calling typeof directly returns 'unknown'\n            // so that will work. In this case, this function will return false and\n            // most array functions will still work because the array is still\n            // array-like (supports length and []) even though it has lost its\n            // prototype.\n            // Mark Miller noticed that Object.prototype.toString\n            // allows access to the unforgeable [[Class]] property.\n            //  15.2.4.2 Object.prototype.toString ( )\n            //  When the toString method is called, the following steps are taken:\n            //      1. Get the [[Class]] property of this object.\n            //      2. Compute a string value by concatenating the three strings\n            //         \"[object \", Result(1), and \"]\".\n            //      3. Return Result(2).\n            // and this behavior survives the destruction of the execution context.\n            if ((className === '[object Array]' ||\n                // In IE all non value types are wrapped as objects across window\n                // boundaries (not iframe though) so we have to do object detection\n                // for this edge case.\n                typeof value.length === 'number' &&\n                typeof value.splice !== 'undefined' &&\n                typeof value.propertyIsEnumerable !== 'undefined' &&\n                !value.propertyIsEnumerable('splice')\n\n            )) {\n                return 'array';\n            }\n            // HACK: There is still an array case that fails.\n            //     function ArrayImpostor() {}\n            //     ArrayImpostor.prototype = [];\n            //     var impostor = new ArrayImpostor;\n            // this can be fixed by getting rid of the fast path\n            // (value instanceof Array) and solely relying on\n            // (value && Object.prototype.toString.vall(value) === '[object Array]')\n            // but that would require many more function calls and is not warranted\n            // unless closure code is receiving objects from untrusted sources.\n\n            // IE in cross-window calls does not correctly marshal the function type\n            // (it appears just as an object) so we cannot use just typeof val ==\n            // 'function'. However, if the object has a call property, it is a\n            // function.\n            if ((className === '[object Function]' ||\n                typeof value.call !== 'undefined' &&\n                typeof value.propertyIsEnumerable !== 'undefined' &&\n                !value.propertyIsEnumerable('call'))) {\n                return 'function';\n            }\n\n        } else {\n            return 'null';\n        }\n\n    } else if (s === 'function' && typeof value.call === 'undefined') {\n        // In Safari typeof nodeList returns 'function', and on Firefox typeof\n        // behaves similarly for HTML{Applet,Embed,Object}, Elements and RegExps. We\n        // would like to return object for those and we can detect an invalid\n        // function by making sure that the function object has a call method.\n        return 'object';\n    }\n    return s;\n}\n\n/**\n * Returns true if the specified value is not undefined.\n * WARNING: Do not use this to test if an object has a property. Use the in\n * operator instead.  Additionally, this function assumes that the global\n * undefined variable has not been redefined.\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\nexport function isDef(val: any) {\n    return val !== undefined;\n}\n\n\n/**\n * Returns true if the specified value is null.\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is null.\n */\nexport function isNull(val: any) {\n    return val === null;\n}\n\n\n/**\n * Returns true if the specified value is defined and not null.\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is defined and not null.\n */\nexport function isDefAndNotNull(val: any) {\n    // Note that undefined == null.\n    return val != null;\n}\n\n\n/**\n * Returns true if the specified value is an array.\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\nexport function isArray(val: any) {\n    return typeOf(val) === 'array';\n}\n\n\n/**\n * Returns true if the object looks like a Date. To qualify as Date-like the\n * value needs to be an object and have a getFullYear() function.\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is a like a Date.\n */\nexport function isDateLike(val: any) {\n    return isObject(val) && typeof val.getFullYear === 'function';\n}\n\n\n/**\n * Returns true if the specified value is a string.\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is a string.\n */\nexport function isString(val: any): val is string {\n    return typeof val === 'string';\n}\n\n\n/**\n * Returns true if the specified value is a boolean.\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is boolean.\n */\nexport function isBoolean(val: any) {\n    return typeof val === 'boolean';\n}\n\n\n/**\n * Returns true if the specified value is a number.\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is a number.\n */\nexport function isNumber(val: any) {\n    return typeof val === 'number';\n}\n\n\n/**\n * Returns true if the specified value is a function.\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\nexport function isFunction(val: any) {\n    return typeOf(val) === 'function';\n}\n\n/**\n * Returns true if the specified value is an object.  This includes arrays and\n * functions.\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\nexport function isObject(val: any) {\n    const type = typeof val;\n    return type === 'object' && val !== null || type === 'function';\n    // return Object(val) === val also works, but is slower, especially if val is\n    // not an object.\n}\n","import { assert } from './asserts';\nimport { isNumber, isString } from './base';\n\n/**\n *\n */\nexport class TokenError {\n    name: string;\n    message: string;\n    lineNumber: number;\n    columnNumber: number;\n    constructor(message: string, lineNumber: number, columnNumber: number) {\n        assert(isString(message), \"message must be a string\");\n        assert(isNumber(lineNumber), \"lineNumber must be a number\");\n        assert(isNumber(columnNumber), \"columnNumber must be a number\");\n\n        this.name = \"TokenError\";\n        this.message = message;\n        this.lineNumber = lineNumber;\n        this.columnNumber = columnNumber;\n    }\n}\n","import { assert } from '../common/asserts';\nimport { TokenError } from '../common/TokenError';\nimport { Tokens } from './Tokens';\n\n// Cache a few tokens for performance.\nconst T_COMMENT = Tokens.T_COMMENT;\nconst T_DEDENT = Tokens.T_DEDENT;\nconst T_ENDMARKER = Tokens.T_ENDMARKER;\nconst T_ERRORTOKEN = Tokens.T_ERRORTOKEN;\nconst T_INDENT = Tokens.T_INDENT;\nconst T_NAME = Tokens.T_NAME;\nconst T_NEWLINE = Tokens.T_NEWLINE;\nconst T_NL = Tokens.T_NL;\nconst T_NUMBER = Tokens.T_NUMBER;\nconst T_OP = Tokens.T_OP;\nconst T_STRING = Tokens.T_STRING;\n\n/* we have to use string and ctor to be able to build patterns up. + on /.../\n    * does something strange. */\n// const Whitespace = \"[ \\\\f\\\\t]*\";\nconst Comment_ = \"#[^\\\\r\\\\n]*\";\nconst MultiComment_ = \"'{3}[^]*'{3}\";\nconst Ident = \"[a-zA-Z_]\\\\w*\";\n\nconst Binnumber = '0[bB][01]*';\nconst Hexnumber = '0[xX][\\\\da-fA-F]*[lL]?';\nconst Octnumber = '0[oO]?[0-7]*[lL]?';\nconst Decnumber = '[1-9]\\\\d*[lL]?';\nconst Intnumber = group(Binnumber, Hexnumber, Octnumber, Decnumber);\n\nconst Exponent = \"[eE][-+]?\\\\d+\";\nconst Pointfloat = group(\"\\\\d+\\\\.\\\\d*\", \"\\\\.\\\\d+\") + maybe(Exponent);\nconst Expfloat = '\\\\d+' + Exponent;\nconst Floatnumber = group(Pointfloat, Expfloat);\nconst Imagnumber = group(\"\\\\d+[jJ]\", Floatnumber + \"[jJ]\");\nconst Number_ = group(Imagnumber, Floatnumber, Intnumber);\n\n// tail end of ' string\nconst Single = \"^[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*'\";\n// tail end of \" string\nconst Double_ = '^[^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*\"';\n// tail end of ''' string\nconst Single3 = \"[^'\\\\\\\\]*(?:(?:\\\\\\\\.|'(?!''))[^'\\\\\\\\]*)*'''\";\n// tail end of \"\"\" string\nconst Double3 = '[^\"\\\\\\\\]*(?:(?:\\\\\\\\.|\"(?!\"\"))[^\"\\\\\\\\]*)*\"\"\"';\nconst Triple = group(\"[ubUB]?[rR]?'''\", '[ubUB]?[rR]?\"\"\"');\n// const String_ = group(\"[uU]?[rR]?'[^\\\\n'\\\\\\\\]*(?:\\\\\\\\.[^\\\\n'\\\\\\\\]*)*'\", '[uU]?[rR]?\"[^\\\\n\"\\\\\\\\]*(?:\\\\\\\\.[^\\\\n\"\\\\\\\\]*)*\"');\n\n// Because of leftmost-then-longest match semantics, be sure to put the\n// longest operators first (e.g., if = came before ==, == would get\n// recognized as two instances of =).\nconst Operator = group(\"\\\\*\\\\*=?\", \">>=?\", \"<<=?\", \"<>\", \"!=\",\n    \"//=?\", \"->\",\n    \"[+\\\\-*/%&|^=<>]=?\",\n    \"~\");\n\nconst Bracket = '[\\\\][(){}]';\nconst Special = group('\\\\r?\\\\n', '[:;.,`@]');\nconst Funny = group(Operator, Bracket, Special);\n\nconst ContStr = group(\"[uUbB]?[rR]?'[^\\\\n'\\\\\\\\]*(?:\\\\\\\\.[^\\\\n'\\\\\\\\]*)*\" +\n    group(\"'\", '\\\\\\\\\\\\r?\\\\n'),\n    '[uUbB]?[rR]?\"[^\\\\n\"\\\\\\\\]*(?:\\\\\\\\.[^\\\\n\"\\\\\\\\]*)*' +\n    group('\"', '\\\\\\\\\\\\r?\\\\n'));\nconst PseudoExtras = group('\\\\\\\\\\\\r?\\\\n', Comment_, Triple, MultiComment_);\n// Need to prefix with \"^\" as we only want to match what's next\nconst PseudoToken = \"^\" + group(PseudoExtras, Number_, Funny, ContStr, Ident);\n\nconst pseudoprog = new RegExp(PseudoToken);\nconst single3prog = new RegExp(Single3, \"g\");\nconst double3prog = new RegExp(Double3, \"g\");\n\nconst endprogs: { [code: string]: RegExp | null } = {\n    \"'\": new RegExp(Single, \"g\"), '\"': new RegExp(Double_, \"g\"),\n    \"'''\": single3prog, '\"\"\"': double3prog,\n    \"r'''\": single3prog, 'r\"\"\"': double3prog,\n    \"u'''\": single3prog, 'u\"\"\"': double3prog,\n    \"b'''\": single3prog, 'b\"\"\"': double3prog,\n    \"ur'''\": single3prog, 'ur\"\"\"': double3prog,\n    \"br'''\": single3prog, 'br\"\"\"': double3prog,\n    \"R'''\": single3prog, 'R\"\"\"': double3prog,\n    \"U'''\": single3prog, 'U\"\"\"': double3prog,\n    \"B'''\": single3prog, 'B\"\"\"': double3prog,\n    \"uR'''\": single3prog, 'uR\"\"\"': double3prog,\n    \"Ur'''\": single3prog, 'Ur\"\"\"': double3prog,\n    \"UR'''\": single3prog, 'UR\"\"\"': double3prog,\n    \"bR'''\": single3prog, 'bR\"\"\"': double3prog,\n    \"Br'''\": single3prog, 'Br\"\"\"': double3prog,\n    \"BR'''\": single3prog, 'BR\"\"\"': double3prog,\n    'r': null, 'R': null,\n    'u': null, 'U': null,\n    'b': null, 'B': null\n};\n\nconst triple_quoted = {\n    \"'''\": true, '\"\"\"': true,\n    \"r'''\": true, 'r\"\"\"': true, \"R'''\": true, 'R\"\"\"': true,\n    \"u'''\": true, 'u\"\"\"': true, \"U'''\": true, 'U\"\"\"': true,\n    \"b'''\": true, 'b\"\"\"': true, \"B'''\": true, 'B\"\"\"': true,\n    \"ur'''\": true, 'ur\"\"\"': true, \"Ur'''\": true, 'Ur\"\"\"': true,\n    \"uR'''\": true, 'uR\"\"\"': true, \"UR'''\": true, 'UR\"\"\"': true,\n    \"br'''\": true, 'br\"\"\"': true, \"Br'''\": true, 'Br\"\"\"': true,\n    \"bR'''\": true, 'bR\"\"\"': true, \"BR'''\": true, 'BR\"\"\"': true\n};\n\nconst single_quoted = {\n    \"'\": true, '\"': true,\n    \"r'\": true, 'r\"': true, \"R'\": true, 'R\"': true,\n    \"u'\": true, 'u\"': true, \"U'\": true, 'U\"': true,\n    \"b'\": true, 'b\"': true, \"B'\": true, 'B\"': true,\n    \"ur'\": true, 'ur\"': true, \"Ur'\": true, 'Ur\"': true,\n    \"uR'\": true, 'uR\"': true, \"UR'\": true, 'UR\"': true,\n    \"br'\": true, 'br\"': true, \"Br'\": true, 'Br\"': true,\n    \"bR'\": true, 'bR\"': true, \"BR'\": true, 'BR\"': true\n};\n\nconst tabsize = 8;\n\nconst NAMECHARS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_';\nconst NUMCHARS = '0123456789';\n\n/**\n * For performance, let V8 know the size of an array.\n * The first element is the line number.\n * The line number is 1-based. This is intuitive because it maps to the way we think about line numbers.\n * The second element is the column.\n * The column is 0-based. This works well because it is the standard index for accessing strings.\n */\n/**\n * The index of the line in the LineColumn array.\n */\nconst LINE = 0;\n/**\n * The index of the column in the LineColumn array.\n */\nconst COLUMN = 1;\nexport type LineColumn = [number, number];\n\n/**\n * The function called by the tokenizer for each token in a line.\n * If the callback returns `true`, the tokenizer declares that it is 'done' with that line.\n */\nexport type TokenizerCallback = (token: Tokens, text: string, start: number[], end: number[], line: string) => boolean | undefined;\n\nexport type DoneOrFailed = 'done' | 'failed';\nexport const Done = 'done';\nexport const Failed = 'failed';\n\n/**\n * This is a port of tokenize.py by Ka-Ping Yee.\n *\n * each call to readline should return one line of input as a string, or\n * undefined if it's finished.\n *\n * callback is called for each token with 5 args:\n * 1. the token type\n * 2. the token string\n * 3. [ start_row, start_col ]\n * 4. [ end_row, end_col ]\n * 5. logical line where the token was found, including continuation lines\n *\n * callback can return true to abort.\n */\nexport class Tokenizer {\n    /**\n     * Cache of the beginning of a token.\n     * This will change by token so consumers must copy the values out.\n     */\n    private readonly begin: LineColumn = [-1, -1];\n    /**\n     * Cache of the end of a token.\n     * This will change by token so consumers must copy the values out.\n     */\n    private readonly end: LineColumn = [-1, -1];\n    /**\n     * The line number. This must be copied into the begin[LINE] and end[LINE] properties.\n     */\n    private lnum = 0;\n    private parenlev = 0;\n    private continued: boolean;\n    private contstr: string;\n    private needcont: boolean;\n    private contline: string | undefined;\n    private readonly indents: number[];\n    private endprog: RegExp;\n    private readonly strstart: LineColumn = [-1, -1];\n    /**\n     * Probably used for REPL support.\n     */\n    interactive: boolean;\n    private readonly doneFunc: () => DoneOrFailed;\n\n    /**\n     *\n     */\n    constructor(interactive: boolean, private readonly callback: TokenizerCallback) {\n        this.callback = callback;\n        this.continued = false;\n        this.contstr = '';\n        this.needcont = false;\n        this.contline = undefined;\n        this.indents = [0];\n        this.endprog = /.*/;\n        this.interactive = interactive;\n        this.doneFunc = function doneOrFailed(): DoneOrFailed {\n            const begin = this.begin;\n            const end = this.end;\n            begin[LINE] = end[LINE] = this.lnum;\n            begin[COLUMN] = end[COLUMN] = 0;\n            const N = this.indents.length;\n            for (let i = 1; i < N; ++i) {\n                if (callback(T_DEDENT, '', begin, end, '')) {\n                    return Done;\n                }\n            }\n            if (callback(T_ENDMARKER, '', begin, end, '')) {\n                return Done;\n            }\n            return Failed;\n        };\n    }\n\n    /**\n     * @param line\n     * @return 'done' or 'failed' or true?\n     */\n    generateTokens(line: string): boolean | DoneOrFailed/**/ {\n        let endmatch: boolean;\n        let column: number;\n        let endIndex: number;\n\n        if (!line) {\n            line = '';\n        }\n\n        this.lnum += 1;\n        let pos = 0;\n        let max = line.length;\n\n        /**\n         * Local variable for performance and brevity.\n         */\n        const callback = this.callback;\n        const begin = this.begin;\n        begin[LINE] = this.lnum;\n        const end = this.end;\n        end[LINE] = this.lnum;\n\n        if (this.contstr.length > 0) {\n            if (!line) {\n                throw new TokenError(\"EOF in multi-line string\", this.strstart[LINE], this.strstart[COLUMN]);\n            }\n            this.endprog.lastIndex = 0;\n            endmatch = this.endprog.test(line);\n            if (endmatch) {\n                pos = endIndex = this.endprog.lastIndex;\n                end[COLUMN] = endIndex;\n                if (callback(T_STRING, this.contstr + line.substring(0, endIndex), this.strstart, end, this.contline + line)) {\n                    return Done;\n                }\n                this.contstr = '';\n                this.needcont = false;\n                this.contline = undefined;\n            }\n            else if (this.needcont && line.substring(line.length - 2) !== \"\\\\\\n\" && line.substring(line.length - 3) !== \"\\\\\\r\\n\") {\n                // Either contline is a string or the callback must allow undefined.\n                assert(typeof this.contline === 'string');\n                end[COLUMN] = line.length;\n                if (callback(T_ERRORTOKEN, this.contstr + line, this.strstart, end, this.contline as string)) {\n                    return Done;\n                }\n                this.contstr = '';\n                this.contline = undefined;\n                return false;\n            }\n            else {\n                this.contstr += line;\n                this.contline = this.contline + line;\n                return false;\n            }\n        }\n        else if (this.parenlev === 0 && !this.continued) {\n            if (!line) return this.doneFunc();\n            column = 0;\n            while (pos < max) {\n                const ch = line.charAt(pos);\n                if (ch === ' ') {\n                    column += 1;\n                }\n                else if (ch === '\\t') {\n                    column = (column / tabsize + 1) * tabsize;\n                }\n                else if (ch === '\\f') {\n                    column = 0;\n                }\n                else {\n                    break;\n                }\n                pos = pos + 1;\n            }\n            if (pos === max) return this.doneFunc();\n\n            if (\"#\\r\\n\".indexOf(line.charAt(pos)) !== -1) {\n                if (line.charAt(pos) === '#') {\n                    const comment_token = rstrip(line.substring(pos), '\\r\\n');\n                    const nl_pos = pos + comment_token.length;\n                    begin[COLUMN] = pos;\n                    end[COLUMN] = nl_pos;\n                    if (callback(T_COMMENT, comment_token, begin, end, line)) {\n                        return Done;\n                    }\n                    begin[COLUMN] = nl_pos;\n                    end[COLUMN] = line.length;\n                    if (callback(T_NL, line.substring(nl_pos), begin, end, line)) {\n                        return Done;\n                    }\n                    return false;\n                }\n                else {\n                    begin[COLUMN] = pos;\n                    end[COLUMN] = line.length;\n                    if (callback(T_NL, line.substring(pos), begin, end, line)) {\n                        return Done;\n                    }\n                    if (!this.interactive) return false;\n                }\n            }\n\n            if (\"'''\".indexOf(line.charAt(pos)) !== -1) {\n                if (line.charAt(pos) === \"'\") {\n                    const comment_token = line.substring(pos);\n                    const nl_pos = pos + comment_token.length;\n                    begin[COLUMN] = pos;\n                    end[COLUMN] = nl_pos;\n                    if (callback(T_COMMENT, comment_token, begin, end, line)) {\n                        return Done;\n                    }\n                    begin[COLUMN] = nl_pos;\n                    end[COLUMN] = line.length;\n                    if (callback(T_NL, line.substring(nl_pos), begin, end, line)) {\n                        return Done;\n                    }\n                    return false;\n                }\n                else {\n                    begin[COLUMN] = pos;\n                    end[COLUMN] = line.length;\n                    if (callback(T_NL, line.substring(pos), begin, end, line)) {\n                        return Done;\n                    }\n                    if (!this.interactive) return false;\n                }\n            }\n\n            if (column > this.indents[this.indents.length - 1]) {\n                this.indents.push(column);\n                begin[COLUMN] = 0;\n                end[COLUMN] = pos;\n                if (callback(T_INDENT, line.substring(0, pos), begin, end, line)) {\n                    return Done;\n                }\n            }\n            while (column < this.indents[this.indents.length - 1]) {\n                if (!contains(this.indents, column)) {\n                    begin[COLUMN] = 0;\n                    end[COLUMN] = pos;\n                    throw indentationError(\"unindent does not match any outer indentation level\", begin, end, line);\n                }\n                this.indents.splice(this.indents.length - 1, 1);\n                begin[COLUMN] = pos;\n                end[COLUMN] = pos;\n                if (callback(T_DEDENT, '', begin, end, line)) {\n                    return Done;\n                }\n            }\n        }\n        else {\n            if (!line) {\n                throw new TokenError(\"EOF in multi-line statement\", this.lnum, 0);\n            }\n            this.continued = false;\n        }\n\n        while (pos < max) {\n            // js regexes don't return any info about matches, other than the\n            // content. we'd like to put a \\w+ before pseudomatch, but then we\n            // can't get any data\n            let capos = line.charAt(pos);\n            while (capos === ' ' || capos === '\\f' || capos === '\\t') {\n                pos += 1;\n                capos = line.charAt(pos);\n            }\n            pseudoprog.lastIndex = 0;\n            const pseudomatch = pseudoprog.exec(line.substring(pos));\n            if (pseudomatch) {\n                const startIndex = pos;\n                endIndex = startIndex + pseudomatch[1].length;\n                begin[COLUMN] = startIndex;\n                end[COLUMN] = endIndex;\n                pos = endIndex;\n                const token = line.substring(startIndex, endIndex);\n                const initial = line.charAt(startIndex);\n                if (NUMCHARS.indexOf(initial) !== -1 || (initial === '.' && token !== '.')) {\n                    if (callback(T_NUMBER, token, begin, end, line)) {\n                        return Done;\n                    }\n                }\n                else if (initial === '\\r' || initial === '\\n') {\n                    let newl = T_NEWLINE;\n                    if (this.parenlev > 0) newl = T_NL;\n                    if (callback(newl, token, begin, end, line)) {\n                        return Done;\n                    }\n                }\n                else if (initial === '#' || initial === \"'''\") {\n                    if (callback(T_COMMENT, token, begin, end, line)) {\n                        return Done;\n                    }\n                }\n                else if (triple_quoted.hasOwnProperty(token)) {\n                    this.endprog = endprogs[token] as RegExp;\n                    this.endprog.lastIndex = 0;\n                    endmatch = this.endprog.test(line.substring(pos));\n                    if (endmatch) {\n                        pos = this.endprog.lastIndex + pos;\n                        const token = line.substring(startIndex, pos);\n                        end[COLUMN] = pos;\n                        if (callback(T_STRING, token, begin, end, line)) {\n                            return Done;\n                        }\n                    }\n                    else {\n                        this.strstart[LINE] = this.lnum;\n                        this.strstart[COLUMN] = startIndex;\n                        this.contstr = line.substring(startIndex);\n                        this.contline = line;\n                        return false;\n                    }\n                }\n                else if (single_quoted.hasOwnProperty(initial) ||\n                    single_quoted.hasOwnProperty(token.substring(0, 2)) ||\n                    single_quoted.hasOwnProperty(token.substring(0, 3))) {\n                    if (token[token.length - 1] === '\\n') {\n                        this.endprog = endprogs[initial] as RegExp || endprogs[token[1]] || endprogs[token[2]];\n                        assert(this.endprog instanceof RegExp);\n                        this.contstr = line.substring(startIndex);\n                        this.needcont = true;\n                        this.contline = line;\n                        return false;\n                    }\n                    else {\n                        if (callback(T_STRING, token, begin, end, line)) {\n                            return Done;\n                        }\n                    }\n                }\n                else if (NAMECHARS.indexOf(initial) !== -1) {\n                    if (callback(T_NAME, token, begin, end, line)) {\n                        return Done;\n                    }\n                }\n                else if (initial === '\\\\') {\n                    end[COLUMN] = pos;\n                    if (callback(T_NL, token, begin, end, line)) {\n                        return Done;\n                    }\n                    this.continued = true;\n                }\n                else {\n                    if ('([{'.indexOf(initial) !== -1) {\n                        this.parenlev += 1;\n                    }\n                    else if (')]}'.indexOf(initial) !== -1) {\n                        this.parenlev -= 1;\n                    }\n                    if (callback(T_OP, token, begin, end, line)) {\n                        return Done;\n                    }\n                }\n            }\n            else {\n                begin[COLUMN] = pos;\n                end[COLUMN] = pos + 1;\n                if (callback(T_ERRORTOKEN, line.charAt(pos), begin, end, line)) {\n                    return Done;\n                }\n                pos += 1;\n            }\n        }\n        return false;\n    }\n}\n\nfunction group(x: string, arg1?: string, arg2?: string, arg3?: string, arg4?: string, arg5?: string, arg6?: string, arg7?: string, arg8?: string, arg9?: string) {\n    const args = Array.prototype.slice.call(arguments);\n    return '(' + args.join('|') + ')';\n}\n\nfunction maybe(x: string) { return group.apply(null, arguments) + \"?\"; }\n\nfunction contains<T>(a: T[], obj: T): boolean {\n    let i = a.length;\n    while (i--) {\n        if (a[i] === obj) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction rstrip(input: string, what: string): string {\n    let i: number;\n    for (i = input.length; i > 0; --i) {\n        if (what.indexOf(input.charAt(i - 1)) === -1) break;\n    }\n    return input.substring(0, i);\n}\n\n/**\n * @param message\n * @param begin\n * @param end\n * @param {string|undefined} text\n */\nfunction indentationError(message: string, begin: number[], end: number[], text: string) {\n\n    assert(Array.isArray(begin), \"begin must be an Array\");\n    assert(Array.isArray(end), \"end must be an Array\");\n\n    const e = new SyntaxError(message/*, fileName*/);\n    e.name = \"IndentationError\";\n    if (begin) {\n        e['lineNumber'] = begin[LINE];\n        e['columnNumber'] = begin[COLUMN];\n    }\n    return e;\n}\n","import { Tokens } from './Tokens';\n\n/**\n * Decodes of the tokens.\n * A mapping from the token number (symbol) to its human-readable name.\n */\nexport const tokenNames: { [code: number]: string } = {};\n\ntokenNames[Tokens.T_AMPER] = 'T_AMPER';\ntokenNames[Tokens.T_AMPEREQUAL] = 'T_AMPEREQUAL';\ntokenNames[Tokens.T_AT] = 'T_AT';\ntokenNames[Tokens.T_BACKQUOTE] = 'T_BACKQUOTE';\ntokenNames[Tokens.T_CIRCUMFLEX] = 'T_CIRCUMFLEX';\ntokenNames[Tokens.T_CIRCUMFLEXEQUAL] = 'T_CIRCUMFLEXEQUAL';\ntokenNames[Tokens.T_COLON] = 'T_COLON';\ntokenNames[Tokens.T_COMMA] = 'T_COMMA';\ntokenNames[Tokens.T_COMMENT] = 'T_COMMENT';\ntokenNames[Tokens.T_DEDENT] = 'T_DEDENT';\ntokenNames[Tokens.T_DOT] = 'T_DOT';\ntokenNames[Tokens.T_DOUBLESLASH] = 'T_DOUBLESLASH';\ntokenNames[Tokens.T_DOUBLESLASHEQUAL] = 'T_DOUBLESLASHEQUAL';\ntokenNames[Tokens.T_DOUBLESTAR] = 'T_DOUBLESTAR';\ntokenNames[Tokens.T_DOUBLESTAREQUAL] = 'T_DOUBLESTAREQUAL';\ntokenNames[Tokens.T_ENDMARKER] = 'T_ENDMARKER';\ntokenNames[Tokens.T_EQEQUAL] = 'T_EQEQUAL';\ntokenNames[Tokens.T_EQUAL] = 'T_EQUAL';\ntokenNames[Tokens.T_ERRORTOKEN] = 'T_ERRORTOKEN';\ntokenNames[Tokens.T_GREATER] = 'T_GREATER';\ntokenNames[Tokens.T_GREATEREQUAL] = 'T_GREATEREQUAL';\ntokenNames[Tokens.T_INDENT] = 'T_INDENT';\ntokenNames[Tokens.T_LBRACE] = 'T_LBRACE';\ntokenNames[Tokens.T_LEFTSHIFT] = 'T_LEFTSHIFT';\ntokenNames[Tokens.T_LEFTSHIFTEQUAL] = 'T_LEFTSHIFTEQUAL';\ntokenNames[Tokens.T_LESS] = 'T_LESS';\ntokenNames[Tokens.T_LESSEQUAL] = 'T_LESSEQUAL';\ntokenNames[Tokens.T_LPAR] = 'T_LPAR';\ntokenNames[Tokens.T_LSQB] = 'T_LSQB';\ntokenNames[Tokens.T_MINEQUAL] = 'T_MINEQUAL';\ntokenNames[Tokens.T_MINUS] = 'T_MINUS';\ntokenNames[Tokens.T_N_TOKENS] = 'T_N_TOKENS';\ntokenNames[Tokens.T_NAME] = 'T_NAME';\ntokenNames[Tokens.T_NEWLINE] = 'T_NEWLINE';\ntokenNames[Tokens.T_NL] = 'T_NL';\ntokenNames[Tokens.T_NOTEQUAL] = 'T_NOTEQUAL';\ntokenNames[Tokens.T_NT_OFFSET] = 'T_NT_OFFSET';\ntokenNames[Tokens.T_NUMBER] = 'T_NUMBER';\ntokenNames[Tokens.T_OP] = 'T_OP';\ntokenNames[Tokens.T_PERCENT] = 'T_PERCENT';\ntokenNames[Tokens.T_PERCENTEQUAL] = 'T_PERCENTEQUAL';\ntokenNames[Tokens.T_PLUS] = 'T_PLUS';\ntokenNames[Tokens.T_PLUSEQUAL] = 'T_PLUSEQUAL';\ntokenNames[Tokens.T_RARROW] = 'T_RARROW';\ntokenNames[Tokens.T_RBRACE] = 'T_RBRACE';\ntokenNames[Tokens.T_RIGHTSHIFT] = 'T_RIGHTSHIFT';\ntokenNames[Tokens.T_RPAR] = 'T_RPAR';\ntokenNames[Tokens.T_RSQB] = 'T_RSQB';\ntokenNames[Tokens.T_SEMI] = 'T_SEMI';\ntokenNames[Tokens.T_SLASH] = 'T_SLASH';\ntokenNames[Tokens.T_SLASHEQUAL] = 'T_SLASHEQUAL';\ntokenNames[Tokens.T_STAR] = 'T_STAR';\ntokenNames[Tokens.T_STAREQUAL] = 'T_STAREQUAL';\ntokenNames[Tokens.T_STRING] = 'T_STRING';\ntokenNames[Tokens.T_TILDE] = 'T_TILDE';\ntokenNames[Tokens.T_VBAR] = 'T_VBAR';\ntokenNames[Tokens.T_VBAREQUAL] = 'T_VBAREQUAL';\n","import { ParseTables } from './tables';\nimport { Tokens as TOK } from './Tokens';\nimport { tokenNames } from './tokenNames';\n\nexport function grammarName(type: TOK | number): string {\n    const tokenName = tokenNames[type];\n    if (tokenName) {\n        return tokenName;\n    }\n    else {\n        return ParseTables.number2symbol[type];\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import { assert } from './asserts';\nimport { isDef, isNumber, isString } from './base';\nimport { Range } from './Range';\n/**\n * @param message\n * @param lineNumber\n */\nexport function syntaxError(message: string, range?: Range) {\n    assert(isString(message), \"message must be a string\");\n    if (isDef(range)) {\n        assert(isNumber(range.begin.line), \"lineNumber must be a number\");\n    }\n    const e = new SyntaxError(message/*, fileName*/);\n    if (range) {\n        assert(isNumber(range.begin.line), \"lineNumber must be a number\");\n        if (typeof range.begin.line === 'number') {\n            e['lineNumber'] = range.begin.line;\n        }\n    }\n\n    return e;\n}\nexport type LineColumn = [number, number];\n\nexport interface Position {\n    row: number;\n    column: number;\n}\n\nexport class ParseError extends SyntaxError {\n    constructor(message: string) {\n        super(message);\n        this.name = 'ParseError';\n    }\n    begin?: Position;\n    end?: Position;\n}\n\n/**\n * @param message\n * @param begin\n * @param end\n */\nexport function parseError(message: string, begin?: LineColumn, end?: LineColumn): ParseError {\n    const e = new ParseError(message);\n    // Copying from begin and end is important because they change for each token.\n    // Notice that the Line is 1-based, but that row is 0-based.\n    // Both column and Column are 0-based.\n    if (Array.isArray(begin)) {\n        e.begin = { row: begin[0] - 1, column: begin[1] };\n    }\n    if (Array.isArray(end)) {\n        e.end = { row: end[0] - 1, column: end[1] };\n    }\n    return e;\n}\n","export class Position {\n    /**\n     * 1-based line number.\n     */\n    public readonly line: number;\n    /**\n     * 0-based column index.\n     */\n    public readonly column: number;\n    /**\n     *\n     */\n    constructor(line: number, column: number) {\n        this.line = line;\n        this.column = column;\n    }\n    toString(): string {\n        return `[${this.line}, ${this.column}]`;\n    }\n}\n\nexport function positionComparator(a: Position, b: Position): -1 | 1 | 0 {\n    if (a.line < b.line) {\n        return -1;\n    }\n    else if (a.line > b.line) {\n        return 1;\n    }\n    else {\n        if (a.column < b.column) {\n            return -1;\n        }\n        else if (a.column > b.column) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\n","import { assert } from './asserts';\nimport { Position } from './Position';\n\nexport class Range {\n    /**\n     * begin is always defined.\n     */\n    public readonly begin: Position;\n    /**\n     * end is always defined.\n     */\n    public readonly end: Position;\n    /**\n     *\n     */\n    constructor(begin: Position, end: Position) {\n        assert(begin, \"begin must be defined\");\n        assert(end, \"end must be defined\");\n        this.begin = begin;\n        this.end = end;\n    }\n    toString(): string {\n        return `${this.begin} to ${this.end}`;\n    }\n}\n","import { assert } from './asserts';\n\nexport interface Tree {\n    type: number;\n    children: Tree[] | null | undefined;\n}\n\n/**\n * Returns the number of children in the specified node.\n * Returns n.children.length\n */\nexport function NCH<T extends Tree>(n: T): number {\n    assert(n !== undefined);\n    if (Array.isArray(n.children)) {\n        return n.children.length;\n    }\n    else {\n        return 0;\n    }\n}\n\nexport function CHILD<T extends Tree>(n: T, i: number): T {\n    assert(i !== undefined && i >= 0);\n    return CHILDREN(n)[i];\n}\n\nexport function FIND<T extends Tree>(n: T, type: number): number {\n    assert(type !== undefined);\n    const children = CHILDREN(n);\n    const N = children.length;\n    for (let i = 0; i < N; i++) {\n        const child = children[i];\n        if (child.type === type) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nexport function CHILDREN<T extends Tree>(n: T): T[] {\n    assert(n !== undefined);\n    if (n.children) {\n        return n.children as T[];\n    }\n    else {\n        throw new Error(\"node does not have any children\");\n    }\n}\n\nexport function IDXLAST<T>(xs: ArrayLike<T>): number {\n    return xs.length - 1;\n}\n\n/**\n * Returns the terminal nodes of the tree.\n */\nexport function TERMS<T extends Tree>(n: T): T[] {\n    const childLength = NCH(n);\n    if (childLength === 0) {\n        return [n];\n    }\n    else {\n        const terminals: T[] = [];\n        for (const child of CHILDREN(n)) {\n            for (const t of TERMS(child)) {\n                terminals.push(t);\n            }\n        }\n        return terminals;\n    }\n}\n","import { IDXLAST } from '../common/tree';\n\n/**\n * Prepare the source text into lines to feed to the `generateTokens` method of the tokenizer.\n */\nexport function splitSourceTextIntoLines(sourceText: string): string[] {\n    const lines: string[] = [];\n    // Why do we normalize the sourceText in this manner?\n    if (sourceText.substr(IDXLAST(sourceText), 1) !== \"\\n\") {\n        sourceText += \"\\n\";\n    }\n    // Splitting this way will create a final line that is the zero-length string.\n    const pieces = sourceText.split(\"\\n\");\n    const N = pieces.length;\n    for (let i = 0; i < N; ++i) {\n        // We're adding back newline characters for all but the last line.\n        const line = pieces[i] + ((i === IDXLAST(pieces)) ? \"\" : \"\\n\");\n        lines.push(line);\n    }\n    return lines;\n}\n","import { BeginTokens, Dfa, DfaAndBeginTokens, IDX_DFABT_DFA, IDX_DFABT_BEGIN_TOKENS } from './tables';\nimport { Arc, ARC_SYMBOL_LABEL, ARC_TO_STATE, Grammar, OpMap, ParseTables } from './tables';\nimport { assert } from '../common/asserts';\nimport { Tokenizer } from './Tokenizer';\nimport { Tokens } from './Tokens';\nimport { tokenNames } from './tokenNames';\nimport { grammarName } from './grammarName';\nimport { parseError } from '../common/syntaxError';\nimport { Position } from '../common/Position';\nimport { Range } from '../common/Range';\nimport { splitSourceTextIntoLines } from './splitSourceTextIntoLines';\n\n// Dereference certain tokens for performance.\nconst T_COMMENT = Tokens.T_COMMENT;\nconst T_ENDMARKER = Tokens.T_ENDMARKER;\nconst T_NAME = Tokens.T_NAME;\nconst T_NL = Tokens.T_NL;\nconst T_NT_OFFSET = Tokens.T_NT_OFFSET;\nconst T_OP = Tokens.T_OP;\n\n/**\n * The first element is the line number.\n * The line number is 1-based.\n * The second element is the column.\n * The column is 0-based.\n */\nexport type LineColumn = [number, number];\n\n/**\n * The parse tree (not the abstract syntax tree).\n */\nexport interface PyNode {\n    /**\n     * For terminals, the type is defined in the Tokens enumeration.\n     * For non-terminals, the type is defined in the generated ParseTables.\n     */\n    type: Tokens;\n    value: string | null;\n    range: Range | null;\n    used_names?: { [name: string]: boolean };\n    children: PyNode[] | null;\n}\n\ninterface StackElement {\n    dfa: Dfa;\n    beginTokens: BeginTokens;\n    stateId: number;\n    node: PyNode;\n}\n\n// low level parser to a concrete syntax tree, derived from cpython's lib2to3\n\n// TODO: The parser does not report whitespace nodes.\n// It would be nice if there were an ignoreWhitespace option.\nclass Parser {\n    private readonly grammar: Grammar;\n    private readonly stack: StackElement[] = [];\n    private readonly used_names: { [name: string]: boolean } = {};\n    rootNode: PyNode;\n    /**\n     *\n     */\n    constructor(grammar: Grammar) {\n        this.grammar = grammar;\n    }\n\n    setup(start?: Tokens): void {\n        start = start || this.grammar.start;\n\n        const newnode: PyNode = {\n            type: start,\n            range: null,\n            value: null,\n            children: []\n        };\n        const stackentry: StackElement = {\n            dfa: this.grammar.dfas[start][IDX_DFABT_DFA],\n            beginTokens: this.grammar.dfas[start][IDX_DFABT_BEGIN_TOKENS],\n            stateId: 0,\n            node: newnode\n        };\n        this.stack.push(stackentry);\n    }\n\n    /**\n     * Add a token; return true if we're done.\n     * @param type\n     * @param value\n     * @param context [start, end, line]\n     */\n    addtoken(type: Tokens, value: string, begin: LineColumn, end: LineColumn, line: string): boolean {\n        /**\n         * The symbol for the token being added.\n         */\n        const tokenSymbol = this.classify(type, value, begin, end, line);\n        /**\n         * Local variable for performance.\n         */\n        const stack = this.stack;\n        // More local variables for performance.\n        const g = this.grammar;\n        const dfas = g.dfas;\n        const labels = g.labels;\n\n        // This code is very performance sensitive.\n        OUTERWHILE:\n        while (true) {\n            let stackTop = stack[stack.length - 1];\n            let dfa: Dfa = stackTop.dfa;\n            // This is not being used. Why?\n            // let first = tp.dfa[DFA_SECOND];\n            const arcs = dfa[stackTop.stateId];\n\n            // look for a to-state with this label\n            for (const arc of arcs) {\n                const arcSymbol = arc[ARC_SYMBOL_LABEL];\n                const newState = arc[ARC_TO_STATE];\n                const t = labels[arcSymbol][0];\n                // const v = labels[arcSymbol][1];\n                // console.lg(`t => ${t}, v => ${v}`);\n                if (tokenSymbol === arcSymbol) {\n                    this.shiftToken(type, value, newState, begin, end, line);\n                    // pop while we are in an accept-only state\n                    let stateId = newState;\n                    /**\n                     * Temporary variable to save a few CPU cycles.\n                     */\n                    let statesOfState: [number, number][] = dfa[stateId];\n                    while (statesOfState.length === 1 && statesOfState[0][ARC_SYMBOL_LABEL] === 0 && statesOfState[0][ARC_TO_STATE] === stateId) {\n                        this.popNonTerminal();\n                        // Much of the time we won't be done so cache the stack length.\n                        const stackLength = stack.length;\n                        if (stackLength === 0) {\n                            // done!\n                            return true;\n                        }\n                        else {\n                            stackTop = stack[stackLength - 1];\n                            stateId = stackTop.stateId;\n                            dfa = stackTop.dfa;\n                            // first = stackTop.beginTokens;\n                            // first = top.dfa[1];\n                            statesOfState = dfa[stateId];\n                        }\n                    }\n                    // done with this token\n                    return false;\n                }\n                else if (isNonTerminal(t)) {\n                    const dfabt: DfaAndBeginTokens = dfas[t];\n                    const dfa: Dfa = dfabt[IDX_DFABT_DFA];\n                    const beginTokens: BeginTokens = dfabt[IDX_DFABT_BEGIN_TOKENS];\n                    if (beginTokens.hasOwnProperty(tokenSymbol)) {\n                        this.pushNonTerminal(t, dfa, beginTokens, newState, begin, end, line);\n                        continue OUTERWHILE;\n                    }\n                }\n            }\n\n            // We've exhaused all the arcs for the for the state.\n            if (existsTransition(arcs, [T_ENDMARKER, stackTop.stateId])) {\n                // an accepting state, pop it and try something else\n                this.popNonTerminal();\n                if (stack.length === 0) {\n                    throw parseError(\"too much input\");\n                }\n            }\n            else {\n                const found = grammarName(stackTop.stateId);\n                // FIXME:\n                throw parseError(`Unexpected ${found} at ${JSON.stringify([begin[0], begin[1] + 1])}`, begin, end);\n            }\n        }\n    }\n\n    /**\n     * Turn a token into a symbol (something that labels an arc in the DFA).\n     * The context is only used for error reporting.\n     * @param type\n     * @param value\n     * @param context [begin, end, line]\n     */\n    private classify(type: Tokens, value: string, begin: LineColumn, end: LineColumn, line: string): number {\n        // Assertion commented out for efficiency.\n        assertTerminal(type);\n        const g = this.grammar;\n        if (type === T_NAME) {\n            this.used_names[value] = true;\n            const keywordToSymbol = g.keywords;\n            if (keywordToSymbol.hasOwnProperty(value)) {\n                const ilabel = keywordToSymbol[value];\n                // assert(typeof ilabel === 'number', \"How can it not be?\");\n                return ilabel;\n            }\n        }\n        const tokenToSymbol = g.tokens;\n        let ilabel: number | undefined;\n        if (tokenToSymbol.hasOwnProperty(type)) {\n            ilabel = tokenToSymbol[type];\n        }\n        if (!ilabel) {\n            // console.lg(`ilabel = ${ilabel}, type = ${type}, value = ${value}, begin = ${JSON.stringify(begin)}, end = ${JSON.stringify(end)}`);\n            throw parseError(\"bad token\", begin, end);\n        }\n        return ilabel;\n    }\n\n    /**\n     * Shifting a token (terminal).\n     * 1. A new node is created representing the token.\n     * 2. The new node is added as a child to the topmost node on the stack.\n     * 3. The state of the topmost element on the stack is updated to be the new state.\n     */\n    private shiftToken(type: Tokens, value: string, newState: number, begin: LineColumn, end: LineColumn, line: string): void {\n        // assertTerminal(type);\n        // Local variable for efficiency.\n        const stack = this.stack;\n        /**\n         * The topmost element in the stack is affected by shifting a token.\n         */\n        const stackTop = stack[stack.length - 1];\n\n        const node = stackTop.node;\n        const newnode: PyNode = {\n            type: type,\n            value: value,\n            range: new Range(new Position(begin[0], begin[1]), new Position(end[0], end[1])),\n            children: null\n        };\n        if (newnode && node.children) {\n            node.children.push(newnode);\n        }\n\n        stackTop.stateId = newState;\n    }\n\n    /**\n     * Push a non-terminal symbol onto the stack as a new node.\n     * 1. Update the state of the topmost element on the stack to be newState.\n     * 2. Push a new element onto the stack corresponding to the symbol.\n     * The new stack elements uses the newDfa and has state 0.\n     */\n    private pushNonTerminal(type: number, dfa: Dfa, beginTokens: BeginTokens, newState: number, begin: LineColumn, end: LineColumn, line: string): void {\n        // Based on how this function is called, there is really no need for this assertion.\n        // Retain it for now while it is not the performance bottleneck.\n        // assertNonTerminal(type);\n        // Local variable for efficiency.\n        const stack = this.stack;\n        const stackTop = stack[stack.length - 1];\n\n        stackTop.stateId = newState;\n\n        const beginPos = begin ? new Position(begin[0], begin[1]) : null;\n        const endPos = end ? new Position(end[0], end[1]) : null;\n        const newnode: PyNode = { type, value: null, range: new Range(beginPos, endPos), children: [] };\n\n        // TODO: Is there a symbolic constant for the zero state?\n        stack.push({ dfa, beginTokens, stateId: 0, node: newnode });\n    }\n\n    /**\n     * Pop a nonterminal.\n     * Popping an element from the stack causes the node to be added to the children of the new top element.\n     * The exception is when the stack becomes empty, in which case the node becomes the root node.\n     */\n    private popNonTerminal(): void {\n        // Local variable for efficiency.\n        const stack = this.stack;\n        const poppedElement = stack.pop();\n        if (poppedElement) {\n            const poppedNode = poppedElement.node;\n            // Remove this assertion only when it becomes a performance issue.\n            // assertNonTerminal(poppedNode.type);\n            if (poppedNode) {\n                /**\n                 * The length of the stack following the pop operation.\n                 */\n                const N = stack.length;\n                if (N !== 0) {\n                    const node = stack[N - 1].node;\n                    const children = node.children;\n                    if (children) {\n                        children.push(poppedNode);\n                    }\n                }\n                else {\n                    // If the length of the stack following the pop is zero then the popped element becomes the root node.\n                    this.rootNode = poppedNode;\n                    poppedNode.used_names = this.used_names;\n                }\n            }\n        }\n    }\n}\n\n\n\n/**\n * FIXME: This is O(N). Can we do better?\n * Finds the specified\n * @param a An array of arrays where each element is an array of two integers.\n * @param obj An array containing two integers.\n */\nfunction existsTransition(arcs: Arc[], obj: Arc): boolean {\n    let i = arcs.length;\n    while (i--) {\n        const arc = arcs[i];\n        if (arc[ARC_SYMBOL_LABEL] === obj[ARC_SYMBOL_LABEL] && arc[ARC_TO_STATE] === obj[ARC_TO_STATE]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * parser for interactive input. returns a function that should be called with\n * lines of input as they are entered. the function will return false\n * until the input is complete, when it will return the rootnode of the parse.\n *\n * @param style root of parse tree (optional)\n */\nfunction makeParser(sourceKind: SourceKind): (line: string) => PyNode | boolean {\n    if (sourceKind === undefined) sourceKind = SourceKind.File;\n\n    // FIXME: Would be nice to get this typing locked down. Why does Grammar not match ParseTables?\n    const p = new Parser(ParseTables as any);\n    // TODO: Can we do this over the symbolic constants?\n    switch (sourceKind) {\n        case SourceKind.File: {\n            p.setup(ParseTables.sym.file_input);\n            break;\n        }\n        case SourceKind.Eval: {\n            p.setup(ParseTables.sym.eval_input);\n            break;\n        }\n        case SourceKind.Single: {\n            p.setup(ParseTables.sym.single_input);\n            break;\n        }\n        default: {\n            throw new Error(\"SourceKind must be one of File, Eval, or Single.\");\n        }\n    }\n    let lineno = 1;\n    let column = 0;\n    // let prefix = \"\";\n    const tokenizer = new Tokenizer(sourceKind === SourceKind.Single, function tokenizerCallback(type: Tokens, value: string, start: [number, number], end: [number, number], line: string): boolean | undefined {\n        const s_lineno = start[0];\n        const s_column = start[1];\n        if (s_lineno !== lineno && s_column !== column) {\n            // todo; update prefix and line/col\n        }\n        if (type === T_COMMENT || type === T_NL) {\n            // prefix += value;\n            lineno = end[0];\n            column = end[1];\n            if (value[value.length - 1] === \"\\n\") {\n                lineno += 1;\n                column = 0;\n            }\n            return undefined;\n        }\n        if (type === T_OP) {\n            type = OpMap[value];\n        }\n\n        // FIXME: We're creating an array object here for every token.\n        if (p.addtoken(type, value, start, end, line)) {\n            return true;\n        }\n        return undefined;\n    });\n    return function parseFunc(line: string): PyNode | boolean {\n        const ret = tokenizer.generateTokens(line);\n        if (ret) {\n            if (ret !== \"done\") {\n                throw parseError(\"incomplete input\");\n            }\n            return p.rootNode;\n        }\n        return false;\n    };\n}\n\n/**\n * Determines the starting point in the grammar for parsing the source.\n */\nexport enum SourceKind {\n    /**\n     * Suitable for a module.\n     */\n    File = 0,\n    /**\n     * Suitable for execution.\n     */\n    Eval = 1,\n    /**\n     * Suitable for a REPL.\n     */\n    Single = 2\n}\n\nexport function parse(sourceText: string, sourceKind: SourceKind = SourceKind.File): boolean | PyNode {\n    const parser = makeParser(sourceKind);\n    const lines = splitSourceTextIntoLines(sourceText);\n    // FIXME: Mixing the types this way is awkward for the consumer.\n    let ret: boolean | PyNode = false;\n    for (const line of lines) {\n        ret = parser(line);\n    }\n    return ret;\n}\n\n/**\n * Concrete Syntax Tree\n */\nexport function cstDump(parseTree: PyNode): string {\n    function parseTreeDump(n: PyNode, indent: string): string {\n        let ret = \"\";\n        if (isNonTerminal(n.type)) {\n            ret += indent + ParseTables.number2symbol[n.type] + \"\\n\";\n            if (n.children) {\n                for (let i = 0; i < n.children.length; ++i) {\n                    ret += parseTreeDump(n.children[i], \"  \" + indent);\n                }\n            }\n        }\n        else {\n            ret += indent + tokenNames[n.type] + \": \" + n.value + \"\\n\";\n        }\n        return ret;\n    }\n    return parseTreeDump(parseTree, \"\");\n}\n\n/**\n * Terminal symbols hsould be less than T_NT_OFFSET.\n * NT_OFFSET means non-terminal offset.\n */\n\nfunction assertTerminal(type: Tokens): void {\n    assert(type < T_NT_OFFSET, \"terminal symbols should be less than T_NT_OFFSET\");\n}\n\n/*\nfunction assertNonTerminal(type: number): void {\n    assert(isNonTerminal(type), \"non terminal symbols should be greater than or equal to T_NT_OFFSET\");\n}\n*/\n\nfunction isNonTerminal(type: number): boolean {\n    return type >= T_NT_OFFSET;\n}\n\n","//\n// This module is at the bottom.\n// It should only import modules that don't introduce circularity.\n//\nimport { assert } from '../common/asserts';\nimport { Range } from '../common//Range';\n\n/**\n * A numeric literal used in parsing.\n */\nexport interface INumericLiteral {\n    isFloat(): boolean;\n    isInt(): boolean;\n    isLong(): boolean;\n    radix?: number;\n    text?: string;\n    toString(): string;\n    value?: number;\n}\n\nexport interface Visitor {\n    annAssign(annassign: AnnAssign): void;\n    assign(assign: Assign): void;\n    attribute(attribute: Attribute): void;\n    binOp(be: BinOp): void;\n    callExpression(ce: Call): void;\n    classDef(classDef: ClassDef): void;\n    compareExpression(ce: Compare): void;\n    dict(dict: Dict): void;\n    expressionStatement(es: ExpressionStatement): void;\n    functionDef(functionDef: FunctionDef): void;\n    ifStatement(ifs: IfStatement): void;\n    importFrom(importFrom: ImportFrom): void;\n    list(list: List): void;\n    module(module: Module): void;\n    name(name: Name): void;\n    num(num: Num): void;\n    print(print: Print): void;\n    returnStatement(rs: ReturnStatement): void;\n    str(str: Str): void;\n    forStatement(fs: ForStatement): void;\n}\n\nexport interface Visitable {\n    /**\n     * Who am I?\n     */\n    accept(visitor: Visitor): void;\n}\n\n/**\n * Binary operators.\n * TODO: Rename to BinaryOperator. Consider using an enum.\n */\nexport type Operator = BitOr | BitXor | BitAnd | LShift | RShift | Add | Sub | Mult | Div | FloorDiv | Mod;\n\nexport interface HasAstName {\n}\n\nexport class Load { }\nexport class Store { }\nexport class Del { }\nexport class AugLoad { }\nexport class AugStore { }\nexport class Param { }\n\nexport class And { }\nexport class Or { }\n\nexport class Add implements HasAstName {\n}\nexport class Sub implements HasAstName {\n}\nexport class Mult implements HasAstName {\n}\nexport class Div implements HasAstName {\n}\nexport class Mod implements HasAstName {\n}\nexport class Pow implements HasAstName {\n}\nexport class LShift implements HasAstName {\n}\nexport class RShift implements HasAstName {\n}\nexport class BitOr implements HasAstName {\n}\nexport class BitXor implements HasAstName {\n}\nexport class BitAnd implements HasAstName {\n}\nexport class FloorDiv implements HasAstName {\n}\n\nexport class Invert implements HasAstName {\n}\n\nexport class Not {\n}\n\nexport class UAdd implements HasAstName {\n}\nexport class USub implements HasAstName {\n}\n\nexport class Eq { }\nexport class NotEq { }\nexport class Lt { }\nexport class LtE { }\nexport class Gt { }\nexport class GtE { }\nexport class Is { }\nexport class IsNot { }\nexport class In { }\nexport class NotIn { }\n\nexport class RangeAnnotated<T> {\n    constructor(public readonly value: T, public readonly range: Range) {\n        assert(typeof value !== 'undefined', \"value must be defined.\");\n    }\n}\n\nexport abstract class Expression implements Visitable {\n    id?: RangeAnnotated<string>;\n    constructor() {\n        // Do noting yet.\n    }\n    accept(visitor: Visitor): void {\n        // accept must be implemented by derived classes.\n        throw new Error(`\"Expression.accept\" is not implemented.`);\n    }\n}\n\nexport abstract class Statement implements Visitable {\n    lineno?: number;\n    accept(visitor: Visitor): void {\n        // accept must be implemented by derived classes.\n        throw new Error(`\"Statement.accept\" is not implemented.`);\n    }\n}\n\nexport class IterationStatement extends Statement {\n    // statement: Statement;\n}\n\nexport class Module implements Visitable {\n    body: Statement[];\n    scopeId: number;\n    constructor(body: Statement[]) {\n        this.body = body;\n    }\n    accept(visitor: Visitor): void {\n        visitor.module(this);\n    }\n}\n\nexport class Interactive {\n    body: any;\n    constructor(body: any) {\n        this.body = body;\n    }\n}\n\nexport class UnaryExpression extends Expression {\n\n}\n\nexport class Suite {\n    body: any;\n    constructor(body: any) {\n        this.body = body;\n    }\n}\n\nexport type Decorator = Attribute | Call | Name;\n\nexport class FunctionDef extends Statement {\n    name: RangeAnnotated<string>;\n    args: Arguments;\n    body: Statement[];\n    decorator_list: Decorator[];\n    scopeId: number;\n    returnType: Expression;\n    constructor(name: RangeAnnotated<string>, args: Arguments, body: Statement[], returnType: Expression, decorator_list: Decorator[], public readonly range?: Range) {\n        super();\n        this.name = name;\n        this.args = args;\n        this.body = body;\n        this.decorator_list = decorator_list;\n        this.returnType = returnType;\n    }\n    accept(visitor: Visitor): void {\n        visitor.functionDef(this);\n    }\n}\n\nexport class FunctionParamDef {\n    name: Name;\n    type: Expression;\n\n    constructor(name: Name, type?: Expression) {\n        this.name = name;\n        if (type) {\n            this.type = type;\n        }\n        else {\n            this.type = null;\n        }\n\n    }\n}\nexport class ClassDef extends Statement {\n    name: RangeAnnotated<string>;\n    bases: Expression[];\n    body: Statement[];\n    decorator_list: Decorator[];\n    scopeId: number;\n    constructor(name: RangeAnnotated<string>, bases: Expression[], body: Statement[], decorator_list: Decorator[], public readonly range?: Range) {\n        super();\n        this.name = name;\n        this.bases = bases;\n        this.body = body;\n        this.decorator_list = decorator_list;\n    }\n    accept(visitor: Visitor): void {\n        visitor.classDef(this);\n    }\n}\n\nexport class ReturnStatement extends Statement {\n    /**\n     * An expression, and probably should be optional.\n     */\n    value: Expression | Tuple | null;\n    constructor(value: Expression | Tuple | null, public readonly range?: Range) {\n        super();\n        this.value = value;\n    }\n    accept(visitor: Visitor): void {\n        visitor.returnStatement(this);\n    }\n}\n\nexport class DeleteStatement extends Statement {\n    targets: Expression[];\n    constructor(targets: Expression[], public readonly range?: Range) {\n        super();\n        this.targets = targets;\n    }\n}\n\nexport type Target = Expression | Tuple;\n\nexport class Assign extends Statement {\n    targets: Target[];\n    value: Target;\n    type?: Expression;\n    constructor(targets: Target[], value: Target, public readonly range: Range, public readonly eqRange: Range, type?: Expression) {\n        super();\n        this.targets = targets;\n        this.value = value;\n        if (type) {\n            this.type = type;\n        }\n    }\n    accept(visitor: Visitor): void {\n        visitor.assign(this);\n    }\n}\n\nexport type AugAssignOperator = Add | Sub | FloorDiv | Div | Mod | LShift | RShift | BitAnd | BitXor | BitOr | Pow | Mult;\n\nexport class AugAssign extends Statement {\n    target: Expression | Tuple;\n    op: AugAssignOperator;\n    value: Expression | Tuple;\n    constructor(target: Expression | Tuple, op: AugAssignOperator, value: Expression | Tuple, public readonly range?: Range) {\n        super();\n        this.target = target;\n        this.op = op;\n        this.value = value;\n    }\n}\n\nexport class AnnAssign extends Statement {\n    value: Expression;\n    target: Expression;\n    constructor (type: Expression, target: Expression, public readonly range?: Range) {\n        super();\n        this.value = type;\n        this.target = target;\n    }\n    accept(visitor: Visitor): void {\n        visitor.annAssign(this);\n    }\n}\n\nexport class Print extends Statement {\n    dest: Expression;\n    values: Expression[];\n    nl: boolean;\n    constructor(dest: Expression, values: Expression[], nl: boolean, public readonly range?: Range) {\n        super();\n        this.dest = dest;\n        this.values = values;\n        this.nl = nl;\n    }\n    accept(visitor: Visitor): void {\n        visitor.print(this);\n    }\n}\n\nexport class ForStatement extends Statement {\n    target: Target;\n    iter: Expression | Tuple;\n    body: Statement[];\n    orelse: Statement[];\n    constructor(target: Target, iter: Expression | Tuple, body: Statement[], orelse: Statement[], public readonly range?: Range) {\n        super();\n        this.target = target;\n        this.iter = iter;\n        this.body = body;\n        this.orelse = orelse;\n    }\n    accept(visitor: Visitor): void {\n        visitor.forStatement(this);\n    }\n}\n\nexport class WhileStatement extends IterationStatement {\n    test: Expression;\n    body: Statement[];\n    orelse: Statement[];\n    constructor(test: Expression, body: Statement[], orelse: Statement[], public readonly range?: Range) {\n        super();\n        this.test = test;\n        this.body = body;\n        this.orelse = orelse;\n    }\n}\n\nexport class IfStatement extends Statement {\n    test: Expression;\n    consequent: Statement[];\n    alternate: Statement[];\n    constructor(test: Expression, consequent: Statement[], alternate: Statement[], public readonly range?: Range) {\n        super();\n        this.test = test;\n        this.consequent = consequent;\n        this.alternate = alternate;\n    }\n    accept(visitor: Visitor): void {\n        visitor.ifStatement(this);\n    }\n}\n\nexport class WithStatement extends Statement {\n    context_expr: Expression;\n    optional_vars: Expression | undefined;\n    body: Statement[];\n    constructor(context_expr: Expression, optional_vars: Expression | undefined, body: Statement[], public readonly range?: Range) {\n        super();\n        this.context_expr = context_expr;\n        this.optional_vars = optional_vars;\n        this.body = body;\n    }\n}\n\nexport class Raise extends Statement {\n    type: Expression;\n    inst: Expression;\n    tback: Expression;\n    constructor(type: Expression, inst: Expression, tback: Expression, public readonly range?: Range) {\n        super();\n        this.type = type;\n        this.inst = inst;\n        this.tback = tback;\n    }\n}\n\nexport class TryExcept extends Statement {\n    body: Statement[];\n    handlers: ExceptHandler[];\n    orelse: Statement[];\n    constructor(body: Statement[], handlers: ExceptHandler[], orelse: Statement[], public readonly range?: Range) {\n        super();\n        this.body = body;\n        this.handlers = handlers;\n        this.orelse = orelse;\n    }\n}\n\nexport class TryFinally extends Statement {\n    body: Statement[];\n    finalbody: Statement[];\n    constructor(body: Statement[], finalbody: Statement[], public readonly range?: Range) {\n        super();\n        this.body = body;\n        this.finalbody = finalbody;\n    }\n}\n\nexport class Assert extends Statement {\n    test: Expression;\n    msg: Expression;\n    constructor(test: Expression, msg: Expression, public readonly range?: Range) {\n        super();\n        this.test = test;\n        this.msg = msg;\n    }\n}\n\nexport class ImportStatement extends Statement {\n    names: Alias[];\n    constructor(names: Alias[], public readonly range?: Range) {\n        super();\n        this.names = names;\n    }\n}\n\nexport class ImportFrom extends Statement {\n    module: RangeAnnotated<string>;\n    names: Alias[];\n    level: number;\n    constructor(module: RangeAnnotated<string>, names: Alias[], level: number, public readonly range?: Range) {\n        super();\n        assert(typeof module.value === 'string', \"module must be a string.\");\n        assert(Array.isArray(names), \"names must be an Array.\");\n        this.module = module;\n        this.names = names;\n        this.level = level;\n    }\n    accept(visitor: Visitor): void {\n        visitor.importFrom(this);\n    }\n}\n\nexport class Exec extends Statement {\n    body: Expression;\n    globals: Expression | null;\n    locals: Expression | null;\n    constructor(body: Expression, globals: Expression | null, locals: Expression | null, public readonly range?: Range) {\n        super();\n        this.body = body;\n        this.globals = globals;\n        this.locals = locals;\n    }\n}\n\nexport class Global extends Statement {\n    // TODO: RangeAnnotated...\n    names: string[];\n    constructor(names: string[], public readonly range?: Range) {\n        super();\n        this.names = names;\n    }\n}\n\nexport class NonLocal extends Statement {\n    // TODO: RangeAnnotated...\n    names: string[];\n    constructor(names: string[], public readonly range?: Range) {\n        super();\n        this.names = names;\n    }\n}\n\nexport class ExpressionStatement extends Statement {\n    value: Expression;\n    constructor(value: Expression, public readonly range?: Range) {\n        super();\n        this.value = value;\n    }\n    accept(visitor: Visitor): void {\n        visitor.expressionStatement(this);\n    }\n}\n\nexport class Pass extends Statement {\n    constructor(public readonly range?: Range) {\n        super();\n    }\n}\n\nexport class BreakStatement extends Statement {\n    constructor(public readonly range?: Range) {\n        super();\n    }\n}\n\nexport class ContinueStatement extends Statement {\n    constructor(public readonly range?: Range) {\n        super();\n    }\n}\n\nexport class BoolOp extends Expression {\n    op: And;\n    values: Expression[];\n    constructor(op: And, values: Expression[], public readonly range?: Range) {\n        super();\n        this.op = op;\n        this.values = values;\n    }\n}\n\nexport class BinOp extends Expression {\n    lhs: Expression;\n    op: Operator;\n    opRange: Range;\n    rhs: Expression;\n    constructor(lhs: Expression, ops: { op: Operator; range: Range }, rhs: Expression, readonly range: Range) {\n        super();\n        this.lhs = lhs;\n        this.op = ops.op;\n        this.opRange = ops.range;\n        this.rhs = rhs;\n    }\n    accept(visitor: Visitor): void {\n        visitor.binOp(this);\n    }\n}\n\nexport type UnaryOperator = UAdd | USub | Invert | Not;\n\nexport class UnaryOp extends Expression {\n    op: UnaryOperator;\n    operand: Expression;\n    constructor(op: UnaryOperator, operand: Expression, public readonly range?: Range) {\n        super();\n        this.op = op;\n        this.operand = operand;\n    }\n}\n\nexport class Lambda extends Expression {\n    args: Arguments;\n    body: Expression;\n    scopeId: number;\n    constructor(args: Arguments, body: Expression, public readonly range?: Range) {\n        super();\n        this.args = args;\n        this.body = body;\n    }\n}\n\nexport class IfExp extends Expression {\n    test: Expression;\n    body: Expression;\n    orelse: Expression;\n    constructor(test: Expression, body: Expression, orelse: Expression, public readonly range?: Range) {\n        super();\n        this.test = test;\n        this.body = body;\n        this.orelse = orelse;\n    }\n}\n\nexport class Dict extends Expression {\n    keys: Expression[];\n    values: Expression[];\n    constructor(keys: Expression[], values: Expression[], public readonly range?: Range) {\n        super();\n        this.keys = keys;\n        this.values = values;\n    }\n    accept(visitor: Visitor): void {\n        visitor.dict(this);\n    }\n}\n\nexport class ListComp extends Expression {\n    elt: Expression;\n    generators: Comprehension[];\n    constructor(elt: Expression, generators: Comprehension[], public readonly range?: Range) {\n        super();\n        this.elt = elt;\n        this.generators = generators;\n    }\n}\n\nexport class GeneratorExp extends Expression {\n    elt: Expression;\n    generators: Comprehension[];\n    scopeId: number;\n    constructor(elt: Expression, generators: Comprehension[], public readonly range?: Range) {\n        super();\n        this.elt = elt;\n        this.generators = generators;\n    }\n}\n\nexport class Yield extends Expression {\n    value: Expression;\n    constructor(value: Expression, public readonly range?: Range) {\n        super();\n        this.value = value;\n    }\n}\n\n/**\n * TODO: Consider replacing with an enum.\n */\nexport type CompareOperator = Eq | NotEq | Gt | GtE | Lt | LtE | Is | IsNot | In | NotIn;\n\nexport class Compare extends Expression {\n    left: Expression;\n    ops: CompareOperator[];\n    comparators: Expression[];\n    constructor(left: Expression, ops: CompareOperator[], comparators: Expression[], public readonly range?: Range) {\n        super();\n        this.left = left;\n        for (const op of ops) {\n            switch (op) {\n                case Eq: {\n                    break;\n                }\n                case NotEq: {\n                    break;\n                }\n                case Gt: {\n                    break;\n                }\n                case GtE: {\n                    break;\n                }\n                case Lt: {\n                    break;\n                }\n                case LtE: {\n                    break;\n                }\n                case In: {\n                    break;\n                }\n                case NotIn: {\n                    break;\n                }\n                case Is: {\n                    break;\n                }\n                case IsNot: {\n                    break;\n                }\n                default: {\n                    throw new Error(`ops must only contain CompareOperator(s) but contains ${op}`);\n                }\n            }\n        }\n        this.ops = ops;\n        this.comparators = comparators;\n    }\n    accept(visitor: Visitor): void {\n        visitor.compareExpression(this);\n    }\n}\n\nexport class Call extends Expression {\n    func: Expression;\n    args: (Expression | GeneratorExp)[];\n    keywords: Keyword[];\n    starargs: Expression | null;\n    kwargs: Expression | null;\n    constructor(func: Expression, args: (Expression | GeneratorExp)[], keywords: Keyword[], starargs: Expression | null, kwargs: Expression | null) {\n        super();\n        this.func = func;\n        this.args = args;\n        this.keywords = keywords;\n        this.starargs = starargs;\n        this.kwargs = kwargs;\n    }\n    accept(visitor: Visitor): void {\n        visitor.callExpression(this);\n    }\n}\n\nexport class Num extends Expression {\n    n: RangeAnnotated<INumericLiteral>;\n    constructor(n: RangeAnnotated<INumericLiteral>) {\n        super();\n        this.n = n;\n    }\n    accept(visitor: Visitor): void {\n        visitor.num(this);\n    }\n}\n\nexport class Str extends Expression {\n    s: RangeAnnotated<string>;\n    constructor(s: RangeAnnotated<string>) {\n        super();\n        this.s = s;\n    }\n    accept(visitor: Visitor): void {\n        visitor.str(this);\n    }\n}\n\nexport class Attribute extends Expression {\n    value: Expression;\n    attr: RangeAnnotated<string>;\n    ctx: Load;\n    constructor(value: Expression, attr: RangeAnnotated<string>, ctx: Load, public readonly range: Range) {\n        super();\n        this.value = value;\n        this.attr = attr;\n        this.ctx = ctx;\n    }\n    accept(visitor: Visitor): void {\n        visitor.attribute(this);\n    }\n}\n\nexport type SubscriptContext = AugLoad | AugStore | Load | Store | Del | Param;\n\nexport class Subscript extends Expression {\n    value: Expression;\n    slice: Ellipsis | Index | Name | Slice;\n    ctx: SubscriptContext;\n    constructor(value: Expression, slice: Ellipsis | Index | Name | Slice, ctx: SubscriptContext, public readonly range?: Range) {\n        super();\n        this.value = value;\n        this.slice = slice;\n        this.ctx = ctx;\n    }\n}\n\nexport class Name extends Expression {\n    id: RangeAnnotated<string>;\n    ctx: Param;\n    constructor(id: RangeAnnotated<string>, ctx: Param) {\n        super();\n        this.id = id;\n        this.ctx = ctx;\n    }\n    accept(visitor: Visitor): void {\n        visitor.name(this);\n    }\n}\n\nexport class List extends Expression {\n    elts: Expression[];\n    ctx: Load;\n    constructor(elts: Expression[], ctx: Load, public readonly range?: Range) {\n        super();\n        this.elts = elts;\n        this.ctx = ctx;\n    }\n    accept(visitor: Visitor): void {\n        visitor.list(this);\n    }\n}\n\nexport class Tuple extends Expression {\n    elts: Expression[];\n    ctx: Load;\n    id?: RangeAnnotated<string>;\n    constructor(elts: Expression[], ctx: Load, public readonly range?: Range) {\n        super();\n        this.elts = elts;\n        this.ctx = ctx;\n    }\n}\n\nexport class Ellipsis {\n    constructor() {\n        // Do nothing yet.\n    }\n}\n\nexport class Slice {\n    lower: Expression;\n    upper: Expression;\n    step: Expression;\n    constructor(lower: Expression, upper: Expression, step: Expression) {\n        this.lower = lower;\n        this.upper = upper;\n        this.step = step;\n    }\n}\n\nexport class ExtSlice {\n    dims: (Name | Ellipsis | Index | Slice)[];\n    constructor(dims: (Name | Ellipsis | Index | Slice)[]) {\n        this.dims = dims;\n    }\n}\n\nexport class Index {\n    value: Tuple;\n    constructor(value: Tuple) {\n        this.value = value;\n    }\n}\n\nexport class Comprehension {\n    target: Expression | Tuple;\n    iter: Expression;\n    ifs: any[];\n    constructor(target: Expression | Tuple, iter: Expression, ifs: any[], public readonly range?: Range) {\n        this.target = target;\n        this.iter = iter;\n        this.ifs = ifs;\n    }\n}\n\nexport class ExceptHandler {\n    type: Expression | null;\n    name: Expression | null;\n    body: Statement[];\n    constructor(type: Expression | null, name: Expression | null, body: Statement[], public readonly range?: Range) {\n        this.type = type;\n        this.name = name;\n        this.body = body;\n    }\n}\n\nexport class Arguments {\n    args: FunctionParamDef[];\n    // TODO: RangeAnnotated...\n    vararg: string;\n    // TODO: RangeAnnotated...\n    kwarg: string;\n    defaults: Expression[];\n    constructor(args: FunctionParamDef[], vararg: string, kwarg: string, defaults: Expression[]) {\n        this.args = args;\n        this.vararg = vararg;\n        this.kwarg = kwarg;\n        this.defaults = defaults;\n    }\n}\n\nexport class Keyword {\n    // TODO: RangeAnnotated...\n    arg: RangeAnnotated<string>;\n    value: Expression;\n    constructor(arg: RangeAnnotated<string>, value: Expression) {\n        this.arg = arg;\n        this.value = value;\n    }\n}\n\nexport class Alias {\n    // TODO: RangeAnnotated...\n    name: RangeAnnotated<string>;\n    asname: string | null;\n    constructor(name: RangeAnnotated<string>, asname: string) {\n        assert(typeof name.value === 'string');\n        assert(typeof asname === 'string' || asname === null);\n        this.name = name;\n        this.asname = asname;\n    }\n    toString(): string {\n        return `${this.name.value} as ${this.asname}`;\n    }\n}\n\nModule.prototype['_astname'] = 'Module';\nModule.prototype['_fields'] = [\n    'body', function (n: Module) { return n.body; }\n];\nInteractive.prototype['_astname'] = 'Interactive';\nInteractive.prototype['_fields'] = [\n    'body', function (n: Interactive) { return n.body; }\n];\nExpression.prototype['_astname'] = 'Expression';\nExpression.prototype['_fields'] = [\n    'body', function (n: Expression): void {\n        // TOD: Expression is abstract so we should not be here?\n        return void 0;\n    }\n];\nSuite.prototype['_astname'] = 'Suite';\nSuite.prototype['_fields'] = [\n    'body', function (n: Suite) { return n.body; }\n];\nFunctionDef.prototype['_astname'] = 'FunctionDef';\nFunctionDef.prototype['_fields'] = [\n    'name', function (n: FunctionDef) { return n.name.value; },\n    'args', function (n: FunctionDef) { return n.args; },\n    'body', function (n: FunctionDef) { return n.body; },\n    'returnType', function (n: FunctionDef) { return n.returnType; },\n    'decorator_list', function (n: FunctionDef) { return n.decorator_list; }\n];\nClassDef.prototype['_astname'] = 'ClassDef';\nClassDef.prototype['_fields'] = [\n    'name', function (n: ClassDef) { return n.name.value; },\n    'bases', function (n: ClassDef) { return n.bases; },\n    'body', function (n: ClassDef) { return n.body; },\n    'decorator_list', function (n: ClassDef) { return n.decorator_list; }\n];\nReturnStatement.prototype['_astname'] = 'ReturnStatement';\nReturnStatement.prototype['_fields'] = [\n    'value', function (n: ReturnStatement) { return n.value; }\n];\nDeleteStatement.prototype['_astname'] = 'DeleteStatement';\nDeleteStatement.prototype['_fields'] = [\n    'targets', function (n: DeleteStatement) { return n.targets; }\n];\nAssign.prototype['_astname'] = 'Assign';\nAssign.prototype['_fields'] = [\n    'targets', function (n: Assign) { return n.targets; },\n    'value', function (n: Assign) { return n.value; }\n];\nAugAssign.prototype['_astname'] = 'AugAssign';\nAugAssign.prototype['_fields'] = [\n    'target', function (n: AugAssign) { return n.target; },\n    'op', function (n: AugAssign) { return n.op; },\n    'value', function (n: AugAssign) { return n.value; }\n];\nAnnAssign.prototype['_astname'] = 'AnnAssign';\nAnnAssign.prototype['_fields'] = [\n    'target', function (n: AnnAssign) { return n.target; },\n    'type', function (n: AnnAssign) { return n.value; }\n];\nPrint.prototype['_astname'] = 'Print';\nPrint.prototype['_fields'] = [\n    'dest', function (n: Print) { return n.dest; },\n    'values', function (n: Print) { return n.values; },\n    'nl', function (n: Print) { return n.nl; }\n];\nForStatement.prototype['_astname'] = 'ForStatement';\nForStatement.prototype['_fields'] = [\n    'target', function (n: ForStatement) { return n.target; },\n    'iter', function (n: ForStatement) { return n.iter; },\n    'body', function (n: ForStatement) { return n.body; },\n    'orelse', function (n: ForStatement) { return n.orelse; }\n];\nWhileStatement.prototype['_astname'] = 'WhileStatement';\nWhileStatement.prototype['_fields'] = [\n    'test', function (n: WhileStatement) { return n.test; },\n    'body', function (n: WhileStatement) { return n.body; },\n    'orelse', function (n: WhileStatement) { return n.orelse; }\n];\nIfStatement.prototype['_astname'] = 'IfStatement';\nIfStatement.prototype['_fields'] = [\n    'test', function (n: IfStatement) { return n.test; },\n    'consequent', function (n: IfStatement) { return n.consequent; },\n    'alternate', function (n: IfStatement) { return n.alternate; }\n];\nWithStatement.prototype['_astname'] = 'WithStatement';\nWithStatement.prototype['_fields'] = [\n    'context_expr', function (n: WithStatement) { return n.context_expr; },\n    'optional_vars', function (n: WithStatement) { return n.optional_vars; },\n    'body', function (n: WithStatement) { return n.body; }\n];\nRaise.prototype['_astname'] = 'Raise';\nRaise.prototype['_fields'] = [\n    'type', function (n: Raise) { return n.type; },\n    'inst', function (n: Raise) { return n.inst; },\n    'tback', function (n: Raise) { return n.tback; }\n];\nTryExcept.prototype['_astname'] = 'TryExcept';\nTryExcept.prototype['_fields'] = [\n    'body', function (n: TryExcept) { return n.body; },\n    'handlers', function (n: TryExcept) { return n.handlers; },\n    'orelse', function (n: TryExcept) { return n.orelse; }\n];\nTryFinally.prototype['_astname'] = 'TryFinally';\nTryFinally.prototype['_fields'] = [\n    'body', function (n: TryFinally) { return n.body; },\n    'finalbody', function (n: TryFinally) { return n.finalbody; }\n];\nAssert.prototype['_astname'] = 'Assert';\nAssert.prototype['_fields'] = [\n    'test', function (n: Assert) { return n.test; },\n    'msg', function (n: Assert) { return n.msg; }\n];\nImportStatement.prototype['_astname'] = 'Import';\nImportStatement.prototype['_fields'] = [\n    'names', function (n: ImportStatement) { return n.names; }\n];\nImportFrom.prototype['_astname'] = 'ImportFrom';\nImportFrom.prototype['_fields'] = [\n    'module', function (n: ImportFrom) { return n.module.value; },\n    'names', function (n: ImportFrom) { return n.names; },\n    'level', function (n: ImportFrom) { return n.level; }\n];\nExec.prototype['_astname'] = 'Exec';\nExec.prototype['_fields'] = [\n    'body', function (n: Exec) { return n.body; },\n    'globals', function (n: Exec) { return n.globals; },\n    'locals', function (n: Exec) { return n.locals; }\n];\nGlobal.prototype['_astname'] = 'Global';\nGlobal.prototype['_fields'] = [\n    'names', function (n: Global) { return n.names; }\n];\nNonLocal.prototype['_astname'] = 'NonLocal';\nNonLocal.prototype['_fields'] = [\n    'names', function (n: NonLocal) { return n.names; }\n];\nExpressionStatement.prototype['_astname'] = 'ExpressionStatement';\nExpressionStatement.prototype['_fields'] = [\n    'value', function (n: ExpressionStatement) { return n.value; }\n];\nPass.prototype['_astname'] = 'Pass';\nPass.prototype['_fields'] = [\n];\nBreakStatement.prototype['_astname'] = 'BreakStatement';\nBreakStatement.prototype['_fields'] = [\n];\nContinueStatement.prototype['_astname'] = 'ContinueStatement';\nContinueStatement.prototype['_fields'] = [\n];\nBoolOp.prototype['_astname'] = 'BoolOp';\nBoolOp.prototype['_fields'] = [\n    'op', function (n: BoolOp) { return n.op; },\n    'values', function (n: BoolOp) { return n.values; }\n];\nBinOp.prototype['_astname'] = 'BinOp';\nBinOp.prototype['_fields'] = [\n    'lhs', function (n: BinOp) { return n.lhs; },\n    'op', function (n: BinOp) { return n.op; },\n    'rhs', function (n: BinOp) { return n.rhs; }\n];\nUnaryOp.prototype['_astname'] = 'UnaryOp';\nUnaryOp.prototype['_fields'] = [\n    'op', function (n: UnaryOp) { return n.op; },\n    'operand', function (n: UnaryOp) { return n.operand; }\n];\nLambda.prototype['_astname'] = 'Lambda';\nLambda.prototype['_fields'] = [\n    'args', function (n: Lambda) { return n.args; },\n    'body', function (n: Lambda) { return n.body; }\n];\nIfExp.prototype['_astname'] = 'IfExp';\nIfExp.prototype['_fields'] = [\n    'test', function (n: IfExp) { return n.test; },\n    'body', function (n: IfExp) { return n.body; },\n    'orelse', function (n: IfExp) { return n.orelse; }\n];\nDict.prototype['_astname'] = 'Dict';\nDict.prototype['_fields'] = [\n    'keys', function (n: Dict) { return n.keys; },\n    'values', function (n: Dict) { return n.values; }\n];\nListComp.prototype['_astname'] = 'ListComp';\nListComp.prototype['_fields'] = [\n    'elt', function (n: ListComp) { return n.elt; },\n    'generators', function (n: ListComp) { return n.generators; }\n];\nGeneratorExp.prototype['_astname'] = 'GeneratorExp';\nGeneratorExp.prototype['_fields'] = [\n    'elt', function (n: GeneratorExp) { return n.elt; },\n    'generators', function (n: GeneratorExp) { return n.generators; }\n];\nYield.prototype['_astname'] = 'Yield';\nYield.prototype['_fields'] = [\n    'value', function (n: Yield) { return n.value; }\n];\nCompare.prototype['_astname'] = 'Compare';\nCompare.prototype['_fields'] = [\n    'left', function (n: Compare) { return n.left; },\n    'ops', function (n: Compare) { return n.ops; },\n    'comparators', function (n: Compare) { return n.comparators; }\n];\nCall.prototype['_astname'] = 'Call';\nCall.prototype['_fields'] = [\n    'func', function (n: Call) { return n.func; },\n    'args', function (n: Call) { return n.args; },\n    'keywords', function (n: Call) { return n.keywords; },\n    'starargs', function (n: Call) { return n.starargs; },\n    'kwargs', function (n: Call) { return n.kwargs; }\n];\nNum.prototype['_astname'] = 'Num';\nNum.prototype['_fields'] = [\n    'n', function (n: Num) { return n.n.value; }\n];\nStr.prototype['_astname'] = 'Str';\nStr.prototype['_fields'] = [\n    's', function (n: Str) { return n.s.value; }\n];\nAttribute.prototype['_astname'] = 'Attribute';\nAttribute.prototype['_fields'] = [\n    'value', function (n: Attribute) { return n.value; },\n    'attr', function (n: Attribute) { return n.attr.value; },\n    'ctx', function (n: Attribute) { return n.ctx; }\n];\nSubscript.prototype['_astname'] = 'Subscript';\nSubscript.prototype['_fields'] = [\n    'value', function (n: Subscript) { return n.value; },\n    'slice', function (n: Subscript) { return n.slice; },\n    'ctx', function (n: Subscript) { return n.ctx; }\n];\nName.prototype['_astname'] = 'Name';\nName.prototype['_fields'] = [\n    'id', function (n: Name) { return n.id.value; },\n    'ctx', function (n: Name) { return n.ctx; }\n];\nList.prototype['_astname'] = 'List';\nList.prototype['_fields'] = [\n    'elts', function (n: List) { return n.elts; },\n    'ctx', function (n: List) { return n.ctx; }\n];\nTuple.prototype['_astname'] = 'Tuple';\nTuple.prototype['_fields'] = [\n    'elts', function (n: Tuple) { return n.elts; },\n    'ctx', function (n: Tuple) { return n.ctx; }\n];\nLoad.prototype['_astname'] = 'Load';\nLoad.prototype['_isenum'] = true;\nStore.prototype['_astname'] = 'Store';\nStore.prototype['_isenum'] = true;\nDel.prototype['_astname'] = 'Del';\nDel.prototype['_isenum'] = true;\nAugLoad.prototype['_astname'] = 'AugLoad';\nAugLoad.prototype['_isenum'] = true;\nAugStore.prototype['_astname'] = 'AugStore';\nAugStore.prototype['_isenum'] = true;\nParam.prototype['_astname'] = 'Param';\nParam.prototype['_isenum'] = true;\nEllipsis.prototype['_astname'] = 'Ellipsis';\nEllipsis.prototype['_fields'] = [\n];\nSlice.prototype['_astname'] = 'Slice';\nSlice.prototype['_fields'] = [\n    'lower', function (n: Slice) { return n.lower; },\n    'upper', function (n: Slice) { return n.upper; },\n    'step', function (n: Slice) { return n.step; }\n];\nExtSlice.prototype['_astname'] = 'ExtSlice';\nExtSlice.prototype['_fields'] = [\n    'dims', function (n: ExtSlice) { return n.dims; }\n];\nIndex.prototype['_astname'] = 'Index';\nIndex.prototype['_fields'] = [\n    'value', function (n: Index) { return n.value; }\n];\nAnd.prototype['_astname'] = 'And';\nAnd.prototype['_isenum'] = true;\nOr.prototype['_astname'] = 'Or';\nOr.prototype['_isenum'] = true;\nAdd.prototype['_astname'] = 'Add';\nAdd.prototype['_isenum'] = true;\nSub.prototype['_astname'] = 'Sub';\nSub.prototype['_isenum'] = true;\nMult.prototype['_astname'] = 'Mult';\nMult.prototype['_isenum'] = true;\nDiv.prototype['_astname'] = 'Div';\nDiv.prototype['_isenum'] = true;\nMod.prototype['_astname'] = 'Mod';\nMod.prototype['_isenum'] = true;\nPow.prototype['_astname'] = 'Pow';\nPow.prototype['_isenum'] = true;\nLShift.prototype['_astname'] = 'LShift';\nLShift.prototype['_isenum'] = true;\nRShift.prototype['_astname'] = 'RShift';\nRShift.prototype['_isenum'] = true;\nBitOr.prototype['_astname'] = 'BitOr';\nBitOr.prototype['_isenum'] = true;\nBitXor.prototype['_astname'] = 'BitXor';\nBitXor.prototype['_isenum'] = true;\nBitAnd.prototype['_astname'] = 'BitAnd';\nBitAnd.prototype['_isenum'] = true;\nFloorDiv.prototype['_astname'] = 'FloorDiv';\nFloorDiv.prototype['_isenum'] = true;\nInvert.prototype['_astname'] = 'Invert';\nInvert.prototype['_isenum'] = true;\nNot.prototype['_astname'] = 'Not';\nNot.prototype['_isenum'] = true;\nUAdd.prototype['_astname'] = 'UAdd';\nUAdd.prototype['_isenum'] = true;\nUSub.prototype['_astname'] = 'USub';\nUSub.prototype['_isenum'] = true;\nEq.prototype['_astname'] = 'Eq';\nEq.prototype['_isenum'] = true;\nNotEq.prototype['_astname'] = 'NotEq';\nNotEq.prototype['_isenum'] = true;\nLt.prototype['_astname'] = 'Lt';\nLt.prototype['_isenum'] = true;\nLtE.prototype['_astname'] = 'LtE';\nLtE.prototype['_isenum'] = true;\nGt.prototype['_astname'] = 'Gt';\nGt.prototype['_isenum'] = true;\nGtE.prototype['_astname'] = 'GtE';\nGtE.prototype['_isenum'] = true;\nIs.prototype['_astname'] = 'Is';\nIs.prototype['_isenum'] = true;\nIsNot.prototype['_astname'] = 'IsNot';\nIsNot.prototype['_isenum'] = true;\nIn.prototype['_astname'] = 'In';\nIn.prototype['_isenum'] = true;\nNotIn.prototype['_astname'] = 'NotIn';\nNotIn.prototype['_isenum'] = true;\nComprehension.prototype['_astname'] = 'Comprehension';\nComprehension.prototype['_fields'] = [\n    'target', function (n: Comprehension) { return n.target; },\n    'iter', function (n: Comprehension) { return n.iter; },\n    'ifs', function (n: Comprehension) { return n.ifs; }\n];\nExceptHandler.prototype['_astname'] = 'ExceptHandler';\nExceptHandler.prototype['_fields'] = [\n    'type', function (n: ExceptHandler) { return n.type; },\n    'name', function (n: ExceptHandler) { return n.name; },\n    'body', function (n: ExceptHandler) { return n.body; }\n];\nArguments.prototype['_astname'] = 'Arguments';\nArguments.prototype['_fields'] = [\n    'args', function (n: Arguments) { return n.args; },\n    'vararg', function (n: Arguments) { return n.vararg; },\n    'kwarg', function (n: Arguments) { return n.kwarg; },\n    'defaults', function (n: Arguments) { return n.defaults; }\n];\nKeyword.prototype['_astname'] = 'Keyword';\nKeyword.prototype['_fields'] = [\n    'arg', function (n: Keyword) { return n.arg.value; },\n    'value', function (n: Keyword) { return n.value; }\n];\nFunctionParamDef.prototype['_astname'] = 'FunctionParamDef';\nFunctionParamDef.prototype['_fields'] = [\n    'name', function (n: FunctionParamDef) { return n.name; },\n    'type', function (n: FunctionParamDef) { return n.type; }\n];\nAlias.prototype['_astname'] = 'Alias';\nAlias.prototype['_fields'] = [\n    'name', function (n: Alias) { return n.name.value; },\n    'asname', function (n: Alias) { return n.asname; }\n];\n\n\n","import { INumericLiteral } from './types';\n\n/**\n * @param s\n */\nexport function floatAST(s: string): INumericLiteral {\n    const thing: INumericLiteral = {\n        text: s,\n        value: parseFloat(s),\n        isFloat: function () { return true; },\n        isInt: function () { return false; },\n        isLong: function () { return false; },\n        toString: function () { return s; }\n    };\n    return thing;\n}\n\n/**\n * @param n\n */\nexport function intAST(n: number): INumericLiteral {\n    const thing: INumericLiteral = {\n        value: n,\n        isFloat: function () { return false; },\n        isInt: function () { return true; },\n        isLong: function () { return false; },\n        toString: function () { return '' + n; }\n    };\n    return thing;\n}\n\n/**\n * @param {string} s\n */\nexport function longAST(s: string, radix: number): INumericLiteral {\n    const thing: INumericLiteral = {\n        text: s,\n        radix: radix,\n        isFloat: function () { return false; },\n        isInt: function () { return false; },\n        isLong: function () { return true; },\n        toString: function () { return s; }\n    };\n    return thing;\n}\n","import { assert, fail } from '../common/asserts';\nimport { NCH, CHILD, FIND } from '../common/tree';\n\nimport { Add } from './types';\n// TODO: Conventions\nimport { Alias } from './types';\nimport { Arguments } from './types';\nimport { And } from './types';\nimport { AnnAssign } from './types';\nimport { Assert } from './types';\nimport { Assign } from './types';\nimport { Attribute } from './types';\nimport { AugAssign } from './types';\nimport { AugLoad } from './types';\nimport { AugStore } from './types';\nimport { BinOp } from './types';\nimport { BitAnd } from './types';\nimport { BitOr } from './types';\nimport { BitXor } from './types';\nimport { BoolOp } from './types';\nimport { BreakStatement } from './types';\nimport { Call } from './types';\nimport { ClassDef } from './types';\nimport { Compare } from './types';\nimport { Comprehension } from './types';\nimport { ContinueStatement } from './types';\nimport { Del } from './types';\nimport { DeleteStatement } from './types';\nimport { Dict } from './types';\nimport { Div } from './types';\nimport { Ellipsis } from './types';\nimport { Eq } from './types';\nimport { ExceptHandler } from './types';\nimport { Exec } from './types';\nimport { Expression } from './types';\nimport { ExpressionStatement } from './types';\nimport { ExtSlice } from './types';\nimport { FloorDiv } from './types';\nimport { FunctionParamDef } from './types';\nimport { ForStatement } from './types';\nimport { FunctionDef } from './types';\nimport { GeneratorExp } from './types';\nimport { Global } from './types';\nimport { Gt } from './types';\nimport { GtE } from './types';\n// FIXME: Convention\nimport { Keyword } from './types';\nimport { IfStatement } from './types';\nimport { IfExp } from './types';\nimport { ImportStatement } from './types';\nimport { ImportFrom } from './types';\nimport { Index } from './types';\nimport { In } from './types';\nimport { Invert } from './types';\nimport { Is } from './types';\nimport { IsNot } from './types';\nimport { Lambda } from './types';\nimport { List } from './types';\nimport { ListComp } from './types';\nimport { Load } from './types';\nimport { LShift } from './types';\nimport { Lt } from './types';\nimport { LtE } from './types';\nimport { Mod } from './types';\n// import { Module } from './types';\nimport { Mult } from './types';\nimport { NonLocal } from './types';\nimport { Name } from './types';\nimport { Not } from './types';\nimport { NotEq } from './types';\nimport { NotIn } from './types';\nimport { Num } from './types';\nimport { Operator } from './types';\nimport { Or } from './types';\nimport { Param } from './types';\nimport { Pass } from './types';\nimport { Pow } from './types';\nimport { Print } from './types';\nimport { Raise } from './types';\nimport { RangeAnnotated } from './types';\nimport { ReturnStatement } from './types';\nimport { RShift } from './types';\nimport { Slice } from './types';\nimport { Statement } from './types';\nimport { Store } from './types';\nimport { Str } from './types';\nimport { Sub } from './types';\nimport { Subscript } from './types';\nimport { TryExcept } from './types';\nimport { TryFinally } from './types';\nimport { Tuple } from './types';\nimport { UAdd } from './types';\nimport { UnaryOp } from './types';\nimport { USub } from './types';\nimport { WhileStatement } from './types';\nimport { WithStatement } from './types';\nimport { Yield } from './types';\n\nimport { isNumber, isString } from '../common/base';\nimport { ParseTables } from '../cst/tables';\nimport { Tokens as TOK } from '../cst/Tokens';\nimport { floatAST, intAST, longAST } from './numericLiteral';\nimport { INumericLiteral } from './types';\nimport { PyNode } from '../cst/parser';\nimport { Range } from '../common/Range';\n// import { cstDump } from './parser';\nimport { grammarName } from '../cst/grammarName';\n\n//\n// This is pretty much a straight port of ast.c from CPython 2.6.5.\n//\n// The previous version was easier to work with and more JS-ish, but having a\n// somewhat different ast structure than cpython makes testing more difficult.\n//\n// This way, we can use a dump from the ast module on any arbitrary python\n// code and know that we're the same up to ast level, at least.\n//\nconst SYM = ParseTables.sym;\n\n/**\n *\n */\nconst LONG_THRESHOLD = Math.pow(2, 53);\n\n/**\n * FIXME: Consolidate with parseError in parser.\n */\nfunction syntaxError(message: string, range: Range): SyntaxError {\n    assert(isString(message), \"message must be a string\");\n    assert(isNumber(range.begin.line), \"lineNumber must be a number\");\n    const e = new SyntaxError(message/*, fileName*/);\n    e['lineNumber'] = range.begin.line;\n    return e;\n}\n\nclass Compiling {\n    c_encoding: string;\n    constructor(encoding: 'utf-8') {\n        this.c_encoding = encoding;\n    }\n}\n\n/**\n * Asserts that the type of the node is that specified.\n */\nfunction REQ(n: PyNode, type: TOK | number): void {\n    // Avoid the cost of building the message string when there is no issue.\n    if (n.type !== type) {\n        fail(`node must have type ${type} = ${grammarName(type)}, but was ${n.type} = ${grammarName(n.type)}.`);\n    }\n}\n\n/**\n * Nothing more than assertion that the argument is a string.\n */\nfunction strobj(s: string): string {\n    // Avoid the cost of building the message string when there is no issue.\n    if (typeof s !== 'string') {\n        fail(\"expecting string, got \" + (typeof s));\n    }\n    // This previously constructed the runtime representation.\n    // That may have had an string intern side effect?\n    return s;\n}\n\nfunction numStmts(n: PyNode): number {\n    switch (n.type) {\n        case SYM.single_input:\n            if (CHILD(n, 0).type === TOK.T_NEWLINE)\n                return 0;\n            else\n                return numStmts(CHILD(n, 0));\n        case SYM.file_input:\n            let cnt = 0;\n            for (let i = 0; i < NCH(n); ++i) {\n                const ch = CHILD(n, i);\n                if (ch.type === SYM.stmt) {\n                    cnt += numStmts(ch);\n                }\n            }\n            return cnt;\n        case SYM.stmt:\n            return numStmts(CHILD(n, 0));\n        case SYM.compound_stmt:\n            return 1;\n        case SYM.simple_stmt:\n            return Math.floor(NCH(n) / 2); // div 2 is to remove count of ;s\n        case SYM.suite:\n            if (NCH(n) === 1)\n                return numStmts(CHILD(n, 0));\n            else {\n                let cnt = 0;\n                for (let i = 2; i < NCH(n) - 1; ++i) {\n                    cnt += numStmts(CHILD(n, i));\n                }\n                return cnt;\n            }\n        default: {\n            throw new Error(\"Non-statement found\");\n        }\n    }\n}\n\nfunction forbiddenCheck(c: Compiling, n: PyNode, x: string | undefined, range: Range): void {\n    if (x === \"None\") throw syntaxError(\"assignment to None\", range);\n    if (x === \"True\" || x === \"False\") throw syntaxError(\"assignment to True or False is forbidden\", range);\n}\n\n/**\n * Set the context ctx for e, recursively traversing e.\n *\n * Only sets context for expr kinds that can appear in assignment context as\n * per the asdl file.\n */\nfunction setContext(c: Compiling, e: Expression, ctx: Store, n: PyNode): void {\n    assert(ctx !== AugStore && ctx !== AugLoad);\n    let s: Expression[] = null;\n    let exprName: string = null;\n\n    if (e instanceof Attribute) {\n        if (ctx === Store) forbiddenCheck(c, n, e.attr.value, n.range);\n        e.ctx = ctx;\n    }\n    else if (e instanceof Name) {\n        if (ctx === Store) forbiddenCheck(c, n, /*e.attr*/void 0, n.range);\n        e.ctx = ctx;\n    }\n    else if (e instanceof Subscript) {\n        e.ctx = ctx;\n    }\n    else if (e instanceof List) {\n        e.ctx = ctx;\n        s = e.elts;\n    }\n    else if (e instanceof Tuple) {\n        if (e.elts.length === 0) {\n            throw syntaxError(\"can't assign to ()\", n.range);\n        }\n        e.ctx = ctx;\n        s = e.elts;\n    }\n    else if (e instanceof Lambda) {\n        exprName = \"lambda\";\n    }\n    else if (e instanceof Call) {\n        exprName = \"function call\";\n    }\n    else if (e instanceof BoolOp) {\n        exprName = \"operator\";\n    }\n    else {\n        switch (e.constructor) {\n            case BoolOp:\n            case BinOp:\n            case UnaryOp:\n                exprName = \"operator\";\n                break;\n            case GeneratorExp:\n                exprName = \"generator expression\";\n                break;\n            case Yield:\n                exprName = \"yield expression\";\n                break;\n            case ListComp:\n                exprName = \"list comprehension\";\n                break;\n            case Dict:\n            case Num:\n            case Str:\n                exprName = \"literal\";\n                break;\n            case Compare:\n                exprName = \"comparison expression\";\n                break;\n            case IfExp:\n                exprName = \"conditional expression\";\n                break;\n            default: {\n                throw new Error(\"unhandled expression in assignment\");\n            }\n        }\n\n    }\n    if (exprName) {\n        throw syntaxError(\"can't \" + (ctx === Store ? \"assign to\" : \"delete\") + \" \" + exprName, n.range);\n    }\n\n    if (s) {\n        for (const e of s) {\n            setContext(c, e, ctx, n);\n        }\n    }\n}\n\nconst operatorMap: { [token: number]: Operator } = {};\n(function () {\n    operatorMap[TOK.T_VBAR] = BitOr;\n    assert(operatorMap[TOK.T_VBAR] !== undefined, `${TOK.T_VBAR}`);\n    // assert(operatorMap[TOK.T_VBAR] === BitOr, `${TOK.T_VBAR}`);\n    operatorMap[TOK.T_VBAR] = BitOr;\n    operatorMap[TOK.T_CIRCUMFLEX] = BitXor;\n    operatorMap[TOK.T_AMPER] = BitAnd;\n    operatorMap[TOK.T_LEFTSHIFT] = LShift;\n    operatorMap[TOK.T_RIGHTSHIFT] = RShift;\n    operatorMap[TOK.T_PLUS] = Add;\n    operatorMap[TOK.T_MINUS] = Sub;\n    operatorMap[TOK.T_STAR] = Mult;\n    operatorMap[TOK.T_SLASH] = Div;\n    operatorMap[TOK.T_DOUBLESLASH] = FloorDiv;\n    operatorMap[TOK.T_PERCENT] = Mod;\n}());\n\nfunction getOperator(n: PyNode): { op: Operator; range: Range } {\n    assert(operatorMap[n.type] !== undefined, `${n.type}`);\n    return { op: operatorMap[n.type], range: n.range };\n}\n\nfunction astForCompOp(c: Compiling, n: PyNode): Lt | Gt | Eq | LtE | GtE | NotEq | In | Is | NotIn | IsNot {\n    // comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is' |'is' 'not'\n    REQ(n, SYM.comp_op);\n    if (NCH(n) === 1) {\n        n = CHILD(n, 0);\n        switch (n.type) {\n            case TOK.T_LESS: return Lt;\n            case TOK.T_GREATER: return Gt;\n            case TOK.T_EQEQUAL: return Eq;\n            case TOK.T_LESSEQUAL: return LtE;\n            case TOK.T_GREATEREQUAL: return GtE;\n            case TOK.T_NOTEQUAL: return NotEq;\n            case TOK.T_NAME:\n                if (n.value === \"in\") return In;\n                if (n.value === \"is\") return Is;\n        }\n    }\n    else if (NCH(n) === 2) {\n        if (CHILD(n, 0).type === TOK.T_NAME) {\n            if (CHILD(n, 1).value === \"in\") return NotIn;\n            if (CHILD(n, 0).value === \"is\") return IsNot;\n        }\n    }\n    throw new Error(\"invalid comp_op\");\n}\n\nfunction seqForTestlist(c: Compiling, n: PyNode) {\n    /* testlist: test (',' test)* [','] */\n    assert(n.type === SYM.testlist ||\n        n.type === SYM.listmaker ||\n        n.type === SYM.testlist_gexp ||\n        n.type === SYM.testlist_safe ||\n        n.type === SYM.testlist1);\n    const seq: Expression[] = [];\n    for (let i = 0; i < NCH(n); i += 2) {\n        assert(CHILD(n, i).type === SYM.IfExpr || CHILD(n, i).type === SYM.old_test);\n        seq[i / 2] = astForExpr(c, CHILD(n, i));\n    }\n    return seq;\n}\n\nfunction astForSuite(c: Compiling, n: PyNode): Statement[] {\n    /* suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT */\n    REQ(n, SYM.suite);\n    const seq: Statement[] = [];\n    let pos = 0;\n    let ch: PyNode;\n    if (CHILD(n, 0).type === SYM.simple_stmt) {\n        n = CHILD(n, 0);\n        /* simple_stmt always ends with an NEWLINE and may have a trailing\n            * SEMI. */\n        let end = NCH(n) - 1;\n        if (CHILD(n, end - 1).type === TOK.T_SEMI) {\n            end -= 1;\n        }\n        // by 2 to skip\n        for (let i = 0; i < end; i += 2) {\n            seq[pos++] = astForStmt(c, CHILD(n, i));\n        }\n    }\n    else {\n        for (let i = 2; i < NCH(n) - 1; ++i) {\n            ch = CHILD(n, i);\n            REQ(ch, SYM.stmt);\n            let num = numStmts(ch);\n            if (num === 1) {\n                // small_stmt or compound_stmt w/ only 1 child\n                seq[pos++] = astForStmt(c, ch);\n            }\n            else {\n                ch = CHILD(ch, 0);\n                REQ(ch, SYM.simple_stmt);\n                for (let j = 0; j < NCH(ch); j += 2) {\n                    if (NCH(CHILD(ch, j)) === 0) {\n                        assert(j + 1 === NCH(ch));\n                        break;\n                    }\n                    seq[pos++] = astForStmt(c, CHILD(ch, j));\n                }\n            }\n        }\n    }\n    assert(pos === numStmts(n));\n    return seq;\n}\n\nfunction astForExceptClause(c: Compiling, exc: PyNode, body: PyNode): ExceptHandler {\n    /* except_clause: 'except' [test [(',' | 'as') test]] */\n    REQ(exc, SYM.except_clause);\n    REQ(body, SYM.suite);\n    if (NCH(exc) === 1) {\n        return new ExceptHandler(null, null, astForSuite(c, body), exc.range);\n    }\n    else if (NCH(exc) === 2)\n        return new ExceptHandler(astForExpr(c, CHILD(exc, 1)), null, astForSuite(c, body), exc.range);\n    else if (NCH(exc) === 4) {\n        const e = astForExpr(c, CHILD(exc, 3));\n        setContext(c, e, Store, CHILD(exc, 3));\n        return new ExceptHandler(astForExpr(c, CHILD(exc, 1)), e, astForSuite(c, body), exc.range);\n    }\n    else {\n        throw new Error(\"wrong number of children for except clause\");\n    }\n}\n\nfunction astForTryStmt(c: Compiling, n: PyNode): TryExcept | TryFinally {\n    const nc = NCH(n);\n    let nexcept = (nc - 3) / 3;\n    let orelse: Statement[] = [];\n    let finally_: Statement[] | null = null;\n\n    REQ(n, SYM.try_stmt);\n    let body = astForSuite(c, CHILD(n, 2));\n    if (CHILD(n, nc - 3).type === TOK.T_NAME) {\n        if (CHILD(n, nc - 3).value === \"finally\") {\n            if (nc >= 9 && CHILD(n, nc - 6).type === TOK.T_NAME) {\n                /* we can assume it's an \"else\",\n                    because nc >= 9 for try-else-finally and\n                    it would otherwise have a type of except_clause */\n                orelse = astForSuite(c, CHILD(n, nc - 4));\n                nexcept--;\n            }\n\n            finally_ = astForSuite(c, CHILD(n, nc - 1));\n            nexcept--;\n        }\n        else {\n            /* we can assume it's an \"else\",\n                otherwise it would have a type of except_clause */\n            orelse = astForSuite(c, CHILD(n, nc - 1));\n            nexcept--;\n        }\n    }\n    else if (CHILD(n, nc - 3).type !== SYM.except_clause) {\n        throw syntaxError(\"malformed 'try' statement\", n.range);\n    }\n\n    if (nexcept > 0) {\n        const handlers: ExceptHandler[] = [];\n        for (let i = 0; i < nexcept; ++i) {\n            handlers[i] = astForExceptClause(c, CHILD(n, 3 + i * 3), CHILD(n, 5 + i * 3));\n        }\n        const exceptSt = new TryExcept(body, handlers, orelse, n.range);\n\n        if (!finally_)\n            return exceptSt;\n\n        /* if a 'finally' is present too, we nest the TryExcept within a\n            TryFinally to emulate try ... except ... finally */\n        body = [exceptSt];\n    }\n\n    assert(finally_ !== null);\n    return new TryFinally(body, finally_ as Statement[], n.range);\n}\n\n\nfunction astForDottedName(c: Compiling, n: PyNode): Attribute | Name {\n    REQ(n, SYM.dotted_name);\n    const child = CHILD(n, 0);\n    let id = new RangeAnnotated(child.value, child.range);\n    let e: Attribute | Name = new Name(id, Load);\n    for (let i = 2; i < NCH(n); i += 2) {\n        const child = CHILD(n, i);\n        id = new RangeAnnotated(child.value, child.range);\n        e = new Attribute(e, id, Load, n.range);\n    }\n    return e;\n}\n\nfunction astForDecorator(c: Compiling, n: PyNode): Attribute | Call | Name {\n    /* decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE */\n    REQ(n, SYM.decorator);\n    REQ(CHILD(n, 0), TOK.T_AT);\n    REQ(CHILD(n, NCH(n) - 1), TOK.T_NEWLINE);\n    const nameExpr = astForDottedName(c, CHILD(n, 1));\n    if (NCH(n) === 3) // no args\n        return nameExpr;\n    else if (NCH(n) === 5) // call with no args\n        return new Call(nameExpr, [], [], null, null);\n    else\n        return astForCall(c, CHILD(n, 3), nameExpr);\n}\n\nfunction astForDecorators(c: Compiling, n: PyNode): (Attribute | Call | Name)[] {\n    REQ(n, SYM.decorators);\n    const decoratorSeq: (Attribute | Call | Name)[] = [];\n    for (let i = 0; i < NCH(n); ++i) {\n        decoratorSeq[i] = astForDecorator(c, CHILD(n, i));\n    }\n    return decoratorSeq;\n}\n\nfunction astForDecorated(c: Compiling, n: PyNode): FunctionDef | ClassDef {\n    REQ(n, SYM.decorated);\n    const decoratorSeq = astForDecorators(c, CHILD(n, 0));\n    assert(CHILD(n, 1).type === SYM.funcdef || CHILD(n, 1).type === SYM.classdef);\n\n    let thing: FunctionDef | ClassDef | null = null;\n    if (CHILD(n, 1).type === SYM.funcdef) {\n        thing = astForFuncdef(c, CHILD(n, 1), decoratorSeq);\n    }\n    else if (CHILD(n, 1).type === SYM.classdef) {\n        thing = astForClassdef(c, CHILD(n, 1), decoratorSeq);\n    }\n    else {\n        throw new Error(\"astForDecorated\");\n    }\n    if (thing) {\n        // FIXME: Pass into functions above?\n        // thing.range = n.range;\n    }\n    return thing as (FunctionDef | ClassDef);\n}\n\nfunction astForWithVar(c: Compiling, n: PyNode): Expression {\n    REQ(n, SYM.with_var);\n    return astForExpr(c, CHILD(n, 1));\n}\n\nfunction astForWithStmt(c: Compiling, n: PyNode): WithStatement {\n    /* with_stmt: 'with' test [ with_var ] ':' suite */\n    let suiteIndex = 3; // skip with, test, :\n    assert(n.type === SYM.with_stmt);\n    const contextExpr = astForExpr(c, CHILD(n, 1));\n    let optionalVars: Expression | undefined;\n    if (CHILD(n, 2).type === SYM.with_var) {\n        optionalVars = astForWithVar(c, CHILD(n, 2));\n        setContext(c, optionalVars, Store, n);\n        suiteIndex = 4;\n    }\n    return new WithStatement(contextExpr, optionalVars, astForSuite(c, CHILD(n, suiteIndex)), n.range);\n}\n\nfunction astForExecStmt(c: Compiling, n: PyNode): Exec {\n    let globals: Expression | null = null;\n    let locals: Expression | null = null;\n    const nchildren = NCH(n);\n    assert(nchildren === 2 || nchildren === 4 || nchildren === 6);\n\n    /* exec_stmt: 'exec' expr ['in' test [',' test]] */\n    REQ(n, SYM.exec_stmt);\n    const expr1 = astForExpr(c, CHILD(n, 1));\n    if (nchildren >= 4) {\n        globals = astForExpr(c, CHILD(n, 3));\n    }\n    if (nchildren === 6) {\n        locals = astForExpr(c, CHILD(n, 5));\n    }\n    return new Exec(expr1, globals, locals, n.range);\n}\n\nfunction astForIfStmt(c: Compiling, n: PyNode): IfStatement {\n    /* if_stmt: 'if' test ':' suite ('elif' test ':' suite)*\n        ['else' ':' suite]\n    */\n    REQ(n, SYM.if_stmt);\n    if (NCH(n) === 4)\n        return new IfStatement(\n            astForExpr(c, CHILD(n, 1)),\n            astForSuite(c, CHILD(n, 3)),\n            [], n.range);\n\n    const s = CHILD(n, 4).value;\n    const decider = s.charAt(2); // elSe or elIf\n    if (decider === 's') {\n        return new IfStatement(\n            astForExpr(c, CHILD(n, 1)),\n            astForSuite(c, CHILD(n, 3)),\n            astForSuite(c, CHILD(n, 6)),\n            n.range);\n    }\n    else if (decider === 'i') {\n        let nElif = NCH(n) - 4;\n        let hasElse = false;\n        let orelse: IfStatement[] = [];\n        /* must reference the child nElif+1 since 'else' token is third, not\n            * fourth child from the end. */\n        if (CHILD(n, nElif + 1).type === TOK.T_NAME && CHILD(n, nElif + 1).value.charAt(2) === 's') {\n            hasElse = true;\n            nElif -= 3;\n        }\n        nElif /= 4;\n\n        if (hasElse) {\n            orelse = [\n                new IfStatement(\n                    astForExpr(c, CHILD(n, NCH(n) - 6)),\n                    astForSuite(c, CHILD(n, NCH(n) - 4)),\n                    astForSuite(c, CHILD(n, NCH(n) - 1)),\n                    CHILD(n, NCH(n) - 6).range)];\n            nElif--;\n        }\n\n        for (let i = 0; i < nElif; ++i) {\n            const off = 5 + (nElif - i - 1) * 4;\n            orelse = [\n                new IfStatement(\n                    astForExpr(c, CHILD(n, off)),\n                    astForSuite(c, CHILD(n, off + 2)),\n                    orelse,\n                    CHILD(n, off).range)];\n        }\n        return new IfStatement(\n            astForExpr(c, CHILD(n, 1)),\n            astForSuite(c, CHILD(n, 3)),\n            orelse, n.range);\n    }\n    throw new Error(\"unexpected token in 'if' statement\");\n}\n\nfunction astForExprlist(c: Compiling, n: PyNode, context: Del | Store): Expression[] {\n    REQ(n, SYM.ExprList);\n    const seq: Expression[] = [];\n    for (let i = 0; i < NCH(n); i += 2) {\n        const e = astForExpr(c, CHILD(n, i));\n        seq[i / 2] = e;\n        if (context) setContext(c, e, context, CHILD(n, i));\n    }\n    return seq;\n}\n\nfunction astForDelStmt(c: Compiling, n: PyNode): DeleteStatement {\n    REQ(n, SYM.del_stmt);\n    return new DeleteStatement(astForExprlist(c, CHILD(n, 1), Del), n.range);\n}\n\nfunction astForGlobalStmt(c: Compiling, n: PyNode): Global {\n    REQ(n, SYM.GlobalStmt);\n    const s: string[] = [];\n    for (let i = 1; i < NCH(n); i += 2) {\n        s[(i - 1) / 2] = strobj(CHILD(n, i).value);\n    }\n    return new Global(s, n.range);\n}\n\nfunction astForNonLocalStmt(c: Compiling, n: PyNode): NonLocal {\n    REQ(n, SYM.NonLocalStmt);\n    const s: string[] = [];\n    for (let i = 1; i < NCH(n); i += 2) {\n        s[(i - 1) / 2] = strobj(CHILD(n, i).value);\n    }\n    return new NonLocal(s, n.range);\n}\n\nfunction astForAssertStmt(c: Compiling, n: PyNode): Assert {\n    /* assert_stmt: 'assert' test [',' test] */\n    REQ(n, SYM.assert_stmt);\n    if (NCH(n) === 2) {\n        return new Assert(astForExpr(c, CHILD(n, 1)), null, n.range);\n    }\n    else if (NCH(n) === 4) {\n        return new Assert(astForExpr(c, CHILD(n, 1)), astForExpr(c, CHILD(n, 3)), n.range);\n    }\n    throw new Error(\"improper number of parts to assert stmt\");\n}\n\nfunction aliasForImportName(c: Compiling, n: PyNode): Alias {\n    /*\n        ImportSpecifier: NAME ['as' NAME]\n        dotted_as_name: dotted_name ['as' NAME]\n        dotted_name: NAME ('.' NAME)*\n    */\n\n    loop: while (true) {\n        switch (n.type) {\n            case SYM.ImportSpecifier: {\n                let str: string = null;\n                const nameNode = CHILD(n, 0);\n                const name = strobj(nameNode.value);\n                const nameRange = nameNode.range;\n                if (NCH(n) === 3) {\n                    str = CHILD(n, 2).value;\n                }\n                return new Alias(new RangeAnnotated(name, nameRange), str == null ? null : strobj(str));\n            }\n            case SYM.dotted_as_name:\n                if (NCH(n) === 1) {\n                    n = CHILD(n, 0);\n                    continue loop;\n                }\n                else {\n                    const a = aliasForImportName(c, CHILD(n, 0));\n                    assert(!a.asname);\n                    a.asname = strobj(CHILD(n, 2).value);\n                    return a;\n                }\n            case SYM.dotted_name:\n                if (NCH(n) === 1) {\n                    const nameNode = CHILD(n, 0);\n                    const name = strobj(nameNode.value);\n                    const nameRange = nameNode.range;\n                    return new Alias(new RangeAnnotated(name, nameRange), null);\n                }\n                else {\n                    // create a string of the form a.b.c\n                    let str = '';\n                    for (let i = 0; i < NCH(n); i += 2) {\n                        str += CHILD(n, i).value + \".\";\n                    }\n                    return new Alias(new RangeAnnotated(str.substr(0, str.length - 1), null), null);\n                }\n            case TOK.T_STAR: {\n                return new Alias(new RangeAnnotated(\"*\", n.range), null);\n            }\n            case TOK.T_NAME: {\n                // Temporary.\n                return new Alias(new RangeAnnotated(n.value, n.range), null);\n            }\n            default: {\n                throw syntaxError(`unexpected import name ${grammarName(n.type)}`, n.range);\n            }\n        }\n    }\n}\n\nfunction parseModuleSpecifier(c: Compiling, moduleSpecifierNode: PyNode): { value: string; range: Range } {\n    REQ(moduleSpecifierNode, SYM.ModuleSpecifier);\n    const N = NCH(moduleSpecifierNode);\n    let ret = \"\";\n    let range: Range;\n    for (let i = 0; i < N; ++i) {\n        const child = CHILD(moduleSpecifierNode, i);\n        ret = ret + parsestr(c, child.value);\n        range = child.range;\n    }\n    return { value: ret, range };\n\n}\n\nfunction astForImportStmt(c: Compiling, importStatementNode: PyNode): ImportStatement | ImportFrom {\n    REQ(importStatementNode, SYM.import_stmt);\n    let nameOrFrom = CHILD(importStatementNode, 0);\n    if (nameOrFrom.type === SYM.import_name) {\n        const n = CHILD(nameOrFrom, 1);\n        REQ(n, SYM.dotted_as_names);\n        const aliases = [];\n        for (let i = 0; i < NCH(n); i += 2) {\n            aliases[i / 2] = aliasForImportName(c, CHILD(n, i));\n        }\n        return new ImportStatement(aliases, importStatementNode.range);\n    }\n    else if (nameOrFrom.type === SYM.import_from) {\n        // let mod: Alias = null;\n        let moduleSpec: { value: string; range: Range };\n        let ndots = 0;\n        let nchildren: number;\n        let idx: number;\n        for (idx = 1; idx < NCH(nameOrFrom); ++idx) {\n            const child = CHILD(nameOrFrom, idx);\n            const childType = child.type;\n            if (childType === SYM.dotted_name) {\n                // This should be dead code since we support ECMAScript 2015 modules.\n                throw syntaxError(`unknown import statement ${grammarName(childType)}.`, child.range);\n                // mod = aliasForImportName(c, child);\n                // idx++;\n                // break;\n            }\n            else if (childType === SYM.ModuleSpecifier) {\n                moduleSpec = parseModuleSpecifier(c, child);\n                break;\n            }\n            else if (childType !== TOK.T_DOT) {\n                // Let's be more specific...\n                throw syntaxError(`unknown import statement ${grammarName(childType)}.`, child.range);\n                // break;\n            }\n            ndots++;\n        }\n        ++idx; // skip the import keyword\n        let n = nameOrFrom;\n        switch (CHILD(nameOrFrom, idx).type) {\n            case TOK.T_STAR: {\n                // from ... import\n                n = CHILD(nameOrFrom, idx);\n                nchildren = 1;\n                break;\n            }\n            case TOK.T_LPAR: {\n                // from ... import (x, y, z)\n                n = CHILD(n, idx + 1);\n                nchildren = NCH(n);\n                break;\n            }\n            case SYM.ImportList: {\n                // from ... import x, y, z\n                n = CHILD(n, idx);\n                nchildren = NCH(n);\n                if (nchildren % 2 === 0) {\n                    throw syntaxError(\"trailing comma not allowed without surrounding parentheses\", n.range);\n                }\n            }\n        }\n        const aliases: Alias[] = [];\n        if (n.type === TOK.T_STAR) {\n            aliases[0] = aliasForImportName(c, n);\n        }\n        else {\n            REQ(n, SYM.import_from);\n            const importListNode = CHILD(n, FIND(n, SYM.ImportList));\n            astForImportList(c, importListNode, aliases);\n        }\n        // moduleName = mod ? mod.name : moduleName;\n        assert(typeof moduleSpec.value === 'string');\n        return new ImportFrom(new RangeAnnotated(moduleSpec.value, moduleSpec.range), aliases, ndots, importStatementNode.range);\n    }\n    else {\n        throw syntaxError(`unknown import statement ${grammarName(nameOrFrom.type)}.`, nameOrFrom.range);\n    }\n}\n\nfunction astForImportList(c: Compiling, importListNode: PyNode, aliases: Alias[]): void {\n    REQ(importListNode, SYM.ImportList);\n    const N = NCH(importListNode);\n    for (let i = 0; i < N; i++) {\n        const child = CHILD(importListNode, i);\n        if (child.type === SYM.ImportSpecifier) {\n            aliases.push(aliasForImportName(c, child));\n        }\n    }\n}\n\nfunction astForTestlistGexp(c: Compiling, n: PyNode): Expression | Tuple {\n    assert(n.type === SYM.testlist_gexp || n.type === SYM.argument);\n    if (NCH(n) > 1 && CHILD(n, 1).type === SYM.gen_for)\n        return astForGenexp(c, n);\n    return astForTestlist(c, n);\n}\n\nfunction astForListcomp(c: Compiling, n: PyNode): ListComp {\n    function countListFors(c: Compiling, n: PyNode): number {\n        let nfors = 0;\n        let ch = CHILD(n, 1);\n        count_list_for: while (true) {\n            nfors++;\n            REQ(ch, SYM.list_for);\n            if (NCH(ch) === 5)\n                ch = CHILD(ch, 4);\n            else\n                return nfors;\n            count_list_iter: while (true) {\n                REQ(ch, SYM.list_iter);\n                ch = CHILD(ch, 0);\n                if (ch.type === SYM.list_for)\n                    continue count_list_for;\n                else if (ch.type === SYM.list_if) {\n                    if (NCH(ch) === 3) {\n                        ch = CHILD(ch, 2);\n                        continue count_list_iter;\n                    }\n                    else\n                        return nfors;\n                }\n                break;\n            }\n            // FIXME: What does a break at the end of a function do?\n            break;\n        }\n        throw new Error(\"TODO: Should this be returning void 0?\");\n    }\n\n    function countListIfs(c: Compiling, n: PyNode): number {\n        let nifs = 0;\n        while (true) {\n            REQ(n, SYM.list_iter);\n            if (CHILD(n, 0).type === SYM.list_for)\n                return nifs;\n            n = CHILD(n, 0);\n            REQ(n, SYM.list_if);\n            nifs++;\n            if (NCH(n) === 2)\n                return nifs;\n            n = CHILD(n, 2);\n        }\n    }\n\n    REQ(n, SYM.listmaker);\n    assert(NCH(n) > 1);\n    const elt = astForExpr(c, CHILD(n, 0));\n    const nfors = countListFors(c, n);\n    const listcomps: Comprehension[] = [];\n    let ch = CHILD(n, 1);\n    for (let i = 0; i < nfors; ++i) {\n        REQ(ch, SYM.list_for);\n        const forch = CHILD(ch, 1);\n        const t = astForExprlist(c, forch, Store);\n        const expression = astForTestlist(c, CHILD(ch, 3));\n        let lc: Comprehension;\n        if (NCH(forch) === 1)\n            lc = new Comprehension(t[0], expression, []);\n        else\n            lc = new Comprehension(new Tuple(t, Store, ch.range), expression, []);\n\n        if (NCH(ch) === 5) {\n            ch = CHILD(ch, 4);\n            const nifs = countListIfs(c, ch);\n            const ifs: Expression[] = [];\n            for (let j = 0; j < nifs; ++j) {\n                REQ(ch, SYM.list_iter);\n                ch = CHILD(ch, 0);\n                REQ(ch, SYM.list_if);\n                ifs[j] = astForExpr(c, CHILD(ch, 1));\n                if (NCH(ch) === 3)\n                    ch = CHILD(ch, 2);\n            }\n            if (ch.type === SYM.list_iter)\n                ch = CHILD(ch, 0);\n            lc.ifs = ifs;\n        }\n        listcomps[i] = lc;\n    }\n    return new ListComp(elt, listcomps, n.range);\n}\n\nfunction astForUnaryExpr(c: Compiling, n: PyNode): Expression {\n    if (CHILD(n, 0).type === TOK.T_MINUS && NCH(n) === 2) {\n        const pfactor = CHILD(n, 1);\n        if (pfactor.type === SYM.UnaryExpr && NCH(pfactor) === 1) {\n            const ppower = CHILD(pfactor, 0);\n            if (ppower.type === SYM.PowerExpr && NCH(ppower) === 1) {\n                const patom = CHILD(ppower, 0);\n                if (patom.type === SYM.AtomExpr) {\n                    const pnum = CHILD(patom, 0);\n                    if (pnum.type === TOK.T_NUMBER) {\n                        pnum.value = \"-\" + pnum.value;\n                        return astForAtomExpr(c, patom);\n                    }\n                }\n            }\n        }\n    }\n\n    const expression = astForExpr(c, CHILD(n, 1));\n    switch (CHILD(n, 0).type) {\n        case TOK.T_PLUS: return new UnaryOp(UAdd, expression, n.range);\n        case TOK.T_MINUS: return new UnaryOp(USub, expression, n.range);\n        case TOK.T_TILDE: return new UnaryOp(Invert, expression, n.range);\n    }\n\n    throw new Error(\"unhandled UnaryExpr\");\n}\n\nfunction astForForStmt(c: Compiling, n: PyNode): ForStatement {\n    let seq: Statement[] = [];\n    REQ(n, SYM.for_stmt);\n    if (NCH(n) === 9) {\n        seq = astForSuite(c, CHILD(n, 8));\n    }\n    const nodeTarget = CHILD(n, 1);\n    const _target = astForExprlist(c, nodeTarget, Store);\n    let target;\n    if (NCH(nodeTarget) === 1)\n        target = _target[0];\n    else\n        target = new Tuple(_target, Store, n.range);\n\n    return new ForStatement(target,\n        astForTestlist(c, CHILD(n, 3)),\n        astForSuite(c, CHILD(n, 5)),\n        seq, n.range);\n}\n\nfunction astForCall(c: Compiling, n: PyNode, func: Expression): Call {\n    /*\n        arglist: (argument ',')* (argument [',']| '*' test [',' '**' test]\n                | '**' test)\n        argument: [test '='] test [gen_for]        # Really [keyword '='] test\n    */\n    REQ(n, SYM.arglist);\n    let nargs = 0;\n    let nkeywords = 0;\n    let ngens = 0;\n    for (let i = 0; i < NCH(n); ++i) {\n        const ch = CHILD(n, i);\n        if (ch.type === SYM.argument) {\n            if (NCH(ch) === 1) nargs++;\n            else if (CHILD(ch, 1).type === SYM.gen_for) ngens++;\n            else nkeywords++;\n        }\n    }\n    if (ngens > 1 || (ngens && (nargs || nkeywords)))\n        throw syntaxError(\"Generator expression must be parenthesized if not sole argument\", n.range);\n    if (nargs + nkeywords + ngens > 255)\n        throw syntaxError(\"more than 255 arguments\", n.range);\n    const args: Expression[] = [];\n    const keywords: Keyword[] = [];\n    nargs = 0;\n    nkeywords = 0;\n    let vararg: Expression = null;\n    let kwarg: Expression = null;\n    for (let i = 0; i < NCH(n); ++i) {\n        const ch = CHILD(n, i);\n        if (ch.type === SYM.argument) {\n            if (NCH(ch) === 1) {\n                if (nkeywords) throw syntaxError(\"non-keyword arg after keyword arg\", n.range);\n                if (vararg) throw syntaxError(\"only named arguments may follow *expression\", n.range);\n                args[nargs++] = astForExpr(c, CHILD(ch, 0));\n            }\n            else if (CHILD(ch, 1).type === SYM.gen_for)\n                args[nargs++] = astForGenexp(c, ch);\n            else {\n                const e = astForExpr(c, CHILD(ch, 0));\n                if (e.constructor === Lambda) {\n                    throw syntaxError(\"lambda cannot contain assignment\", n.range);\n                } else if (e.constructor !== Name) {\n                    throw syntaxError(\"keyword can't be an expression\", n.range);\n                }\n                // TODO: Why does TypeScript think that the type is never?\n                const key = (e as Expression).id;\n                forbiddenCheck(c, CHILD(ch, 0), key.value, n.range);\n                for (let k = 0; k < nkeywords; ++k) {\n                    const tmp = keywords[k].arg.value;\n                    if (tmp === key.value) throw syntaxError(\"keyword argument repeated\", n.range);\n                }\n                keywords[nkeywords++] = new Keyword(key, astForExpr(c, CHILD(ch, 2)));\n            }\n        }\n        else if (ch.type === TOK.T_STAR)\n            vararg = astForExpr(c, CHILD(n, ++i));\n        else if (ch.type === TOK.T_DOUBLESTAR)\n            kwarg = astForExpr(c, CHILD(n, ++i));\n    }\n    // Convert keywords to a Dict, which is one arg\n    const keywordDict = keywordsToDict(keywords);\n    if (keywordDict.keys.length !== 0) {\n        args.push(keywordDict);\n    }\n    return new Call(func, args, [], vararg, kwarg);\n}\n\nfunction keywordsToDict(keywords: Keyword[]): Dict {\n    let keys: Expression[] = [];\n    let values: Expression[] = [];\n    for (const keyword of keywords) {\n        values.push(keyword.value);\n        keys.push(new Name(new RangeAnnotated(keyword.arg.value, keyword.arg.range), Load));\n    }\n    return new Dict(keys, values);\n}\n\nfunction astForTrailer(c: Compiling, node: PyNode, leftExpr: Expression): Attribute | Call | Subscript {\n    /* trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME\n        subscriptlist: subscript (',' subscript)* [',']\n        subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]\n        */\n\n    const n = node;\n    const childZero = CHILD(n, 0);\n    const childOne = CHILD(n, 1);\n    const childTwo = CHILD(n, 2);\n    REQ(n, SYM.trailer);\n    if (childZero.type === TOK.T_LPAR) {\n        if (NCH(n) === 2) {\n            return new Call(leftExpr, [], [], null, null);\n        }\n        else {\n            return astForCall(c, childOne, leftExpr);\n        }\n    }\n    else if (childZero.type === TOK.T_DOT) {\n        return new Attribute(leftExpr, new RangeAnnotated(childOne.value, childOne.range), Load, n.range);\n    }\n    else {\n        REQ(childZero, TOK.T_LSQB);\n        REQ(childTwo, TOK.T_RSQB);\n        const n = childOne;\n        if (NCH(n) === 1)\n            return new Subscript(leftExpr, astForSlice(c, CHILD(n, 0)), Load, n.range);\n        else {\n            /* The grammar is ambiguous here. The ambiguity is resolved\n                by treating the sequence as a tuple literal if there are\n                no slice features.\n            */\n            let simple = true;\n            const slices: (Ellipsis | Index | Name | Slice)[] = [];\n            for (let j = 0; j < NCH(n); j += 2) {\n                const slc = astForSlice(c, CHILD(n, j));\n                if (slc.constructor !== Index) {\n                    simple = false;\n                }\n                slices[j / 2] = slc;\n            }\n            if (!simple) {\n                return new Subscript(leftExpr, new ExtSlice(slices), Load, n.range);\n            }\n            const elts: Tuple[] = [];\n            for (let j = 0; j < slices.length; ++j) {\n                let slc = slices[j];\n                if (slc instanceof Index) {\n                    assert(slc.value !== null && slc.value !== undefined);\n                    elts[j] = slc.value;\n                }\n                else {\n                    assert(slc instanceof Index);\n                }\n            }\n            const e = new Tuple(elts, Load, n.range);\n            return new Subscript(leftExpr, new Index(e), Load, n.range);\n        }\n    }\n}\n\nfunction astForFlowStmt(c: Compiling, n: PyNode): BreakStatement | ExpressionStatement | Raise {\n    REQ(n, SYM.flow_stmt);\n    const ch = CHILD(n, 0);\n    switch (ch.type) {\n        case SYM.break_stmt: return new BreakStatement(n.range);\n        case SYM.continue_stmt: return new ContinueStatement(n.range);\n        case SYM.yield_stmt:\n            return new ExpressionStatement(astForExpr(c, CHILD(ch, 0)), n.range);\n        case SYM.return_stmt:\n            if (NCH(ch) === 1)\n                return new ReturnStatement(null, n.range);\n            else\n                return new ReturnStatement(astForTestlist(c, CHILD(ch, 1)), n.range);\n        case SYM.raise_stmt: {\n            if (NCH(ch) === 1)\n                return new Raise(null, null, null, n.range);\n            else if (NCH(ch) === 2)\n                return new Raise(astForExpr(c, CHILD(ch, 1)), null, null, n.range);\n            else if (NCH(ch) === 4)\n                return new Raise(\n                    astForExpr(c, CHILD(ch, 1)),\n                    astForExpr(c, CHILD(ch, 3)),\n                    null, n.range);\n            else if (NCH(ch) === 6)\n                return new Raise(\n                    astForExpr(c, CHILD(ch, 1)),\n                    astForExpr(c, CHILD(ch, 3)),\n                    astForExpr(c, CHILD(ch, 5)),\n                    n.range);\n            else {\n                throw new Error(\"unhandled flow statement\");\n            }\n        }\n        default: {\n            throw new Error(\"unexpected flow_stmt\");\n        }\n    }\n}\n\nfunction astForArguments(c: Compiling, n: PyNode): Arguments {\n    /* parameters: '(' [varargslist] ')'\n        varargslist: (fpdef ['=' test] ',')* ('*' NAME [',' '**' NAME]\n            | '**' NAME) | fpdef ['=' test] (',' fpdef ['=' test])* [',']\n    */\n    let ch: PyNode;\n    let vararg: string = null;\n    let kwarg: string = null;\n    if (n.type === SYM.parameters) {\n        if (NCH(n) === 2) // () as arglist\n            return new Arguments([], null, null, []);\n        n = CHILD(n, 1); // n is a varargslist here on out\n    }\n    REQ(n, SYM.varargslist);\n\n    const args: FunctionParamDef[] = [];\n    const defaults: Expression[] = [];\n\n    /* fpdef: NAME [':' IfExpr] | '(' fplist ')'\n        fplist: fpdef (',' fpdef)* [',']\n    */\n    let foundDefault = false;\n    let i = 0;\n    let j = 0; // index for defaults\n    let k = 0; // index for args\n    // loop through the children of the varargslist\n    while (i < NCH(n)) {\n        ch = CHILD(n, i);\n        switch (ch.type) {\n            // If it is a fpdef - act here\n            case SYM.fpdef:\n                let complexArgs = 0;\n                let parenthesized = false;\n                handle_fpdef: while (true) {\n                    if (i + 1 < NCH(n) && CHILD(n, i + 1).type === TOK.T_EQUAL) {\n                        defaults[j++] = astForExpr(c, CHILD(n, i + 2));\n                        i += 2;\n                        foundDefault = true;\n                    }\n                    else if (foundDefault) {\n                        /* def f((x)=4): pass should raise an error.\n                            def f((x, (y))): pass will just incur the tuple unpacking warning. */\n                        if (parenthesized && !complexArgs)\n                            throw syntaxError(\"parenthesized arg with default\", n.range);\n                        throw syntaxError(\"non-default argument follows default argument\", n.range);\n                    }\n\n                    // For unpacking a tuple\n                    if (NCH(ch) === 3 && ch.children[2].type === TOK.T_RPAR) {\n                        ch = CHILD(ch, 1);\n                        // def foo((x)): is not complex, special case.\n                        if (NCH(ch) !== 1) {\n                            throw syntaxError(\"tuple parameter unpacking has been removed\", n.range);\n                        }\n                        else {\n                            /* def foo((x)): setup for checking NAME below. */\n                            /* Loop because there can be many parens and tuple\n                                unpacking mixed in. */\n                            parenthesized = true;\n                            ch = CHILD(ch, 0);\n                            assert(ch.type === SYM.fpdef);\n                            continue handle_fpdef;\n                        }\n                    }\n                    // childzero here is possibly the 'NAME' in fpdef: NAME [':' IfExpr]\n                    const childZero = CHILD(ch, 0);\n                    if (childZero.type === TOK.T_NAME) {\n                        forbiddenCheck(c, n, childZero.value, n.range);\n                        const id = new RangeAnnotated(childZero.value, childZero.range);\n                        /**\n                         * Setting the type of the param here, will be third child of fpdef if it exists\n                         * If it doesn't exist then set the type as null and have typescript attempt to infer it later\n                         */\n                        const paramTypeNode: PyNode = CHILD(ch, 2);\n\n                        if (paramTypeNode) {\n                            let paramTypeExpr = astForExpr(c, paramTypeNode);\n                            args[k++] = new FunctionParamDef(new Name(id, Param), paramTypeExpr);\n                        }\n                        else {\n                            args[k++] = new FunctionParamDef(new Name(id, Param));\n                        }\n\n                    }\n                    i += 2;\n                    if (parenthesized)\n                        throw syntaxError(\"parenthesized argument names are invalid\", n.range);\n                    break;\n                }\n                break;\n            case TOK.T_STAR:\n                forbiddenCheck(c, CHILD(n, i + 1), CHILD(n, i + 1).value, n.range);\n                vararg = strobj(CHILD(n, i + 1).value);\n                i += 3;\n                break;\n            case TOK.T_DOUBLESTAR:\n                forbiddenCheck(c, CHILD(n, i + 1), CHILD(n, i + 1).value, n.range);\n                kwarg = strobj(CHILD(n, i + 1).value);\n                i += 3;\n                break;\n            default: {\n                throw new Error(\"unexpected node in varargslist\");\n            }\n        }\n    }\n    return new Arguments(args, vararg, kwarg, defaults);\n}\n\nfunction astForFuncdef(c: Compiling, n: PyNode, decoratorSeq: (Attribute | Call | Name)[]): FunctionDef {\n    /**\n     * funcdef: ['export'] def' NAME parameters ['->' IfExpr] ':' suite\n     */\n    REQ(n, SYM.funcdef);\n    const numberOfChildren: number = NCH(n);\n    let ch1: PyNode;\n    let name: string;\n    let args: Arguments;\n    // Name and args are 1 node further if 'export' exists\n    if (numberOfChildren !== 8 && numberOfChildren !== 6) {\n        ch1 = CHILD(n, 1);\n        name = strobj(ch1.value);\n        forbiddenCheck(c, ch1, name, n.range);\n        args = astForArguments(c, CHILD(n, 2));\n    }\n    else {\n        ch1 = CHILD(n, 2);\n        name = strobj(ch1.value);\n        forbiddenCheck(c, ch1, name, n.range);\n        args = astForArguments(c, CHILD(n, 3));\n    }\n\n    // suite is either 4, 6 or 7, depending on whether functype exists\n    let body: Statement[];\n    let returnType: Expression;\n\n    // Neither Export nor FuncType exist\n    if (numberOfChildren === 5) {\n        body = astForSuite(c, CHILD(n, 4));\n        returnType = null;\n    }\n    // Only Export exists\n    else if (numberOfChildren === 6) {\n        body = astForSuite(c, CHILD(n, 5));\n        returnType = null;\n    }\n    // Only FuncType exists\n    else if (numberOfChildren === 7) {\n        returnType = astForExpr(c, CHILD(n, 4));\n        body = astForSuite(c, CHILD(n, 6));\n    }\n    // Export AND FuncType exist\n    else if (numberOfChildren === 8) {\n        returnType = astForExpr(c, CHILD(n, 5));\n        body = astForSuite(c, CHILD(n, 7));\n    }\n    else {\n        fail(`Was expecting 5, 7 or 8 children, received ${numberOfChildren} children`);\n    }\n\n    return new FunctionDef(new RangeAnnotated(name, ch1.range), args, body, returnType, decoratorSeq, n.range);\n}\n\nfunction astForClassBases(c: Compiling, n: PyNode): Expression[] {\n    const numberOfChildren = NCH(n);\n    assert(numberOfChildren > 0);\n    REQ(n, SYM.testlist);\n    if (numberOfChildren === 1) {\n        return [astForExpr(c, CHILD(n, 0))];\n    }\n    return seqForTestlist(c, n);\n}\n\nfunction astForClassdef(c: Compiling, node: PyNode, decoratorSeq: (Attribute | Call | Name)[]) {\n    /**\n     * ['export'] 'class' NAME ['(' [testlist] ')'] ':' suite\n     */\n    const n = node;\n    const numberOfChildren = NCH(n);\n    REQ(n, SYM.classdef);\n    let nameNode;\n    let className;\n    let nameRange;\n    if (numberOfChildren !== 5 && numberOfChildren !== 8) {\n        if (numberOfChildren !== 7 || CHILD(n, 4).type !== TOK.T_RPAR) {\n            nameNode = CHILD(n, 1);\n            forbiddenCheck(c, n, nameNode.value, n.range);\n            className = strobj(nameNode.value);\n            nameRange = nameNode.range;\n        }\n\n    }\n    else {\n        nameNode = CHILD(n, 2);\n        forbiddenCheck(c, n, nameNode.value, n.range);\n        className = strobj(nameNode.value);\n        nameRange = nameNode.range;\n    }\n\n    // If grammar looks like 'class NAME : suite'\n    if (numberOfChildren === 4) {\n        return new ClassDef(new RangeAnnotated(className, nameRange), [], astForSuite(c, CHILD(n, 3)), decoratorSeq, n.range);\n    }\n    // If grammar looks like 'export class NAME : suite'\n    if (numberOfChildren === 5) {\n        // temp\n    }\n    // If grammar looks like 'export class NAME '(' ')' : suite'\n    if (numberOfChildren === 7 && CHILD(n, 3).type !== TOK.T_RPAR) {\n        // temp\n    }\n    // If grammar looks like 'export class NAME '(' testlist ')' : suite '\n    if (numberOfChildren === 8) {\n        // temp\n    }\n    const c3 = CHILD(n, 3);\n    // If grammar looks like 'class NAME '(' ')' : suite'\n    if (c3.type === TOK.T_RPAR) {\n        return new ClassDef(new RangeAnnotated(className, nameRange), [], astForSuite(c, CHILD(n, 5)), decoratorSeq, n.range);\n    }\n    // Otherwise grammar looks like 'class NAME '(' testlist ')' : suite'\n    // ClassBases are 'testlist'\n    const bases = astForClassBases(c, c3);\n    const s = astForSuite(c, CHILD(n, 6));\n    return new ClassDef(new RangeAnnotated(className, nameRange), bases, s, decoratorSeq, n.range);\n}\n\nfunction astForLambdef(c: Compiling, n: PyNode): Lambda {\n    let args: Arguments;\n    let expression: Expression;\n    if (NCH(n) === 3) {\n        args = new Arguments([], null, null, []);\n        expression = astForExpr(c, CHILD(n, 2));\n    }\n    else {\n        args = astForArguments(c, CHILD(n, 1));\n        expression = astForExpr(c, CHILD(n, 3));\n    }\n    return new Lambda(args, expression, n.range);\n}\n\nfunction astForGenexp(c: Compiling, n: PyNode): GeneratorExp {\n    /* testlist_gexp: test ( gen_for | (',' test)* [','] )\n        argument: [test '='] test [gen_for]       # Really [keyword '='] test */\n    assert(n.type === SYM.testlist_gexp || n.type === SYM.argument);\n    assert(NCH(n) > 1);\n\n    function countGenFors(c: Compiling, n: PyNode): number {\n        let nfors = 0;\n        let ch = CHILD(n, 1);\n        count_gen_for: while (true) {\n            nfors++;\n            REQ(ch, SYM.gen_for);\n            if (NCH(ch) === 5)\n                ch = CHILD(ch, 4);\n            else\n                return nfors;\n            count_gen_iter: while (true) {\n                REQ(ch, SYM.gen_iter);\n                ch = CHILD(ch, 0);\n                if (ch.type === SYM.gen_for)\n                    continue count_gen_for;\n                else if (ch.type === SYM.gen_if) {\n                    if (NCH(ch) === 3) {\n                        ch = CHILD(ch, 2);\n                        continue count_gen_iter;\n                    }\n                    else\n                        return nfors;\n                }\n                break;\n            }\n            break;\n        }\n        throw new Error(\"logic error in countGenFors\");\n    }\n\n    function countGenIfs(c: Compiling, n: PyNode): number {\n        let nifs = 0;\n        while (true) {\n            REQ(n, SYM.gen_iter);\n            if (CHILD(n, 0).type === SYM.gen_for)\n                return nifs;\n            n = CHILD(n, 0);\n            REQ(n, SYM.gen_if);\n            nifs++;\n            if (NCH(n) === 2)\n                return nifs;\n            n = CHILD(n, 2);\n        }\n    }\n\n    const elt = astForExpr(c, CHILD(n, 0));\n    const nfors = countGenFors(c, n);\n    const genexps: Comprehension[] = [];\n    let ch = CHILD(n, 1);\n    for (let i = 0; i < nfors; ++i) {\n        REQ(ch, SYM.gen_for);\n        const forch = CHILD(ch, 1);\n        const t = astForExprlist(c, forch, Store);\n        let expression = astForExpr(c, CHILD(ch, 3));\n        let ge: Comprehension;\n        if (NCH(forch) === 1)\n            ge = new Comprehension(t[0], expression, []);\n        else\n            ge = new Comprehension(new Tuple(t, Store, ch.range), expression, []);\n        if (NCH(ch) === 5) {\n            ch = CHILD(ch, 4);\n            const nifs = countGenIfs(c, ch);\n            const ifs: Expression[] = [];\n            for (let j = 0; j < nifs; ++j) {\n                REQ(ch, SYM.gen_iter);\n                ch = CHILD(ch, 0);\n                REQ(ch, SYM.gen_if);\n                expression = astForExpr(c, CHILD(ch, 1));\n                ifs[j] = expression;\n                if (NCH(ch) === 3)\n                    ch = CHILD(ch, 2);\n            }\n            if (ch.type === SYM.gen_iter)\n                ch = CHILD(ch, 0);\n            ge.ifs = ifs;\n        }\n        genexps[i] = ge;\n    }\n    return new GeneratorExp(elt, genexps, n.range);\n}\n\nfunction astForWhileStmt(c: Compiling, n: PyNode): WhileStatement {\n    /* while_stmt: 'while' test ':' suite ['else' ':' suite] */\n    REQ(n, SYM.while_stmt);\n    if (NCH(n) === 4)\n        return new WhileStatement(astForExpr(c, CHILD(n, 1)), astForSuite(c, CHILD(n, 3)), [], n.range);\n    else if (NCH(n) === 7)\n        return new WhileStatement(astForExpr(c, CHILD(n, 1)), astForSuite(c, CHILD(n, 3)), astForSuite(c, CHILD(n, 6)), n.range);\n    throw new Error(\"wrong number of tokens for 'while' stmt\");\n}\n\nfunction astForAugassign(c: Compiling, n: PyNode): Add | Sub | FloorDiv | Div | Mod | LShift | RShift | BitAnd | BitXor | BitOr | Pow | Mult {\n    REQ(n, SYM.augassign);\n    n = CHILD(n, 0);\n    switch (n.value.charAt(0)) {\n        case '+': return Add;\n        case '-': return Sub;\n        case '/': {\n            if (n.value.charAt(1) === '/') {\n                return FloorDiv;\n            } else {\n                return Div;\n            }\n        }\n        case '%': return Mod;\n        case '<': return LShift;\n        case '>': return RShift;\n        case '&': return BitAnd;\n        case '^': return BitXor;\n        case '|': return BitOr;\n        case '*': {\n            if (n.value.charAt(1) === '*') {\n                return Pow;\n            }\n            else {\n                return Mult;\n            }\n        }\n        default: {\n            throw new Error(\"invalid augassign\");\n        }\n    }\n}\n\nfunction astForBinop(c: Compiling, n: PyNode): BinOp {\n    /* Must account for a sequence of expressions.\n        How should A op B op C by represented?\n        BinOp(BinOp(A, op, B), op, C).\n    */\n    let result = new BinOp(astForExpr(c, CHILD(n, 0)), getOperator(CHILD(n, 1)), astForExpr(c, CHILD(n, 2)), n.range);\n    const nops = (NCH(n) - 1) / 2;\n    for (let i = 1; i < nops; ++i) {\n        const nextOper = CHILD(n, i * 2 + 1);\n        const tmp = astForExpr(c, CHILD(n, i * 2 + 2));\n        result = new BinOp(result, getOperator(nextOper), tmp, nextOper.range);\n    }\n    return result;\n\n}\n\nfunction astForTestlist(c: Compiling, n: PyNode): Expression | Tuple {\n    /* testlist_gexp: test (',' test)* [','] */\n    /* testlist: test (',' test)* [','] */\n    /* testlist_safe: test (',' test)+ [','] */\n    /* testlist1: test (',' test)* */\n    assert(NCH(n) > 0);\n    if (n.type === SYM.testlist_gexp) {\n        if (NCH(n) > 1) {\n            assert(CHILD(n, 1).type !== SYM.gen_for);\n        }\n    }\n    else {\n        assert(n.type === SYM.testlist || n.type === SYM.testlist_safe || n.type === SYM.testlist1);\n    }\n\n    if (NCH(n) === 1) {\n        return astForExpr(c, CHILD(n, 0));\n    }\n    else {\n        return new Tuple(seqForTestlist(c, n), Load, n.range);\n    }\n\n}\n\nfunction astForExprStmt(c: Compiling, node: PyNode): Assign | ExpressionStatement {\n    // Prevent assignment.\n    const n = node;\n    REQ(n, SYM.ExprStmt);\n    if (NCH(n) === 1) {\n        return new ExpressionStatement(astForTestlist(c, CHILD(n, 0)), n.range);\n    }\n    else if (CHILD(n, 1).type === SYM.augassign) {\n        let ch = CHILD(n, 0);\n        const expr1 = astForTestlist(c, ch);\n        switch (expr1.constructor) {\n            case GeneratorExp: throw syntaxError(\"augmented assignment to generator expression not possible\", n.range);\n            case Yield: throw syntaxError(\"augmented assignment to yield expression not possible\", n.range);\n            case Name: {\n                const varName = expr1.id;\n                forbiddenCheck(c, ch, varName.value, n.range);\n\n                break;\n            }\n            case Attribute:\n            case Subscript:\n                break;\n            default:\n                throw syntaxError(\"illegal expression for augmented assignment\", n.range);\n        }\n        setContext(c, expr1, Store, ch);\n\n        ch = CHILD(n, 2);\n        let expr2: Expression;\n        if (ch.type === SYM.testlist) {\n            expr2 = astForTestlist(c, ch);\n        }\n        else\n            expr2 = astForExpr(c, ch);\n\n        return new AugAssign(expr1, astForAugassign(c, CHILD(n, 1)), expr2, n.range);\n    }\n    else if (CHILD(n, 1).type === SYM.annasign) {\n        // annasign\n        // ':' 'IfExpr' ['=' 'IfExpr]\n        const ch = CHILD(n, 0);\n        const annasignChild = CHILD(n, 1);\n        const type: Expression = astForExpr(c, CHILD(annasignChild, 1));\n        const eq = CHILD(annasignChild, 2); // Equals sign\n        if (eq) {\n            REQ(eq, TOK.T_EQUAL);\n            const variable: Expression[] = [astForTestlist(c, ch)]; // variable is the first node (before the annasign)\n            const valueNode = CHILD(annasignChild, 3);\n            let value: Expression;\n            if (valueNode.type === SYM.testlist) {\n                value = astForTestlist(c, valueNode);\n            }\n            else {\n                value = astForExpr(c, valueNode);\n            }\n            return new Assign(variable, value, n.range, eq.range, type);\n        }\n        else {\n            return new AnnAssign(type, astForTestlist(c, ch), n.range);\n        }\n    }\n    else {\n        // normal assignment\n        const eq = CHILD(n, 1);\n        REQ(eq, TOK.T_EQUAL);\n        const targets: Expression[] = [];\n        const N = NCH(n);\n        for (let i = 0; i < N - 2; i += 2) {\n            const ch = CHILD(n, i);\n            if (ch.type === SYM.YieldExpr) throw syntaxError(\"assignment to yield expression not possible\", n.range);\n            const e = astForTestlist(c, ch);\n            setContext(c, e, Store, CHILD(n, i));\n            targets[i / 2] = e;\n        }\n        const value = CHILD(n, N - 1);\n        let expression: Expression;\n        if (value.type === SYM.testlist)\n            expression = astForTestlist(c, value);\n        else\n            expression = astForExpr(c, value);\n        return new Assign(targets, expression, n.range, eq.range);\n    }\n}\n\nfunction astForIfexpr(c: Compiling, n: PyNode): IfExp {\n    assert(NCH(n) === 5);\n    return new IfExp(\n        astForExpr(c, CHILD(n, 2)),\n        astForExpr(c, CHILD(n, 0)),\n        astForExpr(c, CHILD(n, 4)),\n        n.range);\n}\n\n// escape() was deprecated in JavaScript 1.5. Use encodeURI or encodeURIComponent instead.\nfunction escape(s: string): string {\n    return encodeURIComponent(s);\n}\n\n/**\n * s is a python-style string literal, including quote characters and u/r/b\n * prefixes. Returns decoded string object.\n */\nfunction parsestr(c: Compiling, s: string): string {\n    // const encodeUtf8 = function(s) { return unescape(encodeURIComponent(s)); };\n    const decodeUtf8 = function (s: string) { return decodeURIComponent(escape(s)); };\n    const decodeEscape = function (s: string, quote: string) {\n        const len = s.length;\n        let ret = '';\n        for (let i = 0; i < len; ++i) {\n            let c = s.charAt(i);\n            if (c === '\\\\') {\n                ++i;\n                c = s.charAt(i);\n                if (c === 'n') ret += \"\\n\";\n                else if (c === '\\\\') ret += \"\\\\\";\n                else if (c === 't') ret += \"\\t\";\n                else if (c === 'r') ret += \"\\r\";\n                else if (c === 'b') ret += \"\\b\";\n                else if (c === 'f') ret += \"\\f\";\n                else if (c === 'v') ret += \"\\v\";\n                else if (c === '0') ret += \"\\0\";\n                else if (c === '\"') ret += '\"';\n                else if (c === '\\'') ret += '\\'';\n                else if (c === '\\n') /* escaped newline, join lines */ {/* Do nothing */ }\n                else if (c === 'x') {\n                    const d0 = s.charAt(++i);\n                    const d1 = s.charAt(++i);\n                    ret += String.fromCharCode(parseInt(d0 + d1, 16));\n                }\n                else if (c === 'u' || c === 'U') {\n                    const d0 = s.charAt(++i);\n                    const d1 = s.charAt(++i);\n                    const d2 = s.charAt(++i);\n                    const d3 = s.charAt(++i);\n                    ret += String.fromCharCode(parseInt(d0 + d1, 16), parseInt(d2 + d3, 16));\n                }\n                else {\n                    // Leave it alone\n                    ret += \"\\\\\" + c;\n                }\n            }\n            else {\n                ret += c;\n            }\n        }\n        return ret;\n    };\n\n    let quote = s.charAt(0);\n    let rawmode = false;\n\n    if (quote === 'u' || quote === 'U') {\n        s = s.substr(1);\n        quote = s.charAt(0);\n    }\n    else if (quote === 'r' || quote === 'R') {\n        s = s.substr(1);\n        quote = s.charAt(0);\n        rawmode = true;\n    }\n    assert(quote !== 'b' && quote !== 'B', \"todo; haven't done b'' strings yet\");\n\n    assert(quote === \"'\" || quote === '\"' && s.charAt(s.length - 1) === quote);\n    s = s.substr(1, s.length - 2);\n\n    if (s.length >= 4 && s.charAt(0) === quote && s.charAt(1) === quote) {\n        assert(s.charAt(s.length - 1) === quote && s.charAt(s.length - 2) === quote);\n        s = s.substr(2, s.length - 4);\n    }\n\n    if (rawmode || s.indexOf('\\\\') === -1) {\n        return strobj(decodeUtf8(s));\n    }\n    return strobj(decodeEscape(s, quote));\n}\n\n/**\n *\n */\nfunction parsestrplus(c: Compiling, n: PyNode): string {\n    REQ(CHILD(n, 0), TOK.T_STRING);\n    let ret = \"\";\n    for (let i = 0; i < NCH(n); ++i) {\n        const child = CHILD(n, i);\n        try {\n            ret = ret + parsestr(c, child.value);\n        }\n        catch (x) {\n            throw syntaxError(\"invalid string (possibly contains a unicode character)\", child.range);\n        }\n    }\n    return ret;\n}\n\nfunction parsenumber(c: Compiling, s: string, range: Range): INumericLiteral {\n    const endChar = s.charAt(s.length - 1);\n\n    if (endChar === 'j' || endChar === 'J') {\n        throw syntaxError(\"complex numbers are currently unsupported\", range);\n    }\n\n    if (s.indexOf('.') !== -1) {\n        return floatAST(s);\n    }\n\n    // Handle integers of various bases\n    let tmp = s;\n    let value: number;\n    let radix = 10;\n    let neg = false;\n    if (s.charAt(0) === '-') {\n        tmp = s.substr(1);\n        neg = true;\n    }\n\n    if (tmp.charAt(0) === '0' && (tmp.charAt(1) === 'x' || tmp.charAt(1) === 'X')) {\n        // Hex\n        tmp = tmp.substring(2);\n        value = parseInt(tmp, 16);\n        radix = 16;\n    }\n    else if ((s.indexOf('e') !== -1) || (s.indexOf('E') !== -1)) {\n        // Float with exponent (needed to make sure e/E wasn't hex first)\n        return floatAST(s);\n    }\n    else if (tmp.charAt(0) === '0' && (tmp.charAt(1) === 'b' || tmp.charAt(1) === 'B')) {\n        // Binary\n        tmp = tmp.substring(2);\n        value = parseInt(tmp, 2);\n        radix = 2;\n    }\n    else if (tmp.charAt(0) === '0') {\n        if (tmp === \"0\") {\n            // Zero\n            value = 0;\n        }\n        else {\n            // Octal (Leading zero, but not actually zero)\n            if (endChar === 'l' || endChar === 'L') {\n                return longAST(s.substr(0, s.length - 1), 8);\n            }\n            else {\n                radix = 8;\n                tmp = tmp.substring(1);\n                if ((tmp.charAt(0) === 'o') || (tmp.charAt(0) === 'O')) {\n                    tmp = tmp.substring(1);\n                }\n                value = parseInt(tmp, 8);\n            }\n        }\n    }\n    else {\n        // Decimal\n        if (endChar === 'l' || endChar === 'L') {\n            return longAST(s.substr(0, s.length - 1), radix);\n        }\n        else {\n            value = parseInt(tmp, radix);\n        }\n    }\n\n    // Convert to long\n    if (value > LONG_THRESHOLD && Math.floor(value) === value && (s.indexOf('e') === -1 && s.indexOf('E') === -1)) {\n        // TODO: Does radix zero make sense?\n        return longAST(s, 0);\n    }\n\n    if (endChar === 'l' || endChar === 'L') {\n        return longAST(s.substr(0, s.length - 1), radix);\n    }\n    else {\n        if (neg) {\n            return intAST(-value);\n        }\n        else {\n            return intAST(value);\n        }\n    }\n}\n\nfunction astForSlice(c: Compiling, node: PyNode): Ellipsis | Index | Name | Slice {\n    const n = node;\n    REQ(n, SYM.subscript);\n    let ch = CHILD(n, 0);\n    let lower: Expression = null;\n    let upper: Expression = null;\n    let step: Expression = null;\n    if (ch.type === TOK.T_DOT) {\n        return new Ellipsis();\n    }\n    if (NCH(n) === 1 && ch.type === SYM.IfExpr) {\n        return new Index(astForExpr(c, ch) as Tuple);\n    }\n    if (ch.type === SYM.IfExpr) {\n        lower = astForExpr(c, ch);\n    }\n    if (ch.type === TOK.T_COLON) {\n        if (NCH(n) > 1) {\n            const n2 = CHILD(n, 1);\n            if (n2.type === SYM.IfExpr)\n                upper = astForExpr(c, n2);\n        }\n    }\n    else if (NCH(n) > 2) {\n        const n2 = CHILD(n, 2);\n        if (n2.type === SYM.IfExpr) {\n            upper = astForExpr(c, n2);\n        }\n    }\n\n    ch = CHILD(n, NCH(n) - 1);\n    if (ch.type === SYM.sliceop) {\n        if (NCH(ch) === 1) {\n            ch = CHILD(ch, 0);\n            step = new Name(new RangeAnnotated(\"None\", null), Load);\n        }\n        else {\n            ch = CHILD(ch, 1);\n            if (ch.type === SYM.IfExpr)\n                step = astForExpr(c, ch);\n        }\n    }\n    return new Slice(lower, upper, step);\n}\n\nfunction astForAtomExpr(c: Compiling, n: PyNode): Name | Expression {\n    const c0 = CHILD(n, 0);\n    switch (c0.type) {\n        case TOK.T_NAME:\n            // All names start in Load context, but may be changed later\n            return new Name(new RangeAnnotated(c0.value, c0.range), Load);\n        case TOK.T_STRING: {\n            // FIXME: Owing to the way that Python allows string concatenation, this is imprecise.\n            return new Str(new RangeAnnotated(parsestrplus(c, n), n.range));\n        }\n        case TOK.T_NUMBER: {\n            return new Num(new RangeAnnotated(parsenumber(c, c0.value, c0.range), n.range));\n        }\n        case TOK.T_LPAR: { // various uses for parens\n            const c1 = CHILD(n, 1);\n            if (c1.type === TOK.T_RPAR) {\n                return new Tuple([], Load, n.range);\n            }\n            if (c1.type === SYM.YieldExpr) {\n                return astForExpr(c, c1) as Yield;\n            }\n            if (NCH(c1) > 1 && CHILD(c1, 1).type === SYM.gen_for) {\n                return astForGenexp(c, c1);\n            }\n            return astForTestlistGexp(c, c1);\n        }\n        case TOK.T_LSQB: { // list or listcomp\n            const c1 = CHILD(n, 1);\n            if (c1.type === TOK.T_RSQB)\n                return new List([], Load, n.range);\n            REQ(c1, SYM.listmaker);\n            if (NCH(c1) === 1 || CHILD(c1, 1).type === TOK.T_COMMA)\n                return new List(seqForTestlist(c, c1), Load, n.range);\n            else\n                return astForListcomp(c, c1);\n        }\n        case TOK.T_LBRACE: {\n            /* dictmaker: test ':' test (',' test ':' test)* [','] */\n            const c1 = CHILD(n, 1);\n            const N = NCH(c1);\n            // var size = Math.floor((NCH(ch) + 1) / 4); // + 1 for no trailing comma case\n            const keys: Expression[] = [];\n            const values: Expression[] = [];\n            for (let i = 0; i < N; i += 4) {\n                keys[i / 4] = astForExpr(c, CHILD(c1, i));\n                values[i / 4] = astForExpr(c, CHILD(c1, i + 2));\n            }\n            return new Dict(keys, values, n.range);\n        }\n        case TOK.T_BACKQUOTE: {\n            throw syntaxError(\"backquote not supported, use repr()\", n.range);\n        }\n        default: {\n            throw new Error(`unhandled atom '${grammarName(c0.type)}'`);\n        }\n    }\n}\n\nfunction astForPowerExpr(c: Compiling, node: PyNode): Expression {\n    const n = node;\n    REQ(n, SYM.PowerExpr);\n    const N = NCH(n);\n    const NminusOne = N - 1;\n    let e: Expression = astForAtomExpr(c, CHILD(n, 0));\n    if (N === 1) return e;\n    for (let i = 1; i < N; ++i) {\n        const ch = CHILD(n, i);\n        if (ch.type !== SYM.trailer) {\n            break;\n        }\n        e = astForTrailer(c, ch, e);\n    }\n    if (CHILD(n, NminusOne).type === SYM.UnaryExpr) {\n        const f = astForExpr(c, CHILD(n, NminusOne));\n        return new BinOp(e, { op: Pow, range: null }, f, n.range);\n    }\n    else {\n        return e;\n    }\n}\n\nfunction astForExpr(c: Compiling, n: PyNode): Expression {\n    LOOP: while (true) {\n        switch (n.type) {\n            case SYM.IfExpr:\n            case SYM.old_test:\n                if (CHILD(n, 0).type === SYM.LambdaExpr || CHILD(n, 0).type === SYM.old_LambdaExpr)\n                    return astForLambdef(c, CHILD(n, 0));\n                else if (NCH(n) > 1)\n                    return astForIfexpr(c, n);\n            // fallthrough\n            case SYM.OrExpr:\n            case SYM.AndExpr:\n                if (NCH(n) === 1) {\n                    n = CHILD(n, 0);\n                    continue LOOP;\n                }\n                const seq: Expression[] = [];\n                for (let i = 0; i < NCH(n); i += 2) {\n                    seq[i / 2] = astForExpr(c, CHILD(n, i));\n                }\n                if (CHILD(n, 1).value === \"and\") {\n                    return new BoolOp(And, seq, n.range);\n                }\n                assert(CHILD(n, 1).value === \"or\");\n                return new BoolOp(Or, seq, n.range);\n            case SYM.NotExpr:\n                if (NCH(n) === 1) {\n                    n = CHILD(n, 0);\n                    continue LOOP;\n                }\n                else {\n                    return new UnaryOp(Not, astForExpr(c, CHILD(n, 1)), n.range);\n                }\n            case SYM.ComparisonExpr:\n                if (NCH(n) === 1) {\n                    n = CHILD(n, 0);\n                    continue LOOP;\n                }\n                else {\n                    const ops = [];\n                    const cmps = [];\n                    for (let i = 1; i < NCH(n); i += 2) {\n                        ops[(i - 1) / 2] = astForCompOp(c, CHILD(n, i));\n                        cmps[(i - 1) / 2] = astForExpr(c, CHILD(n, i + 1));\n                    }\n                    return new Compare(astForExpr(c, CHILD(n, 0)), ops, cmps, n.range);\n                }\n            case SYM.ArithmeticExpr:\n            case SYM.GeometricExpr:\n            case SYM.ShiftExpr:\n            case SYM.BitwiseOrExpr:\n            case SYM.BitwiseXorExpr:\n            case SYM.BitwiseAndExpr:\n                if (NCH(n) === 1) {\n                    n = CHILD(n, 0);\n                    continue LOOP;\n                }\n                return astForBinop(c, n);\n            case SYM.YieldExpr:\n                let exp: Expression = null;\n                if (NCH(n) === 2) {\n                    exp = astForTestlist(c, CHILD(n, 1));\n                }\n                return new Yield(exp, n.range);\n            case SYM.UnaryExpr:\n                if (NCH(n) === 1) {\n                    n = CHILD(n, 0);\n                    continue LOOP;\n                }\n                return astForUnaryExpr(c, n);\n            case SYM.PowerExpr:\n                return astForPowerExpr(c, n);\n            default: {\n                throw new Error(\"unhandled expr\"/*, \"n.type: %d\", n.type*/);\n            }\n        }\n    }\n}\n\nfunction astForPrintStmt(c: Compiling, n: PyNode): Print {\n    let start = 1;\n    let dest: Expression = null;\n    REQ(n, SYM.print_stmt);\n    if (NCH(n) >= 2 && CHILD(n, 1).type === TOK.T_RIGHTSHIFT) {\n        dest = astForExpr(c, CHILD(n, 2));\n        start = 4;\n    }\n    const seq: Expression[] = [];\n    for (let i = start, j = 0; i < NCH(n); i += 2, ++j) {\n        seq[j] = astForExpr(c, CHILD(n, i));\n    }\n    const nl = (CHILD(n, NCH(n) - 1)).type === TOK.T_COMMA ? false : true;\n    return new Print(dest, seq, nl, n.range);\n}\n\nfunction astForStmt(c: Compiling, n: PyNode): Statement {\n    if (n.type === SYM.stmt) {\n        assert(NCH(n) === 1);\n        n = CHILD(n, 0);\n    }\n    if (n.type === SYM.simple_stmt) {\n        assert(numStmts(n) === 1);\n        n = CHILD(n, 0);\n    }\n    if (n.type === SYM.small_stmt) {\n        REQ(n, SYM.small_stmt);\n        n = CHILD(n, 0);\n        switch (n.type) {\n            case SYM.ExprStmt: return astForExprStmt(c, n);\n            case SYM.print_stmt: return astForPrintStmt(c, n);\n            case SYM.del_stmt: return astForDelStmt(c, n);\n            case SYM.pass_stmt: return new Pass(n.range);\n            case SYM.flow_stmt: return astForFlowStmt(c, n);\n            case SYM.import_stmt: return astForImportStmt(c, n);\n            case SYM.GlobalStmt: return astForGlobalStmt(c, n);\n            case SYM.NonLocalStmt: return astForNonLocalStmt(c, n);\n            case SYM.exec_stmt: return astForExecStmt(c, n);\n            case SYM.assert_stmt: return astForAssertStmt(c, n);\n            default: {\n                throw new Error(\"unhandled small_stmt\");\n            }\n        }\n    }\n    else {\n        const ch = CHILD(n, 0);\n        REQ(n, SYM.compound_stmt);\n        switch (ch.type) {\n            case SYM.if_stmt: return astForIfStmt(c, ch);\n            case SYM.while_stmt: return astForWhileStmt(c, ch);\n            case SYM.for_stmt: return astForForStmt(c, ch);\n            case SYM.try_stmt: return astForTryStmt(c, ch);\n            case SYM.with_stmt: return astForWithStmt(c, ch);\n            case SYM.funcdef: return astForFuncdef(c, ch, []);\n            case SYM.classdef: return astForClassdef(c, ch, []);\n            case SYM.decorated: return astForDecorated(c, ch);\n            default: {\n                throw new Error(\"unhandled compound_stmt\");\n            }\n        }\n    }\n}\n\nexport function astFromExpression(n: PyNode): Expression {\n    const c = new Compiling(\"utf-8\");\n    return astForExpr(c, n);\n}\n\nexport function astFromParse(n: PyNode): Statement[] {\n    const c = new Compiling(\"utf-8\");\n\n    const stmts: Statement[] = [];\n    let k = 0;\n    for (let i = 0; i < NCH(n) - 1; ++i) {\n        let ch = CHILD(n, i);\n        if (n.type === TOK.T_NEWLINE)\n            continue;\n        REQ(ch, SYM.stmt);\n        const num = numStmts(ch);\n        if (num === 1) {\n            stmts[k++] = astForStmt(c, ch);\n        }\n        else {\n            ch = CHILD(ch, 0);\n            REQ(ch, SYM.simple_stmt);\n            for (let j = 0; j < num; ++j) {\n                stmts[k++] = astForStmt(c, CHILD(ch, j * 2));\n            }\n        }\n    }\n    return stmts;\n    /*\n    switch (n.type) {\n        case SYM.file_input:\n        case SYM.eval_input: {\n            throw new Error(\"todo;\");\n        }\n        case SYM.single_input: {\n            throw new Error(\"todo;\");\n        }\n        default: {\n            throw new Error(\"todo;\");\n        }\n    }\n    */\n}\n\nexport function astDump(node: Expression | Statement): string {\n    const _format = function (node: Expression | Statement | boolean | any[]): string {\n        if (node === null) {\n            return \"None\";\n        }\n        else if (node['prototype'] && node['prototype']._astname !== undefined && node['prototype']._isenum) {\n            // TODO: Replace the _isenum classes with real TypeScript enum.\n            // TODO: Why do we have the parens?\n            return node['prototype']._astname + \"()\";\n        }\n        else if (node['_astname'] !== undefined) {\n            const fields = [];\n            for (let i = 0; i < node['_fields'].length; i += 2) {\n                const a = node['_fields'][i]; // field name\n                const b = node['_fields'][i + 1](node); // field getter func\n                fields.push([a, _format(b)]);\n            }\n            const attrs: string[] = [];\n            for (let i = 0; i < fields.length; ++i) {\n                const field = fields[i];\n                attrs.push(field[0] + \"=\" + field[1].replace(/^\\s+/, ''));\n            }\n            const fieldstr = attrs.join(',');\n            return node['_astname'] + \"(\" + fieldstr + \")\";\n        }\n        else if (Array.isArray(node)) {\n            const elems = [];\n            for (let i = 0; i < node.length; ++i) {\n                const x = node[i];\n                elems.push(_format(x));\n            }\n            const elemsstr = elems.join(',');\n            return \"[\" + elemsstr.replace(/^\\s+/, '') + \"]\";\n        }\n        else {\n            let ret: string;\n            if (node === true) ret = \"True\";\n            else if (node === false) ret = \"False\";\n            else ret = \"\" + node;\n            return ret;\n        }\n    };\n\n    return _format(node);\n}\n","/* Flags for def-use information */\n\nexport const DEF_GLOBAL = 1 << 0;      /* global stmt */\nexport const DEF_LOCAL = 2 << 0;       /* assignment in code block */\nexport const DEF_PARAM = 2 << 1;       /* formal parameter */\nexport const USE = 2 << 2;             /* name is used */\nexport const DEF_STAR = 2 << 3;        /* parameter is star arg */\nexport const DEF_DOUBLESTAR = 2 << 4;  /* parameter is star-star arg */\nexport const DEF_INTUPLE = 2 << 5;     /* name defined in tuple in parameters */\nexport const DEF_FREE = 2 << 6;        /* name used but not defined in nested block */\nexport const DEF_FREE_GLOBAL = 2 << 7; /* free variable is actually implicit global */\nexport const DEF_FREE_CLASS = 2 << 8;  /* free variable from class's method */\nexport const DEF_IMPORT = 2 << 9;      /* assignment occurred via import */\n\nexport const DEF_BOUND = (DEF_LOCAL | DEF_PARAM | DEF_IMPORT);\n\n// TODO: Each flag should be redefined as part of an enum and the SymbolFlags will be a Set.\nexport type SymbolFlags = number;\n\n/* GLOBAL_EXPLICIT and GLOBAL_IMPLICIT are used internally by the symbol\n   table.  GLOBAL is returned from PyST_GetScope() for either of them.\n   It is stored in ste_symbols at bits 12-14.\n*/\nexport const SCOPE_OFF = 11;\nexport const SCOPE_MASK = 7;\n\nexport type DictionaryKind = 1 | 2 | 3 | 4;\nexport const LOCAL = 1;\nexport const GLOBAL_EXPLICIT = 2;\nexport const GLOBAL_IMPLICIT = 3;\nexport const FREE = 4;\nexport const CELL = 5;\n\n/* The following three names are used for the ste_unoptimized bit field */\nexport const OPT_IMPORT_STAR = 1;\nexport const OPT_EXEC = 2;\nexport const OPT_BARE_EXEC = 4;\nexport const OPT_TOPLEVEL = 8;  /* top-level names, including eval and exec */\n\nexport const GENERATOR = 2;\nexport const GENERATOR_EXPRESSION = 2;\n\nexport const ModuleBlock = 'module';\nexport const FunctionBlock = 'function';\nexport const ClassBlock = 'class';\n","export function dictUpdate(a: object, b: object): void {\n    for (let kb in b) {\n        if (b.hasOwnProperty(kb)) {\n            a[kb] = b[kb];\n        }\n    }\n}\n","/**\n * @param priv\n * @param name\n */\nexport function mangleName(priv: string | null, name: string | null): string | null {\n    let strpriv: string | null = null;\n\n    if (priv === null || name === null || name.charAt(0) !== '_' || name.charAt(1) !== '_') {\n        return name;\n    }\n    // don't mangle dunder (double underscore) names e.g. __id__.\n    if (name.charAt(name.length - 1) === '_' && name.charAt(name.length - 2) === '_') {\n        return name;\n    }\n    // don't mangle classes that are all _ (obscure much?)\n    strpriv = priv;\n    strpriv.replace(/_/g, '');\n    if (strpriv === '') {\n        return name;\n    }\n\n    strpriv = priv;\n    strpriv.replace(/^_*/, '');\n    strpriv = '_' + strpriv + name;\n    return strpriv;\n}\n","import { DEF_BOUND } from './SymbolConstants';\nimport { DEF_IMPORT } from './SymbolConstants';\nimport { DEF_LOCAL } from './SymbolConstants';\nimport { DEF_PARAM } from './SymbolConstants';\nimport { FREE } from './SymbolConstants';\nimport { GLOBAL_EXPLICIT } from './SymbolConstants';\nimport { GLOBAL_IMPLICIT } from './SymbolConstants';\nimport { SCOPE_MASK } from './SymbolConstants';\nimport { SCOPE_OFF } from './SymbolConstants';\nimport { USE } from './SymbolConstants';\nimport { SymbolTableScope } from './SymbolTableScope';\n\nexport class Symbol {\n    private __name: string;\n    private __flags: number;\n    private __scope: number;\n    private __namespaces: SymbolTableScope[];\n    /**\n     * @param name\n     * @param flags\n     * @param namespaces\n     */\n    constructor(name: string, flags: number, namespaces: SymbolTableScope[]) {\n        this.__name = name;\n        this.__flags = flags;\n        this.__scope = (flags >> SCOPE_OFF) & SCOPE_MASK;\n        this.__namespaces = namespaces || [];\n    }\n    get_name(): string { return this.__name; }\n    is_referenced(): boolean { return !!(this.__flags & USE); }\n\n    is_parameter(): boolean {\n        return !!(this.__flags & DEF_PARAM);\n    }\n\n    is_global(): boolean {\n        return this.__scope === GLOBAL_IMPLICIT || this.__scope === GLOBAL_EXPLICIT;\n    }\n\n    is_declared_global(): boolean {\n        return this.__scope === GLOBAL_EXPLICIT;\n    }\n\n    is_local(): boolean {\n        return !!(this.__flags & DEF_BOUND);\n    }\n\n    is_free(): boolean { return this.__scope === FREE; }\n    is_imported(): boolean { return !!(this.__flags & DEF_IMPORT); }\n    is_assigned(): boolean { return !!(this.__flags & DEF_LOCAL); }\n    is_namespace(): boolean { return this.__namespaces && this.__namespaces.length > 0; }\n    get_namespaces(): SymbolTableScope[] { return this.__namespaces; }\n}\n","import { assert } from '../common/asserts';\nimport { Symbol } from './Symbol';\nimport { SymbolTable } from './SymbolTable';\nimport { DEF_PARAM } from './SymbolConstants';\nimport { DEF_BOUND } from './SymbolConstants';\nimport { FREE } from './SymbolConstants';\nimport { FunctionBlock } from './SymbolConstants';\nimport { GLOBAL_EXPLICIT } from './SymbolConstants';\nimport { GLOBAL_IMPLICIT } from './SymbolConstants';\nimport { SCOPE_MASK } from './SymbolConstants';\nimport { SCOPE_OFF } from './SymbolConstants';\nimport { SymbolFlags } from './SymbolConstants';\nimport { Range } from '../common/Range';\n\nlet astScopeCounter = 0;\n\nexport type BlockType = 'class' | 'function' | 'module';\n\n/**\n * A SymbolTableScope is created for nodes in the AST.\n * It is created only when the SymbolTable enters a block.\n */\nexport class SymbolTableScope {\n    /**\n     * A mapping from the name of a symbol to its flags.\n     */\n    readonly symFlags: { [name: string]: SymbolFlags } = {};\n    /**\n     * The name of the node defining the scope. e.g.\n     * Module:      'top'\n     * ClassDef:     The class name.\n     * FunctionDef:  The function name.\n     * Lambda:       'lambda'\n     * GeneratorExp: 'genexpr'\n     */\n    private readonly name: string;\n    /**\n     * A list of (local) variables that exists in the current scope.\n     * This is populated by the addDef method in SymbolTable.\n     * e.g. Name, FunctionDef, ClassDef, Global?, Lambda, Alias.\n     * Note that global variables are maintained in the SymbolTable to which we have access.\n     */\n    varnames: string[] = [];\n    children: SymbolTableScope[] = [];\n    readonly blockType: BlockType;\n    isNested: boolean;\n    hasFree: boolean;\n    childHasFree: boolean;\n    /**\n     * `true`for a GeneratorExp or Yield, `false` otherwise.\n     */\n    generator: boolean;\n    varargs: boolean;\n    varkeywords: boolean;\n    returnsValue: boolean;\n    range: Range;\n    // private table: SymbolTable;\n    private symbols: { [name: string]: Symbol };\n    private _classMethods: string[];\n    private _funcParams: string[];\n    private _funcLocals: string[];\n    private _funcGlobals: string[];\n    private _funcFrees: string[];\n    /**\n     * @param table\n     * @param name The name of the node defining the scope.\n     * @param blockType\n     * @param astNode\n     * @param range\n     */\n    constructor(table: SymbolTable, name: string, blockType: BlockType, astNode: { scopeId: number }, range: Range) {\n        // this.table = table;\n        this.name = name;\n        this.blockType = blockType;\n\n        astNode.scopeId = astScopeCounter++;\n        table.stss[astNode.scopeId] = this;\n\n        this.range = range;\n\n        if (table.cur && (table.cur.isNested || table.cur.blockType === FunctionBlock)) {\n            this.isNested = true;\n        }\n        else {\n            this.isNested = false;\n        }\n\n        this.hasFree = false;\n        this.childHasFree = false;  // true if child block has free vars including free refs to globals\n        this.generator = false;\n        this.varargs = false;\n        this.varkeywords = false;\n        this.returnsValue = false;\n\n\n        // cache of Symbols for returning to other parts of code\n        this.symbols = {};\n    }\n    get_type(): BlockType { return this.blockType; }\n    get_name(): string { return this.name; }\n    get_range(): Range { return this.range; }\n    is_nested(): boolean { return this.isNested; }\n    has_children(): boolean { return this.children.length > 0; }\n    get_identifiers(): string[] { return this._identsMatching(function (x) { return true; }); }\n\n    lookup(name: string) {\n        let sym: Symbol;\n        if (!this.symbols.hasOwnProperty(name)) {\n            const flags = this.symFlags[name];\n            const namespaces = this.__check_children(name);\n            sym = this.symbols[name] = new Symbol(name, flags, namespaces);\n        }\n        else {\n            sym = this.symbols[name];\n        }\n        return sym;\n    }\n\n    __check_children(name: string): SymbolTableScope[] {\n        // print(\"  check_children:\", name);\n        const ret: SymbolTableScope[] = [];\n        for (let i = 0; i < this.children.length; ++i) {\n            const child = this.children[i];\n            if (child.name === name)\n                ret.push(child);\n        }\n        return ret;\n    }\n\n    /**\n     * Looks in the bindings for this scope and returns the names of the nodes that match the mask filter.\n     */\n    private _identsMatching(filter: (flags: SymbolFlags) => boolean): string[] {\n        const ret: string[] = [];\n        for (let k in this.symFlags) {\n            if (this.symFlags.hasOwnProperty(k)) {\n                if (filter(this.symFlags[k]))\n                    ret.push(k);\n            }\n        }\n        ret.sort();\n        return ret;\n    }\n\n    /**\n     * Returns the names of parameters (DEF_PARAM) for function scopes.\n     */\n    get_parameters(): string[] {\n        assert(this.get_type() === 'function', \"get_parameters only valid for function scopes\");\n        if (!this._funcParams) {\n            this._funcParams = this._identsMatching(function (x) { return !!(x & DEF_PARAM); });\n        }\n        return this._funcParams;\n    }\n\n    /**\n     * Returns the names of local variables (DEF_BOUND) for function scopes.\n     */\n    get_locals(): string[] {\n        assert(this.get_type() === 'function', \"get_locals only valid for function scopes\");\n        if (!this._funcLocals) {\n            this._funcLocals = this._identsMatching(function (x) { return !!(x & DEF_BOUND); });\n        }\n        return this._funcLocals;\n    }\n\n    /**\n     * Returns the names of global variables for function scopes.\n     */\n    get_globals(): string[] {\n        assert(this.get_type() === 'function', \"get_globals only valid for function scopes\");\n        if (!this._funcGlobals) {\n            this._funcGlobals = this._identsMatching(function (x) {\n                const masked = (x >> SCOPE_OFF) & SCOPE_MASK;\n                return masked === GLOBAL_IMPLICIT || masked === GLOBAL_EXPLICIT;\n            });\n        }\n        return this._funcGlobals;\n    }\n\n    /**\n     * Returns the names of free variables for function scopes.\n     */\n    get_frees(): string[] {\n        assert(this.get_type() === 'function', \"get_frees only valid for function scopes\");\n        if (!this._funcFrees) {\n            this._funcFrees = this._identsMatching(function (x) {\n                const masked = (x >> SCOPE_OFF) & SCOPE_MASK;\n                return masked === FREE;\n            });\n        }\n        return this._funcFrees;\n    }\n\n    /**\n     * Returns the names of methods for class scopes.\n     */\n    get_methods(): string[] {\n        assert(this.get_type() === 'class', \"get_methods only valid for class scopes\");\n        if (!this._classMethods) {\n            // todo; uniq?\n            const all: string[] = [];\n            for (let i = 0; i < this.children.length; ++i)\n                all.push(this.children[i].name);\n            all.sort();\n            this._classMethods = all;\n        }\n        return this._classMethods;\n    }\n\n    /**\n     * I think this returns the scopeId of a node with the specified name.\n     */\n    getScope(name: string): number {\n        // print(\"getScope\");\n        // for (var k in this.symFlags) print(k);\n        const v = this.symFlags[name];\n        if (v === undefined) return 0;\n        return (v >> SCOPE_OFF) & SCOPE_MASK;\n    }\n}\n","import { assert, fail } from '../common/asserts';\nimport { dictUpdate } from '../common/dictUpdate';\nimport { mangleName } from './mangleName';\nimport { BlockType, SymbolTableScope } from './SymbolTableScope';\nimport { syntaxError } from '../common/syntaxError';\n\nimport { Alias } from '../ast/types';\nimport { Assert } from '../ast/types';\nimport { Arguments } from '../ast/types';\nimport { Assign } from '../ast/types';\nimport { AnnAssign } from '../ast/types';\nimport { Attribute } from '../ast/types';\nimport { AugAssign } from '../ast/types';\nimport { BinOp } from '../ast/types';\nimport { BoolOp } from '../ast/types';\nimport { BreakStatement } from '../ast/types';\nimport { Call } from '../ast/types';\nimport { ClassDef } from '../ast/types';\nimport { Compare } from '../ast/types';\nimport { Comprehension } from '../ast/types';\nimport { ContinueStatement } from '../ast/types';\nimport { DeleteStatement } from '../ast/types';\nimport { Dict } from '../ast/types';\nimport { Ellipsis } from '../ast/types';\nimport { ExceptHandler } from '../ast/types';\nimport { Exec } from '../ast/types';\nimport { Expression } from '../ast/types';\nimport { ExpressionStatement } from '../ast/types';\nimport { ExtSlice } from '../ast/types';\nimport { ForStatement } from '../ast/types';\nimport { FunctionDef } from '../ast/types';\nimport { FunctionParamDef } from '../ast/types';\nimport { GeneratorExp } from '../ast/types';\nimport { Global } from '../ast/types';\nimport { IfStatement } from '../ast/types';\nimport { IfExp } from '../ast/types';\nimport { ImportStatement } from '../ast/types';\nimport { ImportFrom } from '../ast/types';\nimport { Index } from '../ast/types';\nimport { Lambda } from '../ast/types';\nimport { Load } from '../ast/types';\nimport { List } from '../ast/types';\nimport { ListComp } from '../ast/types';\nimport { Module } from '../ast/types';\nimport { Name } from '../ast/types';\nimport { Num } from '../ast/types';\nimport { Param } from '../ast/types';\nimport { Pass } from '../ast/types';\nimport { Print } from '../ast/types';\nimport { Raise } from '../ast/types';\nimport { ReturnStatement } from '../ast/types';\nimport { Slice } from '../ast/types';\nimport { Statement } from '../ast/types';\nimport { Store } from '../ast/types';\nimport { Str } from '../ast/types';\nimport { Subscript } from '../ast/types';\nimport { TryExcept } from '../ast/types';\nimport { TryFinally } from '../ast/types';\nimport { Tuple } from '../ast/types';\nimport { UnaryOp } from '../ast/types';\nimport { Visitor } from '../ast/types';\nimport { WhileStatement } from '../ast/types';\nimport { WithStatement } from '../ast/types';\nimport { Yield } from '../ast/types';\n\nimport { CELL } from './SymbolConstants';\nimport { ClassBlock } from './SymbolConstants';\nimport { DEF_BOUND } from './SymbolConstants';\nimport { DEF_FREE_CLASS } from './SymbolConstants';\nimport { DEF_GLOBAL } from './SymbolConstants';\nimport { DEF_IMPORT } from './SymbolConstants';\nimport { DEF_LOCAL } from './SymbolConstants';\nimport { DEF_PARAM } from './SymbolConstants';\nimport { DictionaryKind } from './SymbolConstants';\nimport { FREE } from './SymbolConstants';\nimport { FunctionBlock } from './SymbolConstants';\nimport { GLOBAL_EXPLICIT } from './SymbolConstants';\nimport { GLOBAL_IMPLICIT } from './SymbolConstants';\nimport { LOCAL } from './SymbolConstants';\nimport { ModuleBlock } from './SymbolConstants';\nimport { USE } from './SymbolConstants';\nimport { SCOPE_OFF } from './SymbolConstants';\nimport { SymbolFlags } from './SymbolConstants';\nimport { Range } from '../common/Range';\n\n//\n// TODO: This should be refactored into a SemanticVisitor implementing the Visitor.\n//\n\n/**\n * Migrate to using this class to providing the implementation for the SymbolTable.\n */\nexport class SemanticVisitor implements Visitor {\n    constructor(private st: SymbolTable) {\n        // Do nothing.\n    }\n    forStatement(fs: ForStatement): void {\n        // TODO\n    }\n    annAssign(annassign: AnnAssign): void {\n        // TODO\n    }\n    assign(assign: Assign): void {\n        this.st.SEQExpr(assign.targets);\n        assign.value.accept(this);\n    }\n    attribute(attribute: Attribute): void {\n        attribute.value.accept(this);\n    }\n    binOp(be: BinOp): void {\n        be.lhs.accept(this);\n        be.rhs.accept(this);\n    }\n    callExpression(ce: Call): void {\n        ce.func.accept(this);\n        this.st.SEQExpr(ce.args);\n        for (let i = 0; i < ce.keywords.length; ++i)\n            ce.keywords[i].value.accept(this);\n        // print(JSON.stringify(e.starargs, null, 2));\n        // print(JSON.stringify(e.kwargs, null,2));\n        if (ce.starargs) {\n            ce.starargs.accept(this);\n        }\n        if (ce.kwargs) {\n            ce.kwargs.accept(this);\n        }\n    }\n    classDef(cd: ClassDef): void {\n        this.st.addDef(cd.name.value, DEF_LOCAL, cd.range);\n        this.st.SEQExpr(cd.bases);\n        if (cd.decorator_list) this.st.SEQExpr(cd.decorator_list);\n        this.st.enterBlock(cd.name.value, ClassBlock, cd, cd.range);\n        const tmp = this.st.curClass;\n        this.st.curClass = cd.name.value;\n        this.st.SEQStmt(cd.body);\n        this.st.curClass = tmp;\n        this.st.exitBlock();\n    }\n    compareExpression(ce: Compare): void {\n        ce.left.accept(this);\n        this.st.SEQExpr(ce.comparators);\n    }\n    dict(dict: Dict): void {\n        this.st.SEQExpr(dict.keys);\n        this.st.SEQExpr(dict.values);\n    }\n    expressionStatement(expressionStatement: ExpressionStatement): void {\n        expressionStatement.accept(this);\n    }\n    functionDef(fd: FunctionDef) {\n        this.st.addDef(fd.name.value, DEF_LOCAL, fd.range);\n        if (fd.args.defaults) this.st.SEQExpr(fd.args.defaults);\n        if (fd.decorator_list) this.st.SEQExpr(fd.decorator_list);\n        this.st.enterBlock(fd.name.value, FunctionBlock, fd, fd.range);\n        this.st.visitArguments(fd.args, fd.range);\n        this.st.SEQStmt(fd.body);\n        this.st.exitBlock();\n    }\n    ifStatement(i: IfStatement): void {\n        i.test.accept(this);\n        this.st.SEQStmt(i.consequent);\n        if (i.alternate) {\n            this.st.SEQStmt(i.alternate);\n        }\n        throw new Error(\"SemanticVistor.IfStatement\");\n    }\n    importFrom(importFrom: ImportFrom): void {\n        this.st.visitAlias(importFrom.names, importFrom.range);\n    }\n    list(list: List): void {\n        this.st.SEQExpr(list.elts);\n    }\n    module(module: Module): void {\n        throw new Error(\"module\");\n    }\n    name(name: Name): void {\n        this.st.addDef(name.id.value, name.ctx === Load ? USE : DEF_LOCAL, name.id.range);\n    }\n    num(num: Num): void {\n        // Do nothing, unless we are doing type inference.\n    }\n    print(print: Print) {\n        if (print.dest) {\n            print.dest.accept(this);\n        }\n        this.st.SEQExpr(print.values);\n\n    }\n    returnStatement(rs: ReturnStatement): void {\n        if (rs.value) {\n            rs.value.accept(this);\n            this.st.cur.returnsValue = true;\n            if (this.st.cur.generator) {\n                throw syntaxError(\"'return' with argument inside generator\");\n            }\n        }\n    }\n    str(str: Str): void {\n        // Do nothing, unless we are doing type inference.\n    }\n}\n\n/**\n * The symbol table uses the abstract synntax tree (not the parse tree).\n */\nexport class SymbolTable {\n    cur: SymbolTableScope;\n    top: SymbolTableScope;\n    stack: SymbolTableScope[];\n    global: { [name: string]: number };\n    curClass: string;\n    tmpname: number;\n    stss: { [scopeId: number]: SymbolTableScope };\n    /**\n     *\n     */\n    constructor() {\n        this.cur = null;\n        this.top = null;\n        this.stack = [];\n        this.global = null; // points at top level module symFlags\n        this.curClass = null; // current class or null\n        this.tmpname = 0;\n\n        // mapping from ast nodes to their scope if they have one. we add an\n        // id to the ast node when a scope is created for it, and store it in\n        // here for the compiler to lookup later.\n        this.stss = {};\n    }\n\n    /**\n     * Lookup the SymbolTableScope for a scopeId of the AST.\n     */\n    getStsForAst(ast: { scopeId: number }) {\n        assert(ast.scopeId !== undefined, \"ast wasn't added to st?\");\n        const v = this.stss[ast.scopeId];\n        assert(v !== undefined, \"unknown sym tab entry\");\n        return v;\n    }\n\n    SEQStmt(nodes: Statement[]): void {\n        const len = nodes.length;\n        for (let i = 0; i < len; ++i) {\n            const val = nodes[i];\n            if (val) this.visitStmt(val);\n        }\n    }\n\n    SEQExpr(nodes: Expression[]): void {\n        const len = nodes.length;\n        for (let i = 0; i < len; ++i) {\n            const val = nodes[i];\n            if (val) this.visitExpr(val);\n        }\n    }\n\n    /**\n     * A block represents a scope.\n     * The following nodes in the AST define new blocks of the indicated type and name:\n     * Module        ModuleBlock   = 'module'    name = 'top'\n     * FunctionDef   FunctionBlock = 'function'  name = The name of the function.\n     * ClassDef      ClassBlock    = 'class'     name = The name of the class.\n     * Lambda        FunctionBlock = 'function'  name = 'lambda'\n     * GeneratoeExp  FunctionBlock = 'function'  name = 'genexpr'\n     *\n     * @param name\n     * @param blockType\n     * @param astNode The AST node that is defining the block.\n     * @param lineno\n     */\n    enterBlock(name: string, blockType: BlockType, astNode: { scopeId: number }, range: Range) {\n        //  name = fixReservedNames(name);\n        let prev: SymbolTableScope = null;\n        if (this.cur) {\n            prev = this.cur;\n            this.stack.push(this.cur);\n        }\n        this.cur = new SymbolTableScope(this, name, blockType, astNode, range);\n        if (name === 'top') {\n            this.global = this.cur.symFlags;\n        }\n        if (prev) {\n            prev.children.push(this.cur);\n        }\n    }\n\n    exitBlock() {\n        // print(\"exitBlock\");\n        this.cur = null;\n        if (this.stack.length > 0)\n            this.cur = this.stack.pop();\n    }\n\n    visitParams(args: FunctionParamDef[], toplevel: boolean) {\n        for (let i = 0; i < args.length; ++i) {\n            const arg = args[i];\n            if (arg.name.constructor === Name) {\n                assert(arg.name.ctx === Param || (arg.name.ctx === Store && !toplevel));\n                this.addDef(arg.name.id.value, DEF_PARAM, arg.name.id.range);\n            }\n            else {\n                // Tuple isn't supported\n                throw syntaxError(\"invalid expression in parameter list\");\n            }\n        }\n    }\n\n    visitArguments(a: Arguments, range: Range) {\n        if (a.args) this.visitParams(a.args, true);\n        if (a.vararg) {\n            this.addDef(a.vararg, DEF_PARAM, range);\n            this.cur.varargs = true;\n        }\n        if (a.kwarg) {\n            this.addDef(a.kwarg, DEF_PARAM, range);\n            this.cur.varkeywords = true;\n        }\n    }\n\n    /**\n     *\n     */\n    newTmpname(range: Range): void {\n        this.addDef(\"_[\" + (++this.tmpname) + \"]\", DEF_LOCAL, range);\n    }\n\n    /**\n     * 1. Modifies symbol flags for the current scope.\n     * 2.a Adds a variable name for the current scope, OR\n     * 2.b Sets the SymbolFlags for a global variable.\n     * @param name\n     * @param flags\n     * @param lineno\n     */\n    addDef(name: string, flags: SymbolFlags, range: Range): void {\n        const mangled = mangleName(this.curClass, name);\n        //  mangled = fixReservedNames(mangled);\n\n        // Modify symbol flags for the current scope.\n        let val: SymbolFlags = this.cur.symFlags[mangled];\n        if (val !== undefined) {\n            if ((flags & DEF_PARAM) && (val & DEF_PARAM)) {\n                throw syntaxError(\"duplicate argument '\" + name + \"' in function definition\", range);\n            }\n            val |= flags;\n        }\n        else {\n            val = flags;\n        }\n        this.cur.symFlags[mangled] = val;\n\n\n        if (flags & DEF_PARAM) {\n            this.cur.varnames.push(mangled);\n        }\n        else if (flags & DEF_GLOBAL) {\n            val = flags;\n            const fromGlobal = this.global[mangled];\n            if (fromGlobal !== undefined) val |= fromGlobal;\n            this.global[mangled] = val;\n        }\n    }\n\n    visitSlice(s: Slice | ExtSlice | Index | Ellipsis) {\n        if (s instanceof Slice) {\n            if (s.lower) this.visitExpr(s.lower);\n            if (s.upper) this.visitExpr(s.upper);\n            if (s.step) this.visitExpr(s.step);\n        }\n        else if (s instanceof ExtSlice) {\n            for (let i = 0; i < s.dims.length; ++i) {\n                this.visitSlice(s.dims[i]);\n            }\n        }\n        else if (s instanceof Index) {\n            this.visitExpr(s.value);\n        }\n        else if (s instanceof Ellipsis) {\n            // Do nothing.\n        }\n    }\n\n    /**\n     *\n     */\n    visitStmt(s: Statement): void {\n        assert(s !== undefined, \"visitStmt called with undefined\");\n        if (s instanceof FunctionDef) {\n            this.addDef(s.name.value, DEF_LOCAL, s.range);\n            if (s.args.defaults) this.SEQExpr(s.args.defaults);\n            if (s.decorator_list) this.SEQExpr(s.decorator_list);\n            this.enterBlock(s.name.value, FunctionBlock, s, s.range);\n            this.visitArguments(s.args, s.range);\n            this.SEQStmt(s.body);\n            this.exitBlock();\n        }\n        else if (s instanceof ClassDef) {\n            this.addDef(s.name.value, DEF_LOCAL, s.range);\n            this.SEQExpr(s.bases);\n            if (s.decorator_list) this.SEQExpr(s.decorator_list);\n            this.enterBlock(s.name.value, ClassBlock, s, s.range);\n            const tmp = this.curClass;\n            this.curClass = s.name.value;\n            this.SEQStmt(s.body);\n            this.curClass = tmp;\n            this.exitBlock();\n        }\n        else if (s instanceof ReturnStatement) {\n            if (s.value) {\n                this.visitExpr(s.value);\n                this.cur.returnsValue = true;\n                if (this.cur.generator) {\n                    throw syntaxError(\"'return' with argument inside generator\");\n                }\n            }\n        }\n        else if (s instanceof DeleteStatement) {\n            this.SEQExpr(s.targets);\n        }\n        else if (s instanceof Assign) {\n            this.SEQExpr(s.targets);\n            this.visitExpr(s.value);\n        }\n        else if (s instanceof AugAssign) {\n            this.visitExpr(s.target);\n            this.visitExpr(s.value);\n        }\n        else if (s instanceof AnnAssign) {\n            this.visitExpr(s.target);\n            this.visitExpr(s.value);\n        }\n        else if (s instanceof Print) {\n            if (s.dest) this.visitExpr(s.dest);\n            this.SEQExpr(s.values);\n        }\n        else if (s instanceof ForStatement) {\n            this.visitExpr(s.target);\n            this.visitExpr(s.iter);\n            this.SEQStmt(s.body);\n            if (s.orelse) this.SEQStmt(s.orelse);\n        }\n        else if (s instanceof WhileStatement) {\n            this.visitExpr(s.test);\n            this.SEQStmt(s.body);\n            if (s.orelse) this.SEQStmt(s.orelse);\n        }\n        else if (s instanceof IfStatement) {\n            this.visitExpr(s.test);\n            this.SEQStmt(s.consequent);\n            if (s.alternate) {\n                this.SEQStmt(s.alternate);\n            }\n        }\n        else if (s instanceof Raise) {\n            if (s.type) {\n                this.visitExpr(s.type);\n                if (s.inst) {\n                    this.visitExpr(s.inst);\n                    if (s.tback)\n                        this.visitExpr(s.tback);\n                }\n            }\n        }\n        else if (s instanceof TryExcept) {\n            this.SEQStmt(s.body);\n            this.SEQStmt(s.orelse);\n            this.visitExcepthandlers(s.handlers);\n        }\n        else if (s instanceof TryFinally) {\n            this.SEQStmt(s.body);\n            this.SEQStmt(s.finalbody);\n        }\n        else if (s instanceof Assert) {\n            this.visitExpr(s.test);\n            if (s.msg) this.visitExpr(s.msg);\n        }\n        else if (s instanceof ImportStatement) {\n            const imps: ImportStatement = s;\n            this.visitAlias(imps.names, imps.range);\n        }\n        else if (s instanceof ImportFrom) {\n            const impFrom: ImportFrom = s;\n            this.visitAlias(impFrom.names, impFrom.range);\n        }\n        else if (s instanceof Exec) {\n            this.visitExpr(s.body);\n            if (s.globals) {\n                this.visitExpr(s.globals);\n                if (s.locals)\n                    this.visitExpr(s.locals);\n            }\n        }\n        else if (s instanceof Global) {\n            const nameslen = s.names.length;\n            for (let i = 0; i < nameslen; ++i) {\n                const name = mangleName(this.curClass, s.names[i]);\n                //              name = fixReservedNames(name);\n                const cur = this.cur.symFlags[name];\n                if (cur & (DEF_LOCAL | USE)) {\n                    if (cur & DEF_LOCAL) {\n                        throw syntaxError(\"name '\" + name + \"' is assigned to before global declaration\", s.range);\n                    }\n                    else {\n                        throw syntaxError(\"name '\" + name + \"' is used prior to global declaration\", s.range);\n                    }\n                }\n                this.addDef(name, DEF_GLOBAL, s.range);\n            }\n        }\n        else if (s instanceof ExpressionStatement) {\n            this.visitExpr(s.value);\n        }\n        else if (s instanceof Pass || s instanceof BreakStatement || s instanceof ContinueStatement) {\n            // Do nothing.\n        }\n        else if (s instanceof WithStatement) {\n            const ws: WithStatement = s;\n            this.newTmpname(ws.range);\n            this.visitExpr(ws.context_expr);\n            if (ws.optional_vars) {\n                this.newTmpname(ws.range);\n                this.visitExpr(ws.optional_vars);\n            }\n            this.SEQStmt(ws.body);\n        }\n        else {\n            fail(\"Unhandled type \" + s.constructor.name + \" in visitStmt\");\n        }\n    }\n\n    visitExpr(e: Expression) {\n        assert(e !== undefined, \"visitExpr called with undefined\");\n        if (e instanceof BoolOp) {\n            this.SEQExpr(e.values);\n        }\n        else if (e instanceof BinOp) {\n            this.visitExpr(e.lhs);\n            this.visitExpr(e.rhs);\n        }\n        else if (e instanceof UnaryOp) {\n            this.visitExpr(e.operand);\n        }\n        else if (e instanceof Lambda) {\n            this.addDef(\"lambda\", DEF_LOCAL, e.range);\n            if (e.args.defaults)\n                this.SEQExpr(e.args.defaults);\n            this.enterBlock(\"lambda\", FunctionBlock, e, e.range);\n            this.visitArguments(e.args, e.range);\n            this.visitExpr(e.body);\n            this.exitBlock();\n        }\n        else if (e instanceof IfExp) {\n            this.visitExpr(e.test);\n            this.visitExpr(e.body);\n            this.visitExpr(e.orelse);\n        }\n        else if (e instanceof Dict) {\n            this.SEQExpr(e.keys);\n            this.SEQExpr(e.values);\n        }\n        else if (e instanceof ListComp) {\n            this.newTmpname(e.range);\n            this.visitExpr(e.elt);\n            this.visitComprehension(e.generators, 0);\n        }\n        else if (e instanceof GeneratorExp) {\n            this.visitGenexp(e);\n        }\n        else if (e instanceof Yield) {\n            if (e.value) this.visitExpr(e.value);\n            this.cur.generator = true;\n            if (this.cur.returnsValue) {\n                throw syntaxError(\"'return' with argument inside generator\");\n            }\n        }\n        else if (e instanceof Compare) {\n            this.visitExpr(e.left);\n            this.SEQExpr(e.comparators);\n        }\n        else if (e instanceof Call) {\n            this.visitExpr(e.func);\n            this.SEQExpr(e.args);\n            for (let i = 0; i < e.keywords.length; ++i)\n                this.visitExpr(e.keywords[i].value);\n            // print(JSON.stringify(e.starargs, null, 2));\n            // print(JSON.stringify(e.kwargs, null,2));\n            if (e.starargs) this.visitExpr(e.starargs);\n            if (e.kwargs) this.visitExpr(e.kwargs);\n        }\n        else if (e instanceof Num || e instanceof Str) {\n            // Do nothing.\n        }\n        else if (e instanceof Attribute) {\n            this.visitExpr(e.value);\n        }\n        else if (e instanceof Subscript) {\n            this.visitExpr(e.value);\n            this.visitSlice(e.slice);\n        }\n        else if (e instanceof Name) {\n            this.addDef(e.id.value, e.ctx === Load ? USE : DEF_LOCAL, e.id.range);\n        }\n        else if (e instanceof List || e instanceof Tuple) {\n            this.SEQExpr(e.elts);\n        }\n        else {\n            fail(\"Unhandled type \" + e.constructor.name + \" in visitExpr\");\n        }\n    }\n\n    visitComprehension(lcs: Comprehension[], startAt: number) {\n        const len = lcs.length;\n        for (let i = startAt; i < len; ++i) {\n            const lc = lcs[i];\n            this.visitExpr(lc.target);\n            this.visitExpr(lc.iter);\n            this.SEQExpr(lc.ifs);\n        }\n    }\n\n    /**\n     * This is probably not correct for names. What are they?\n     * @param names\n     * @param range\n     */\n    visitAlias(names: Alias[], range: Range) {\n        /* Compute store_name, the name actually bound by the import\n            operation.  It is diferent than a->name when a->name is a\n            dotted package name (e.g. spam.eggs)\n        */\n        for (const a of names) {\n            const name = a.asname === null ? a.name.value : a.asname;\n            let storename = name;\n            const dot = name.indexOf('.');\n            if (dot !== -1)\n                storename = name.substr(0, dot);\n            if (name !== \"*\") {\n                this.addDef(storename, DEF_IMPORT, range);\n            }\n            else {\n                if (this.cur.blockType !== ModuleBlock) {\n                    throw syntaxError(\"import * only allowed at module level\");\n                }\n            }\n        }\n    }\n\n    /**\n     *\n     */\n    visitGenexp(e: GeneratorExp) {\n        const outermost = e.generators[0];\n        // outermost is evaled in current scope\n        this.visitExpr(outermost.iter);\n        this.enterBlock(\"genexpr\", FunctionBlock, e, e.range);\n        this.cur.generator = true;\n        this.addDef(\".0\", DEF_PARAM, e.range);\n        this.visitExpr(outermost.target);\n        this.SEQExpr(outermost.ifs);\n        this.visitComprehension(e.generators, 1);\n        this.visitExpr(e.elt);\n        this.exitBlock();\n    }\n\n    visitExcepthandlers(handlers: ExceptHandler[]) {\n        for (let i = 0, eh; eh = handlers[i]; ++i) {\n            if (eh.type) this.visitExpr(eh.type);\n            if (eh.name) this.visitExpr(eh.name);\n            this.SEQStmt(eh.body);\n        }\n    }\n\n    /**\n     * @param ste The Symbol Table Scope.\n     */\n    analyzeBlock(ste: SymbolTableScope, bound: {}, free: {}, global: {}) {\n        const local = {};\n        const scope: { [name: string]: DictionaryKind } = {};\n        const newglobal = {};\n        const newbound = {};\n        const newfree = {};\n\n        if (ste.blockType === ClassBlock) {\n            dictUpdate(newglobal, global);\n            if (bound)\n                dictUpdate(newbound, bound);\n        }\n\n        for (let name in ste.symFlags) {\n            if (ste.symFlags.hasOwnProperty(name)) {\n                const flags = ste.symFlags[name];\n                this.analyzeName(ste, scope, name, flags, bound, local, free, global);\n            }\n        }\n\n        if (ste.blockType !== ClassBlock) {\n            if (ste.blockType === FunctionBlock)\n                dictUpdate(newbound, local);\n            if (bound)\n                dictUpdate(newbound, bound);\n            dictUpdate(newglobal, global);\n        }\n\n        const allfree = {};\n        const childlen = ste.children.length;\n        for (let i = 0; i < childlen; ++i) {\n            const c = ste.children[i];\n            this.analyzeChildBlock(c, newbound, newfree, newglobal, allfree);\n            if (c.hasFree || c.childHasFree)\n                ste.childHasFree = true;\n        }\n\n        dictUpdate(newfree, allfree);\n        if (ste.blockType === FunctionBlock) this.analyzeCells(scope, newfree);\n        this.updateSymbols(ste.symFlags, scope, bound, newfree, ste.blockType === ClassBlock);\n\n        dictUpdate(free, newfree);\n    }\n\n    analyzeChildBlock(entry: SymbolTableScope, bound: {}, free: {}, global: {}, childFree: {}) {\n        const tempBound = {};\n        dictUpdate(tempBound, bound);\n        const tempFree = {};\n        dictUpdate(tempFree, free);\n        const tempGlobal = {};\n        dictUpdate(tempGlobal, global);\n\n        this.analyzeBlock(entry, tempBound, tempFree, tempGlobal);\n        dictUpdate(childFree, tempFree);\n    }\n\n    analyzeCells(scope: { [name: string]: number }, free: { [name: string]: any }) {\n        for (let name in scope) {\n            if (scope.hasOwnProperty(name)) {\n                const flags = scope[name];\n                if (flags !== LOCAL) continue;\n                if (free[name] === undefined) continue;\n                scope[name] = CELL;\n                delete free[name];\n            }\n        }\n    }\n\n    /**\n     * store scope info back into the st symbols dict. symbols is modified,\n     * others are not.\n     */\n    updateSymbols(symbols: { [name: string]: number }, scope: { [name: string]: number }, bound: {}, free: {}, classflag: boolean) {\n        for (let name in symbols) {\n            if (symbols.hasOwnProperty(name)) {\n                let flags = symbols[name];\n                const w = scope[name];\n                flags |= w << SCOPE_OFF;\n                symbols[name] = flags;\n            }\n        }\n\n        const freeValue = FREE << SCOPE_OFF;\n        for (let name in free) {\n            if (free.hasOwnProperty(name)) {\n                const o = symbols[name];\n                if (o !== undefined) {\n                    // it could be a free variable in a method of the class that has\n                    // the same name as a local or global in the class scope\n                    if (classflag && (o & (DEF_BOUND | DEF_GLOBAL))) {\n                        const i = o | DEF_FREE_CLASS;\n                        symbols[name] = i;\n                    }\n                    // else it's not free, probably a cell\n                    continue;\n                }\n                if (bound[name] === undefined) continue;\n                symbols[name] = freeValue;\n            }\n        }\n    }\n\n    /**\n     * @param {Object} ste The Symbol Table Scope.\n     * @param {string} name\n     */\n    analyzeName(ste: SymbolTableScope, dict: { [name: string]: DictionaryKind }, name: string, flags: number, bound: {}, local: {}, free: {}, global: {}) {\n        if (flags & DEF_GLOBAL) {\n            if (flags & DEF_PARAM) throw syntaxError(\"name '\" + name + \"' is local and global\", ste.range);\n            dict[name] = GLOBAL_EXPLICIT;\n            global[name] = null;\n            if (bound && bound[name] !== undefined) delete bound[name];\n            return;\n        }\n        if (flags & DEF_BOUND) {\n            dict[name] = LOCAL;\n            local[name] = null;\n            delete global[name];\n            return;\n        }\n\n        if (bound && bound[name] !== undefined) {\n            dict[name] = FREE;\n            ste.hasFree = true;\n            free[name] = null;\n        }\n        else if (global && global[name] !== undefined) {\n            dict[name] = GLOBAL_IMPLICIT;\n        }\n        else {\n            if (ste.isNested)\n                ste.hasFree = true;\n            dict[name] = GLOBAL_IMPLICIT;\n        }\n    }\n\n    analyze(): void {\n        const free = {};\n        const global = {};\n        this.analyzeBlock(this.top, null, free, global);\n    }\n}\n","// import { Symbol } from './Symbol';\nimport { SymbolTable } from './SymbolTable';\nimport { ModuleBlock } from './SymbolConstants';\nimport { Module } from '../ast/types';\nimport { Statement } from '../ast/types';\nimport { Range } from '../common/Range';\n\n/**\n * Creates a SymbolTable for the specified Module.\n */\nexport function semanticsOfModule(mod: Module): SymbolTable {\n    const st = new SymbolTable();\n\n    st.enterBlock(\"top\", ModuleBlock, mod, null);\n    st.top = st.cur;\n\n    // This is a good place to dump the AST for debugging.\n    for (const stmt of mod.body) {\n        st.visitStmt(stmt);\n    }\n\n    st.exitBlock();\n\n    st.analyze();\n\n    return st;\n}\n\nexport function symbolTableFromStatements(stmts: Statement[]): SymbolTable {\n    const st = new SymbolTable();\n\n    // st.enterBlock(\"top\", ModuleBlock, mod, 0);\n    st.top = st.cur;\n\n    // This is a good place to dump the AST for debugging.\n    for (const stmt of stmts) {\n        st.visitStmt(stmt);\n    }\n\n    // st.exitBlock();\n\n    st.analyze();\n\n    return st;\n}\n\nexport interface SymbolInfo {\n    get_name(): string;\n    is_referenced(): boolean;\n    is_imported(): boolean;\n    is_parameter(): boolean;\n    is_global(): boolean;\n    is_declared_global(): boolean;\n    is_local(): boolean;\n    is_free(): boolean;\n    is_assigned(): boolean;\n    is_namespace(): boolean;\n    get_namespaces(): SymbolObj[];\n}\n\nexport interface SymbolObj {\n    get_type(): string;\n    get_name(): string;\n    get_range(): Range;\n    is_nested(): boolean;\n    has_children(): boolean;\n    get_methods(): string[];\n    get_parameters(): string[];\n    get_locals(): string[];\n    get_globals(): string[];\n    get_frees(): string[];\n    get_identifiers(): string[];\n    lookup(identifier: string): SymbolInfo;\n}\n\n/**\n * Provides a textual representation of the SymbolTable.\n */\nexport function dumpSymbolTable(st: SymbolTable): string {\n    /**\n     * Renders the argument in the Python format: 'True' or 'False'.\n     */\n    const pyBoolStr = function (b: boolean): string {\n        return b ? \"True\" : \"False\";\n    };\n    /**\n     * Renders the list in the Python format: '[' 1, 2, ..., N ']'.\n     */\n    const pyList = function (l: string[]) {\n        const ret: string[] = [];\n        for (let i = 0; i < l.length; ++i) {\n            // TODO: Originally, this computed the Python repr().\n            ret.push(l[i]);\n        }\n        return '[' + ret.join(', ') + ']';\n    };\n    const getIdents = function (obj: SymbolObj, indent: string): string {\n        if (indent === undefined) indent = \"\";\n        let ret = \"\";\n        ret += indent + \"type: '\" + obj.get_type() + \"'\\n\";\n        ret += indent + \"name: '\" + obj.get_name() + \"'\\n\";\n        ret += indent + \"lineno: \" + JSON.stringify(obj.get_range()) + \"\\n\";\n        ret += indent + \"nested: \" + pyBoolStr(obj.is_nested()) + \"\\n\";\n        ret += indent + \"haschildren: \" + pyBoolStr(obj.has_children()) + \"\\n\";\n        if (obj.get_type() === \"class\") {\n            ret += indent + \"Class_methods: \" + pyList(obj.get_methods()) + \"\\n\";\n        }\n        else if (obj.get_type() === \"function\") {\n            ret += indent + \"Func_params: \" + pyList(obj.get_parameters()) + \"\\n\";\n            ret += indent + \"Func_locals: \" + pyList(obj.get_locals()) + \"\\n\";\n            ret += indent + \"Func_globals: \" + pyList(obj.get_globals()) + \"\\n\";\n            ret += indent + \"Func_frees: \" + pyList(obj.get_frees()) + \"\\n\";\n        }\n        ret += indent + \"-- Identifiers --\\n\";\n        const objidents = obj.get_identifiers();\n        const objidentslen = objidents.length;\n        for (let i = 0; i < objidentslen; ++i) {\n            const info = obj.lookup(objidents[i]);\n            ret += indent + \"name: '\" + info.get_name() + \"'\\n\";\n            ret += indent + \"  is_referenced: \" + pyBoolStr(info.is_referenced()) + \"\\n\";\n            ret += indent + \"  is_imported: \" + pyBoolStr(info.is_imported()) + \"\\n\";\n            ret += indent + \"  is_parameter: \" + pyBoolStr(info.is_parameter()) + \"\\n\";\n            ret += indent + \"  is_global: \" + pyBoolStr(info.is_global()) + \"\\n\";\n            ret += indent + \"  is_declared_global: \" + pyBoolStr(info.is_declared_global()) + \"\\n\";\n            ret += indent + \"  is_local: \" + pyBoolStr(info.is_local()) + \"\\n\";\n            ret += indent + \"  is_free: \" + pyBoolStr(info.is_free()) + \"\\n\";\n            ret += indent + \"  is_assigned: \" + pyBoolStr(info.is_assigned()) + \"\\n\";\n            ret += indent + \"  is_namespace: \" + pyBoolStr(info.is_namespace()) + \"\\n\";\n            const nss = info.get_namespaces();\n            const nsslen = nss.length;\n            ret += indent + \"  namespaces: [\\n\";\n            const sub: string[] = [];\n            for (let j = 0; j < nsslen; ++j) {\n                const ns = nss[j];\n                sub.push(getIdents(ns, indent + \"    \"));\n            }\n            ret += sub.join('\\n');\n            ret += indent + '  ]\\n';\n        }\n        return ret;\n    };\n    return getIdents(st.top, '');\n}\n"],"names":["T_COMMENT","T_ENDMARKER","T_NAME","T_NL","T_OP","syntaxError","SourceKind","TOK"],"mappings":"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EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAC,CAAC;YACxE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC9B,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAC,CAAC;YACxE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC9B,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAC,CAAC;YACxE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACjD,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,E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E,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAC,CAAC;YAC9E,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC9B,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAC,CAAC;YAC9E,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC5D,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAC,CAAC;YACtD,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACvC,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE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oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC,EAAC,CAAC;YACd,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC5B,EAAC,CAAC,EAAE,CAAC;oBACJ,CAAC,EAAE,CAAC;oBACJ,CAAC,EAAE,CAAC;oBACJ,CAAC,EAAE,CAAC;oBACJ,CAAC,EAAE,CAAC;oBACJ,CAAC,EAAE,CAAC;oBACJ,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC,EAAC,CAAC;YACd,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC5B,CAAC,CAAC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gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;YACX,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACR,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBAClB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBAClB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACzD,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBAClB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACR,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;YACX,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC/D,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBAC3B,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACR,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;oBACP,CAAC,EAAE,EAAE,CAAC,CAAC;oBACP,CAAC,EAAE,EAAE,CAAC,CAAC;oBACP,CAAC,EAAE,EAAE,CAAC,CAAC;oBACP,CAAC,EAAE,EAAE,CAAC,CAAC;oBACP,CAAC,EAAE,EAAE,CAAC,CAAC;oBACP,CAAC,EAAE,EAAE,CAAC,CAAC;oBACP,CAAC,EAAE,EAAE,CAAC,CAAC;oBACP,CAAC,EAAE,EAAE,CAAC,CAAC;oBACP,CAAC,EAAE,EAAE,CAAC,CAAC;oBACP,CAAC,EAAE,EAAE,CAAC,CAAC;oBACP,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACV,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACjB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBAClB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACV,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;oBACR,CAAC,GAAG,EAAE,CAAC,CAAC;oBACR,CAAC,GAAG,EAAE,CAAC,CAAC;oBACR,CAAC,GAAG,EAAE,CAAC,CAAC;oBACR,CAAC,GAAG,EAAE,CAAC,CAAC;oBACR,CAAC,GAAG,EAAE,CAAC,CAAC;oBACR,CAAC,GAAG,EAAE,CAAC,CAAC;oBACR,CAAC,GAAG,EAAE,CAAC,CAAC;oBACR,CAAC,CAAC,EAAE,CAAC,CAAC;oBACN,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACV,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACR,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACV,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;oBACR,CAAC,GAAG,EAAE,CAAC,CAAC;oBACR,CAAC,GAAG,EAAE,CAAC,CAAC;oBACR,CAAC,GAAG,EAAE,CAAC,CAAC;oBACR,CAAC,GAAG,EAAE,CAAC,CAAC;oBACR,CAAC,GAAG,EAAE,CAAC,CAAC;oBACR,CAAC,GAAG,EAAE,CAAC,CAAC;oBACR,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACV,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACV,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACV,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAChB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACnB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACR,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACV,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACvE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACpD,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACV,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC1B,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACV,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAClB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACV,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACV,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACV,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACV,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACV,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACV,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,GAAG,EAAE,CAAC,C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gBAC1B,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACV,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CA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V,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,GAAG,EAAE,IAAI,CAAC;YACX,CAAC,GAAG,EAAE,IAAI,CAAC;YACX,CAAC,CAAC,EAAE,MAAM,CAAC;YACX,CAAC,GAAG,EAAE,IAAI,CAAC;YACX,CAAC,GAAG,EAAE,IAAI,CAAC;YACX,CAAC,CAAC,EAAE,IAAI,CAAC;YACT,CAAC,GAAG,EAAE,IAAI,CAAC;YACX,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,GAAG,EAAE,IAAI,CAAC;YACX,CAAC,GAAG,EAAE,IAAI,CAAC;YACX,CAAC,CAAC,EAAE,IAAI,CAAC;YACT,CAAC,GAAG,EAAE,IAAI,CAAC;YACX,CAAC,GAAG,EAAE,IAAI,CAAC;YACX,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,GAAG,EAAE,IAAI,CAAC;YACX,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,GAAG,EAAE,IAAI,CAAC;YACX,CAAC,GAAG,EAAE,IAAI,CAAC;YACX,CAAC,GAAG,EAAE,IAAI,CAAC;YACX,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,GAAG,EAAE,IAAI,CAAC;YACX,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,EAAE,EAAE,IAAI,CAAC;YACV,CAAC,EAAE,EAAE,IAAI,CAAC;YAC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"}